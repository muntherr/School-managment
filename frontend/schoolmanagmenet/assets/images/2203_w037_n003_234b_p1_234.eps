%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 3/7/2022
%%BoundingBox: 0 0 628 365
%%HiResBoundingBox: 0 0 627.2479 364.8616
%%CropBox: 0 0 627.2479 364.8616
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 11991 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD45FF847EA8FD7CFFA85A53597EFD7BFF7E537E595A7EFD79FFA8
%535A535A53537DFD78FF597E597E53547E7E7EFD76FF7D5A535A53532F53
%597E59FD74FFA85A537E595A53545353537E53AFA9FD70FFA87E535A535A
%2F532F532F532F53535A7EFD6FFFA8537E597E5354535A53545354537E59
%5A84FD6DFFA9537E535AFD04532F5353532F5A535A537EFD6DFF7E5A537E
%5953535453535354535A597E595A2F7EFD6BFF7E5A535A53532F532F532F
%532F53535A535A2F53297EA9FD68FFA87E597E597E5354535A5354535453
%7E597E5354535A2F5AA9FD67FFAF535A535A2F5353532FFD04537E535A53
%532F532F532F53A8FD0EFFCA9ACAFD0AFFCAC9A1FD4AFF7E7E53532F5453
%535354537E537E5954535453535354535384FFFFFFA8FD09FF9A4A75FFFF
%FF522728FD04FFC94A75CAFD4AFFA8FF7E5329532F532F5A535A535A2F53
%2F532F532F532F53537EA8842FA9FD07FFA04A9ACAFFFF5220F852FFFFFF
%A06F4BFD4FFFA95A542F5A5A7E597E5354535A5354535A5354537E53A9FF
%845384FD06FF2F532EFFFFFFA19A2052FFFFFF532853A8FD50FFA87E537E
%535AFD04532F5353532F53535A535A53FFFFA8537EA8FFFFFF7E29282FAF
%FFFFA16FBCA1FFFF7E282F28A9FD52FF84537E53532F5453535354535353
%7E597E535353FFFFA8535AA8FFFF7E285352FFFFFFA075A0CFFFA8285328
%53A8FD32FFA827F87DFD1DFFA87DA8595329532F532F532F53537E53532F
%5353A87DFF7EA8FFFF7D282852287EA0C899C2C17D2852282853FD33FF53
%F84B7CFD21FFA9845354535A535A597E5954535A53542FA8FD05FFA82853
%282F52A1A0C8A0A1532F285328A8FD33FF274B75A0FD22FF7D2F29532F53
%535A535A2F532F5353532984FD05FF59062F28772853525252772828287E
%FD35FF9A9AA0FD22FF5328532853537E595A53545353535453532F7EFD05
%FF845353532F28532877765359A9FD33FFCFCAA8C375C3CAFD21FF282828
%2F282F535A2F5329532F532F532F53297EA8FD05FFA853282F282F527752
%FD35FFCA76A1C2A2A0C9FD22FF5353285328532F2F537E5353535A535453
%5A2F5AA8FD05FF522F2853285377A2FD35FF7D7776C277A1A0A2FD22FFA8
%53282F282F2884FFAF7E5329532F532F532F537EFFFFFFA82F282F282F28
%5377FD34FFA87D77A1A0A1A1C977CBFD22FF2E5328532853FD05FFA85353
%2F532F5A59A9FD04FF52532E53285353CAFD21FFCAFFCFFFCAFD0EFF7D76
%A2A1C2767D84845A855A60A9FD1DFFA92F282F7DA8A8FD07FF7E7E2F5353
%7EFD04FFCAC2A0C2A0A0A0C9FD20FFC9C9CAC9C9C2C9C2C9FD0CFF77A1A1
%A8A1A17D605A615A6159CFFD1EFF2E5328A8FD0CFF7E7EA9FD04FFCFC2C9
%C8C8C2C9C8FD1FFFCFC1C8A0C9C2C8A0C8C2FD0BFFA877767D767DA09952
%605A605A7676FD1EFF53282F7EFD0DFFA8FD05FFC2C2A0C2C2C8A0C8CAFD
%1EFFCFC9C2C8C2C9C2C8C2C9FD0CFFA27D77A177C2997D60615A617DCAFD
%1EFF2E2F28A8FD12FFCAC8C2C8A0C8C2C8C2C9FD21FFC9C9A1C9C9FD0FFF
%A8A17DA1767D5A605A5A365A7EFD1EFF53282FA8FD12FFC99FC8C2A0A0C8
%A0C8A0FD21FFC9C9CAC9CAFD10FF777D777D537E535A535A2F5353FD1DFF
%A82F53FD13FFC9C8C2C8A0C9C2C8C2C8A7FD14FFC3CAFD0AFFC9C9A7C9C9
%FD0FFFA8532F532F532F5353532F532F2F53FD1CFFAF287DFD12FFCFC8A0
%C8C2C2A0C8C2C8A0C8CAFD12FFC3C29ACAFD09FFFD05C9FD10FF53535354
%53535354FD04532F59FD1DFF5984FD13FFC2C8C2C8C2C9C2C8C2C8C2C9FD
%12FFC96F7599CFFD08FFA0C9C9C9A0FD0FFFA95A29532F532F5352532F53
%2F2F59FD1CFFA87EA8FD12FFCAC8A0C8A0C8C9C8A0C8A0C89FCAFD11FFCA
%C299A0A8FFA8A8FFFFAFFFA9FD05C9AFFFA9FFAFFFA9FFAFFFA9FFAFFFA1
%C9A87E535A5354777D5354535453FD15FFA8FD07FF7EFFA8AFFD12FFC2C8
%C2C9C2CFC9C8C2C8C2C8C2FD12FF7D7D5A85A927F85353A9A9AFA0C9C9C9
%A1FFA9AFA9FFA9AFA9FFA9AFA9AFA9C26EA1A9A985A953535354535329A8
%FD14FF7DF8F8A8FD04FFA884FFFF7EFD12FFC9C2C8A0C8C9FFA0C8C2C8A0
%C2C2FD10FFA985608560AF4BF8F8F84BFFFFFD05C9CAFD0DFFC29A6FCAAF
%A928270028285A53537EFD13FF7DF8F8F876FD04FFA8A8FFFFA8A9FD08FF
%A82727A8FD05FFC9C8C2C8C2C9FFFFC2C8A0C8A0A1A8FD10FF5A6036605A
%A8F8F82075A8FFC2C9A1C9C2FFA8FFCAFFA8FFCAFFA8FFCAFFA9C99999A1
%FF7D20FD04F82F532F53A8FD12FF52F8276FA0FD04FF7DFFFFFFA8A8FD08
%FF26F8F827A8FD04FFCA9FC8A0C2A0FFFFCAA0C2A07D767DA8FD0FFF855A
%8560615A4B6FC26FFFCAFD05C9CAFD0DFFC9C2BCFFAFA16F752026F85353
%542FAFFD12FF7D4B999A75FFFFFFA8A9FD04FF7EFD07FF7D6F754BF87DFD
%04FFCAC8C2C9A0C8CAFFFFCAC9A177A153A1FD0FFF84605A605A60529A99
%99A1C9C9C9A7C9C9C9A8FFCAFFA8FFCAFFA8FFCAFFAFCABBC2A1AFA199BC
%9A20F828542F53A8FD13FFA0C2759ACFFFFF7EA8FD04FFA8A8FD06FF526F
%9A996F52FD04FFA8A1C3A0A0A0FFFFFFA87E7777527DA8FD10FF84605A61
%605A76A076A8C8FD06C9CFFD04FFCFFFFFFFCFFFFFFFC9C2BCA285A99AC2
%6FF8F82877A1C9CFCFFD10FFA9A8A9A099A1FFFFFF7EFD05FFA9A8FD06FF
%F8759AC2F852FD04FF7E7D777D77A8FD04FF7DA1777DA8FD10FFA8FF5A60
%5A602F5A845A53A8A1C9C9C9A1C9A7FFA8FFA8FFA8FFA8FFA8FFA9CA99C2
%7E7F77769977525375C8C2C9C2C2A1FD0EFF53282F287DA0532EFF7DA9FD
%06FF7DAFFD04FFA8534B9A9A2828A8FFFF7D7D76777677A1FD04FFA15277
%A8FD12FFAFA95A855A545A615A545A85A7FD05C9A8FFAFAFA9FFAFAFA9FF
%AFAFA9C3A1857EA17EA277A985A8C2C3A0A176A1CAFD0DFF285453532FFD
%045A85A9FD07FF7EFD04FFA97EA2A8A97DA97ECBA877777D777D77A8FD04
%FF7D7DA8FD0EFFA8CAA8CAA8FF7E5A5A5359605A612F5A3660A7C9A7C9C8
%C9A8CBA8A9A8CBA8A9A8CBA8A9A1857E7D7D857E7D7D857F7E7DA2A1A8A8
%FD0DFFA8532F53285353A87E847DA8A8CAA8CAA8CAA8A8A8CAA8855A7DA0
%A7A0A07E857EA8A1A8A8A8A1CAA8CAA8CAA8A8A2FFA8CAA8FD0CFFA8FFCA
%FFCAA8535353615A615A7E52846084FD04C9C8CFA8FFCAFFA8FFCAFFA8FF
%CAFF84857D857E857D7E7E8585A9A8FFA8CAA8FD0DFFFD04532FA1C1C8C2
%C8C1C9A8A8A8CAA8CAA8FFA8857E5A2E5376C8A07E5B8584FFA8FFA8FFA8
%FFA8CAA8FFA8FFA8FFA8CAFD11FF7E5353605A605A6076BCBCA85AC9C9C9
%A1C9C9FD0DFF7E7E5A855A7E767F5A7EA1CAA8CAA8CAA8FD0BFF7E532F53
%28537DA77DA77DA77DA8A1A8A8CAA8CAA8857EA9282F28A1C1C27DA98485
%84CAA8FFA8CAA8FFA8CAA8FFA8CAA8FFA8FD0CFFA8FFCAFFCFA853615A85
%60615AA1BBC27E85C9C9C9CAC9C9FD0EFF7E857FA99A9AA1A8C2C2A8FFA8
%CAA8FFA8FD0AFF7E5354535353855B857F855BA2A1CAA8FFCAFFCAFF7F85
%857E4C53A0C9A2A985A97FA9A8FFCAFFA8FFCAFFA8FFA8CAA8FFA8CAFD0D
%FFA8FFFFFF7D5A5A605A605A6059A17D84A1C9C9C9A7C9C2CAFD0CFFA885
%7E857E9ABBC2BBC2BBCAA8CAA8CAA8CAFD0AFF53532F532853A0C9A0C9A0
%C26FA0A8CAA8FFA8CFA8857E857D75759A7E855A855A857ECAA8FFA8CAA8
%FFA8CAA8FFA8CAA8CAA8FD0CFFCAFFA8FFFFA82F845A605A615A617ECAFD
%08C9C8FD0CFFA85A858585A1C2BCC2BBC3A8CAA8FFA8CAA8FD0AFFC29AA1
%77535AA8A1A8A1A8A19A9ACAA8FFA8FFCAFF7E857FA16E9AC2857E857F85
%5AA9CAFFA8FFA8CAA8CAA8CAA8CAA8CAA8CAFD12FFA2767D777D777D76A1
%FD04C9A1C9C9C9A1C8CAFD0BFFA82F28532F532E52A1C9A7CAA8CAA8CAA8
%CAFD0AFFBCC2BBC29AA77DA87DA87DA8A0A7A1CAA8CAA8FFA8CA84A9A1A0
%9AA17E855A857EA9A8FFA8CAA8FFA8CAA8FFA8CAA8FFA8CAA8FD0DFFA853
%A8FFFFA17D77A177A17777A1CAC9C9C9CAC9C9C9CAC9C9CAFFCAFFCAFFCA
%FFCAFFFFCB2853282F287E53A8CAFFA8FFA8FFA8FD0CFFCABCC2BCC2C2C2
%99C2A0C9C2C9A7CAA8CBA8FFA8FFA8FFCA845A7E5A7E545A7EFFCAFFA8FF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FD0CFFCAA82F53297EA87D767D777D7677
%77A1C9CFC9CAC9CFC9CAC9CFC2C9A8CAA8CAA8CAA8CAA8CA7D2F282F282F
%282F7DCAA8CAA8CAA8CAA8FFA8FFCAFD08FFCA7DA19AC2997676607ECAA8
%A8A1A8A8CAA8CAA8CAA8CA53532F532F53287EA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8FD0BFFA92F54535453A1777D77A1777D52A177CFCACF
%CACFCACFCACFCACFC2A8A1CAA8A8A1CAA8A8A87E28532853282F287DA8A8
%A1CAA8A8A1CAA8A8A1A8A8FFFFFFC9C9C2C9A7615A615A7E59845A84FD09
%C9CAC9C9C97E53535354535353CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CA
%FD05C9CFFD06FFA829532F5353A052777677767D7677767DA7CFC9CFC9CA
%C9CFC9CAC9C8A7A8A8CAA8A8A8CAA8CA5328282F282F282828FD04A8CAA8
%A8A8CAFD05A8FFA0C2A0C2C1A75A6036605A605A605AC9C9CAC9C9A7C9C9
%C9A7C9C9C92F532F532F532F53A7C9C9C9A7C9C9C9A7C9C9C9A7C9C9C9A7
%C9C9C9A7C9C9FD05FFA953542F54537D777D53A177A1777D77A177CACACF
%CACFCACFCACFCACFC9C9A8FFCAFFA8FFCAFFCA7D285328532E532853A8FF
%CAFFCAFFCAFFCAFFCAFFCAFFC9C8C2C8C2C8A1615A85605A5A855A85CACF
%CACFCACFCACFCACFCACFA85A5354535A535453CFCFCFCACFCACFCACFCACF
%CACFCACFCACFCACFCACFCACFFD05FF2F53537D7D7D7777767D7777767D77
%77767DA7CFC9CFC9CFC9CFC9CFC9CFC2CAA8FFA8CAA8FFA8CA2E2F282F28
%2F282F28A8CFFFA8FFA8FFA8FFA8FFA8FFA8C99FC8C2C8C1A75A605A615A
%605A605AA8C9CFC9CFC9CFC9CFC9CFCAA82F5353532F532F53A1CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCAFD06FF7DA8A1A87DA1777D77
%A1777D777D777D77CACACFCACFCACFCACFCACFCAC9C9FFA8FFCAFFA8FFA8
%53285328532853282F7DFFCAFFA8FFCAFFA8FFCAFFA8FFC8C8C2C8C2C87D
%615A615A605A615A61A8CFCACFCACFCACFCACFCACF7D535354535353542F
%A8CACFCACFCACFCACFCACFCACFCACFCACFCACFCACFC9CFFD06FFA87DA87D
%A1767D7677767D767752777677A1CFC9CAC9CFC9CAC9CFC9CFA7C8A8CBA8
%FFA8CAA8A82829062F282F062F067DCAFFA8FFA8FFA8FFA8FFA8FFA8C9A0
%C8A0C8C28336605A6035605A603684C9CAC9CFC9CAC9CFC9CAC97E29532F
%532F532F537DCFC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9FD06
%FFA8A8A1A8A1A877A177A177A1777D77A177CACFCFCACFCACFCACFCACFCA
%CFC2CAA8FFCAFFA8FFA87E52777677527776A1A8FFCAFFA8FFCAFFA8FFCA
%FFA8FFCAC8C2C9C2C87D61606160615A615A84A8CFCACFCACFCACFCACFCA
%CF5954535A5354535A2F7ECACFCACFCACFCACFCACFCACFCACFCACFCACFCA
%CFCACFFD07FFA8A17DA17DA17777767D7777527D7777A1CFC9CFC9CFC9CF
%C9CFCACFC8C8A0A8A1A8A1A8A1CAA8C2BBC2BCC2BBC2C2A8A1A8A1A8A1A8
%A1A8A1A8A1A8A8FFC9C29FC8C2A77CA17DA17DA1A0C29AFD0BC9A77D2F53
%2F542F532F3053FD16C9FD08FFA8CAA8A8A7A1777D777D537D77A177A8CA
%CFCACFCACFCACFCACFC9C8C2C8A8A8A8CAA8A8A8CAC2C2BCC2C2C2BCC2A8
%A8A8CAA8A8A8CAA8CAA8CAA8FFCBFFC9C9C2C9C8C2BBC2BCC8C2C2BCC2C2
%CAFD0AC9A1A1767D777D777D77A8FD15C9CFFD05FFA8FFCAFFA8FFA8FFA1
%C2A0C2767776777677A0C8A0C9C2C8A0C9C2C8A0C8A0C2A0FFA8FFA8FFA8
%FFA8C399C299C29AC299CAA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA0BC99C2A8CA99C299C9A8FFA8FFA8FFA8FFA8FFA8CABBC2BBC39AC2BB
%C9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFCAFD0A
%FFC8C8C2C377A177A177A1C2C8C2C8C2C8C2C8C2C8C2C8C2CFFD08FFC3C2
%BCC2BCC2BCC2C9FD14FFC9BCC2C2FFCAC2C2C2C3FD0BFFCAC2BCC2C9C3C2
%C2C9FD26FFC8C8A07D7777767DA0C9A0C9C2C9A0C9C2C9A0C9C9CFFD09FF
%CA99C29AC3BCC299C3FD14FFC2C299C2FFFFA0C299C3FD0BFFCA99C2BCCA
%A0C299CAFD28FFA876A1777D76A8FD16FFCAC2BCC2C9C3BCC2BCFD14FFC9
%BCC2C2FFFFC9BBC2C2FD0BFFCAC2BCC2FFC9BBC2C9FD28FFA277767D7677
%7DFD16FFCA99C299CFA1BCBBBC7DFD13FFA0C2BBC3FFFFC9BC99C2A8FD0A
%FFCF9AC29AFFC3BC99CAFD28FFA876A1777D77A8FD16FFCAC2BCC2CAFFA1
%A17D61A9FD12FFC9BCC2A1FFFFFFBCC29AA2FD0BFFC2BBC3FFCABBC2C9FD
%28FFA87D76A12F7EA8FD16FF855AA17CA8AF615A603685FD12FFA0A177A2
%FFFFFFC39AA17D7D77A2A1FD06FFCA9A9A9AFFCA9A9ACAFD29FF53535354
%2F7E7EFD13FFA9855A615A6185AF5A615A605AFD12FFA177A17DA8FFFFA1
%7D77A1777D76777DFD04FFCA767D777DFFCA76A07DFD20FFA8FFFFFFA8FF
%CAFFA85A29532F53292F29A8CFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF6060
%36605A6036845A60366084AFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%7D777677767DA2A876777677767D7DCACACAA1A17677767776FF7DA09A76
%A1FFA8FFA8FFCAFFA8FD1EFFCFFF7E54535A535453537EFFCAFFFFFFCAFF
%FFFFCAFFFFFFCAFFA8605A615A615A855A615A85A8FD0DFFCAFFFFFFCAFF
%FFA276A1777D777DA1A177A1A1A8A8FFFFFF7D7D537E537E597EA8A8777D
%777EA8FFCAFFFFFFCAFD22FFA8A9A8FFA8A9A8FFFFFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FF84A984AFA8FFA8605A85A8FFCAFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFCAFFA8FFA2A177A1777D76A1A2A8A8FFFFFFA8FFA88584A98485
%84AF84FF7E605A605AFD48FFA8FD1DFFCBFDB3FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-03-07T14:34:34+03:00"
   xmp:ModifyDate="2022-03-07T14:34:34+03:00"
   xmp:MetadataDate="2022-03-07T14:34:34+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:d8df4f36-8749-df42-93fa-7eee571a45bc"
   xmpMM:InstanceID="xmp.iid:d8df4f36-8749-df42-93fa-7eee571a45bc"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2203.w037.n003.234B.p1.234</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="152"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FVK6ure0tpbm4cRwQqXkc9AqipOECzQQTTwbXPOOrX/mF9Xt55LZkPG0&#xA;VGI4RDovga9W8c20MIEeEuJKZJt6V+X35i6f5igFjcTBNahB9WMgIJQD9uPeh26j8KZhajTGG/8A&#xA;C5GOd+9mmYrY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq8t/NjzXzcaBaP8CEPfsD1bqsf0faP0Zn6TF/EXHzT6PJ9TuvRi4Kf3km3yHc5sIC2gKOl6&#xA;3JaenFMGkgif1IHjb054HrXnBL1U16r9k+Fd8lOFswXsPk/849MmhktNakczW4HpXyxECZDtV415&#xA;cJB+1QkHtmtzaMjeLdHKOr0iyvrO+tkubOZJ4JBVZENQcwZRINFtBtXwJdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqR+cfMsXl/RZbuoN1J+7tIzvykI2JH8q9&#xA;TluHHxyphOVB8/3V07tLc3Dl3cmSWRtyWJqT8yc24HQOGxu4naaVpG79B4DwzIApksAJNBuT0GFU&#xA;9sbYW8AB+227n+H0ZRI2WJZt+WH5kaVpFzNpWoqIbS6l5RX9TRXoFpIOgXb7Q6d9umNqtMZCxzbs&#xA;Uq2e3qyuoZSGVhVWG4IPQg5qnJbxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxVh3n/wAj3PmJYbm0uQlzbIVSCSvpuCancfZb6MydPnENi1ZMfE8Z82+UvNelQq15&#xA;p0sdrTk86UkQU/maMsF+nNnhywlyO7RwEc2JZkoTHSrTk3ruPhX7HufH6MrnLogq+qXXpx+ip+N+&#xA;vsv9uCAQEny1k9B/Ln807zy+8em6mWudFJon7UlvU9U8U8V+7wOHqdKJ7j6myGSnsdn588s3ltdz&#xA;290WFkrSTR8WDmNOrqp3Yf5nNYcEgRY5twyApjo2u6XrNoLrT5xNH0dejIfB1O4OQnAxNFlGQPJH&#xA;5BLy7z5+aOuaF54sdDsLF5raUIJ5CqOtWHNmFHV6CMnw+IL1BzCz5pRltyDtdHpIZICweKR59343&#xA;Zt5x8z/4Z8qah5hexnvxp8PrvZW4BmYAgGldvhBqx8AczLdXW9ML/Kf89tJ8/arqeiXGmy6Brun0&#xA;kTTbuQNJNAf92KOKEMu3NabVFCcYyBFhM4GJoiiyL8zfOV55U8uSahZWpursmkSUDAEEbsvJKr40&#xA;NaZRnymFV1cvR6YZCSeUR0RnkLzDe+YfLNtql5AbaaUspjZGQ/AeJqrAb1BBptXpktPOUo2WGsxR&#xA;hkqN159PJkOXOK7FXYq7FXYq7FXYq7FXYq7FXYq7FWG6r+cX5aaV5qh8p3+uwxa/PLHAlkElkpLM&#xA;QI0kkRGijZuQ2dhirMsVdirsVdirsVcQCKHcHqMVYd5l/KnyjrYeUW31C9apFxa0jq3+VHQod+u1&#xA;ffMnFq5x62GEsYLym+8meY9MuRYNp00koVjEIVMgkCipKFa1/XmwjmjLe3FMDbCbxblbqRblGinU&#xA;0eNwVZT4EHcZlxqtlpQwqj9KtfUk9Zh8CfZ92/syEygsg8u+d5PLmufWEt0u7VkMF3C4FWRiOQVj&#xA;WhFPke+U5MHHHuZQlTO5IbGS8sNZ/L66b63feo0mmJQBEhXlL6isaIoZkXie7Lx2zDsi45By6thj&#xA;1i9A8p69d6zpzS3llJY3cLmKaJ1ZVLAblOW9PbtmJlxiJ2NtsJWHyv8AmBNcal+YeumRlEhv54Ve&#xA;QhQqQuY1qT0oiDNlAiGMHyaCOKVPobU/OPlLzP5LurTTbxJ2v7V4vqiVEiVUBkdfhKU5Uqae2aHX&#xA;y8KB4trdr2fDjyA84jm89/LLy75b8t6wfOms2z2epRWckEsgipyMrB5J3AlmetAVANTv7DMDR6oH&#xA;JwXd8vx+x2XaOnBiJAeocz+L+9if5w+fE8267bvaH/cRZxlbCv2mLn95Iy9ULFAKHsAe+dVpYcIP&#xA;fbzWU8ntf5FWE1p+W+ntKCpuZJp1U7EK0hVfvC1zD1RuZbMQ2Z/mO2OxV2KuxV2KuxV2KuxV2Kux&#xA;V2KrZJYol5yuqJ/MxAH3nIykIiyaTGJOwfMZ/Laz0H8wpr436XurapqpvYtUllDs0JuEuAhYIkau&#xA;GiowBHEGtegzW588jPY7B3+k02MYiTzPO/uH4/U+nVZWUMpDKwqCNwQc2YNvPkN4VdirsVdirsVd&#xA;irsVeNf85H6jHaabpUEdohuruV2N+UUukcIH7sORX4jID9GZ2iuzu05niNpqivIkc4CciFMg6Cpp&#xA;U1zZibQym4uIrWzVYSCWFIiDXbu2RAssUly5knHlfzTqvlvVF1DTnAanGaFt0kjqCUYfR1G4yrLi&#xA;ExRZRkQ+jPJvnbSPNNh9Ys29O6jA+tWbkepGx/4kp7N+o7Zpc2CWM0XJjIF5l+Z/5GanqmtXOueX&#xA;Hjd7xjLdWEremfVP2mjc/D8R3IYjfvmRg1QAqTXPHZsPLLmfW/KF9b6e/K01C1ZnvokZGqzHZGKl&#xA;0YcVHjhy6eGoieIWDy/W3Qzyw8PDt1KKtvNesa4JrW8uC5NswEYoqM/I78VA7MPuzHh2di054ojr&#xA;8acjHq55rjI/wsi/Lz8jNS1+K21XVrhLTR5CSIozyuJAjFSB+ygJXrUn2zLy6sDYc3A8Ag7vo+0t&#xA;LaztYbS1jEVtbosUMS9FRBxVR8gM1xN7t6rgV2KuxV2KuxV2KuxV2KuxV2KuxV5f+amvXNxqNv5e&#xA;sKmRaNPxPxM8g+CMf7E1964DijIgno5umuIJ72IyXl7bxaUFlkjB+GWEMyqfTelGX8M18MYkc0fx&#xA;uHYSlQiWeeSfMjWE13Y6nPEmnFmmsbhpYyFqatGQGLAGtV28fbNjp9NljjiJRNgOk1OswSkZRkGa&#xA;adrmlalJLHZTiZoQDJxBoA1abkU7ZZPFKPMNGPPCZIibpHZW2uxV2KuxV2KuxVBavomkazaGz1Wz&#xA;ivbZt/TmQMAaUqtd1PuN8lGRibCCLfJv5oaBpugeetU0nTEaKxtzCYY2YuV9SCOQjk1Sfic9c2+C&#xA;ZlAEuLMUU/8AIH5SeZ9R8yaa+q2EsGhjhdTXJK+m8JX1EVCDv6mymm4rvleXURETR3ZRxm3rPmT8&#xA;kPLeocptKkbSrg1PBf3kBP8AqMeS/wCxag8Mx8eukOe7ZLEDyeWeY/yz83aDzkntDc2i7/W7WsqU&#xA;8WAHNf8AZDNhj1UJ8ju1SgQlnle41S11iG602WSG6iPwPH1JbYJShB5eB65PKAY0WAJHJ9R6VHfR&#xA;aZax38gmvVjUXEgAAL0+LptmhmRZrk5gut3zn+bPkjzJf+fdWvbG3+tWkrRskgkjBFIkDLxZg3wt&#xA;UZZj7V0+McEpVIeR/UzOhzT9QFj4Ma0byB5z/SloI7QQO8iqHkliAAJCkkcuVN99snPtbTSFCV/A&#xA;/qTj0OeB4qqvc+pfKmkz6R5estOnZWmgQiQp9mrMXIHy5ZjlckrlabYGDsVdirsVdirsVWyqzROq&#xA;GjMpCnwJG2RkCQaTE0d2AXOm6rYhUnto/jLcXbg5NOprWvfOXnp8uPaUR9j0UM2PJuCftQtvpd9c&#xA;SiKGLlIakLyUdPmRlMNNkkaA3bZ54RFk7M90S1ubXS4ILk1lQGorWgJJAr7DOn0eOUMQjLm8/qsk&#xA;Z5CY8kdmS47sVeP/AJj+WdZg8wz6xCv+hzmNlueaoI3ChOLMSvHddjkwXNwzHDTFry41SS1b63Is&#xA;lyPitJ5WDty3P94vMlTWu9cxNTGe3hjnzc/TeFR4zyG3crosy2arO3KYIBI1Qat33CoP+FGdNjEh&#xA;EcX1PnOcwMyYbR6Mp/LV7lPNUzHUYUtXhEZ095FWR3NSHjSgZ+NKGrbV6ZrNdjyeIJfw/H7uTvuz&#xA;MmPwTGvX30Pv5/B6zmI5jsVdirsVdirsVdir5T/PKKVfzP1dmRlEotmjJBAZfqsS1XxHJSPnm20v&#xA;92HFyfU+mPK0ckXljSI5FKSJZWyujAhlYRKCCD0IzWZPqPvcmPJNMgl2KpLJ5O8vvrUGsi1WO8gJ&#xA;asYVFdz0dwB8TL2OW+NLh4b2Y8Au02uZ1t7eWd/sxIzn/YiuY+SYjEyPRshHikB3vLL6WaRpLlnP&#xA;MkySdKGpq1a5yMZcct9zJ6nh4RQ6N0FQabqaqfAjuMqBI5MiHpek3wvtPhuP2mWkg8HGzfjnX6XN&#xA;4mMSeY1GLw5mKLy9pdirsVdirBfPX5jf4Y1COCSMel6frHYu8iA1cqqio4hTU9B1NMwc+plGfCA7&#xA;fR6HHkxGcjvuyzRNYtdY02LULUMsMtaLIOLihI+IdjmViyCYsOuz4JYpcMuaOyxpY/5qY+paL2Il&#xA;P3FP65q+0DvH4/odjoBtL4fpQWhMRq0A8Q4P/Ak5RpD+9Hx+5v1Q/dllubt07sVdirDPzeWc+Q79&#xA;oa842hc8eoUSqCfxzI0oByAFjKRiLD52N/eHrK30bfqzbjTwHRqOoyHqsL3Tq0pZ2VaBnqSBXpU5&#xA;O4g00mN70g5lKMssZKsDWo2II6EYSFfVX5e3uo33krSLvUWZ7yW3BeR/tMASEc+JZADXvmhzgCZA&#xA;cuB2ZDlTJ2KuxV2KuxV2KvJ/zd8tDVfNvl28WYpFp/GXUiF5elbfWokWQ7j9pz/sVY9sy9POokNW&#xA;QWQ9YzEbXYq7FXYqlPmmRk0O447cuCn5FhXMHtKVYT8PvczQC8oefSIHjZD0YEH6ds5eMqIL0JFq&#xA;kkMkLmOT7a9T0rt1HzwzjRIRGVi078oamtldNaSMRDdNUEknjIdh16A9M2fZus4ZcEvpP3/tdfr9&#xA;NxR4hzH3M4zonRuxV2KuxV55+adna3clvBdUihkgkR5RyLurGjIoAp8PXdh1yyGghnPFK7j3MJ9r&#xA;5dKDCNVPvs/L9rE9T1fXYvKGs6f5XujbaybZn0ueZo0X1lYFlUPVFZ0qF5E/FTMyelGLHUA6/D2h&#xA;LPlJySJJ+H3cnkX5cf8AOS/5iJc2uh6vZx6tHamRtRv5S6XQhj5PISyfu6oikCq703PfMKWo4Bu7&#xA;THpjkNRfT+tR8JrY8y4KyU+9M1faeTilD3S/3rn9nw4RL4fpUNPXlfQjlxJLUP8AsDmNopcOWJ9/&#xA;3FyNXG8RH45p99Wb/frf5/TnQeP5Ok8Lzd9Wb/frf5/Tj4/kvhebvqzf79b/AD+nHx/JfC83mX5h&#xA;Xesab5ghltpOaSGFGtpFLxywyEJIrUdOK/CeR3+RzT6nPKOfi7t/x73pdDp45NLwd5IO345Wlvn7&#xA;TPJPlvy2/mC70l5aqrR2dozLI7sORVFLqlFUFj4KD1zpY62sYnLrX2vLT08vEMI71f2Pn60/OPSr&#xA;lvqs1pJY28sxYBSJEQNQAM5IcqtPDBDVYzPiI35JMZcNdGeaX9R/Sdn9fQyWInjN1GDQtEHHMV/1&#xA;c2MwSDXNoD63gWFYI1hAWEKBGqigCgbADwpnOm73cwL8CXYq7FUu8x6zFofl7VNblieeLS7Se9kg&#xA;jpzdbeJpSiV25MFoMVfKnkD8/vzg8x/mGL4zrF5PuL2L1rOa3Vo4bJrpI2SGWOPm8qRybsT7mm2V&#xA;TzRjsXIw6WeQEgbB9eZa47G9DsrfWbfVtSvEEtvrbNbxI3Q2EIaGID/JkrJKP9fLZHhoDp97Eboz&#xA;ypeXM2lfVbx/U1DTZGsb1z1aSGnGQ/8AGWIpJ/ssjkG+3IpinGQSwX81/wA3dC/LjSorq+tp9QvL&#xA;kObaxtQOXCOnOWV2PGONSyrXc1OwO9ASAyESeXRZ+UX5x+XPzM0ee70yN7O/smVNQ02Yhnj5glHV&#xA;l2dGoaNQbg1AwsWWeYoDPot0oG6rzH+wIb9QzE18OLDIfjZydHPhyxed5yb0rJLzSzqGh2moW68r&#xA;iKIJKo6usfw1+Ypm3y6bxcEckfqA386dXjz+HllCXIn72H3d9FHE0hkEcK7NN1JP8qDuffMLDp5S&#xA;lVXLu/SXYTmAPJnfkfzbYa3p6wrKfr9uOMsMpHqFRsHG5LClKnxzqsUJRiBI2e95zUQAkSBQZNk2&#xA;h2KuxVjvnTRpNUsEijdEeLlIgZaszAbKG5KFr3qDmRpsvBK3F1eDxIV16PKCJI3I3SRDQ9QwI/EH&#xA;N1sQ83uD5sRsPLdpDotzDp9up05LqsskLxC4EUYSpRLkkMOPJf3ZB/lAJzmNX2Vk8YcG8T9j32h7&#xA;axDBw5fTk+/59/2dHsOn6xDq1rFdQzrPEI1SIhTGQo/mQs5DV675rddinDJUgQBsP1t+lywlHYgm&#xA;7PkigzowdDR0IZD7jfMOyNxzDkkA7Hkye3uoZ4EmVgA4BoTuPb6M6DFLjiJDkXR5BwSMT0VPUj/m&#xA;H35ZwnuY8Qd6kf8AMPvx4T3LxB5/+YiV1W2lBqrQBRTxV2J/4lmm7RgeMe56bsSY8KQ7pfoSTzxq&#xA;Nrq3lmG1u2aG8t2WVGRZJC5SJo2okVHbkrkMo6g7GtM3Ou0046eINcQq/lv8nSdnZoS1UyL4TdH3&#xA;nbz3Gz57/NDyFdXdyreW/LrKJAs9zPF6MYWgYFRCP3gLcuTcj4CgNcwtFGco2dw5fakICVRjR+D0&#xA;zyZ5C1LU9M0+fUZlsIZreKRiwLybxhvsjpX3ObHN7QYcZ4R6pDn0H4+DrcfZeSQ4js+jNB1bTXtL&#xA;axjuOc8MSRfGCrOUUAkVArWlcwcevx5pHhO56MsmjyYxuNk4zJcd2KuxVhHnX8yvIOmT3XlzXHa6&#xA;aeBo7+zjiaVfSmSjJJSg+NG6eGX49POQsMJTAeLTaR5bitbdvL6zDy3HcC4nukS1eWOJHV3E8Uje&#xA;qqD0k48KsQoFKUzUZdBlGXhO98jv+h6TDr8Xg8QFVuQK/T7hyt7xqXmSw1byzE+gXouG1mRbCyuY&#xA;yQytLX1ZKEAq0MSvJQj9nNrHGYy9XR5wysbMktbaC1tobW3QRwQIsUUY6KiDioHyAysm2SSz/wC4&#xA;3zbBP0tdbj+rS+Au7ZWkiP8Az0h9RSf8hRkxvH3MeRT7K2T5o/NG6vrz83dbj1TT7r9GW9nZWelz&#xA;/V5p7eWMBpblGjiBJ5SXH2tvsCppscLWwlwgjk7bsmUeKQPM10J9/L8bIT8n47Pyt+dl1b2+kzaP&#xA;os2nyR3N7KhjtGkmFvPCoegQceDAVYmrN2yzSCZhxS3au0YQGThhGvwPufQPnfzHDo+hzsk0K31x&#xA;Gy2ccxajkihNEVyQK/L3GZcYxJqXJwYxkfp5vHZvM0hesNtGiUHwuWc1pvuCnf2zXfyVD+dL7P1O&#xA;5GplW4D2rydCqeW7CQAqbiJJ3U9A0ihjx9vDMrDhGMcIJPvdVqMhnMkvJPzL9e28yT2ZmWWBW9a2&#xA;gVEUx+sqlkLKqlvs1Fa0HfrmRiw4wPSOHvLdiyTIuRvuZn+WfkN9MRda1NSNRlX/AEeE1BiRhQlh&#xA;/MQenYe52ZyvYcmnLkvZ6DkGh2Koe8F8VUWhUNX4mb+GxwFlGuqXy2eszU9SSNgOg6fqGShOUeSy&#xA;EC8G8xXerS+YtX0qEVcXkytMK0RORrv8832E3AE9zptRixxmZlH2dpHa2sdum6oKVPcnqfpyZLqp&#xA;zM5X3qXlNLqO4uYLZwqRTN9SkDKyyGtGiHEtQqw4kMBvmql2hp80vCO994ejzdk6vFEagUDEC6N/&#xA;d9r0OwuvrVpFPShcbj3BofxGcvq8HhZZQ7noNHqPGxRn3pnpCXEsz2sTKDT1EDbbVowH075l9m6o&#xA;xvH8R+n8ebRr9PE1P4FNf0VqfjH95/pm18eXk67woebv0VqfjH95/pj48vJfCh5pXr/lTUb+3RlE&#xA;bTQEtGA1Cajddx7DADGeSMpj6TbbHLLHjnGB+sV+Pu+LzprNn1O5+tJT6ufQEbDow3ao+ebeERkm&#xA;ZHccg4E5nHjjEbSO5+5QRUt9Z4AcUlioo9wa/wAMjECGahyIZykcmns7mMk80/Tlv5zDJeTQKigp&#xA;FCVSoG3Wlc1Wv0GCM+ICNy6fppztDrcphRuo9f0J7peg6Vp13FeRwma6hPJJpnd2B/4ID8MxogDY&#xA;N88kpc2d2N7Hdw+oo4sNnXwOWAuJKNIjCxdir5c/MWW1ufPeuXMB5rJcemX8TEixNT25Ic3umjWM&#xA;OJPmhPy6023vbt47pFeCFHqHXkvIsAAa7dzmNr9Tlw4+LHDjldVv89m7TYYZJVOXAK5vStPsLLTS&#xA;raey2ZUllMFI6EgqSONN6EjNJLtXVnnpz/pZOcNBpx/lv9kGY2/mnVpY4yrIxYD9kde+TjKVDiFH&#xA;u7lOOPQ2Fe8lvNRt0juSGWOWOdGUBSskLiRGU9dmX6RsdsmJEMDCKH1PzFrKs1payA3PAu2yVCgV&#xA;+HbdqdszNLgEvVL6XE1GQD0x5vGNK/ML9IeZ41FrK81y4him9ahAY/E5+Ek1+eT7QjMRM4mIEYnY&#xA;xvl8WzRyjtAg3KXMGmXzQIdYeFEaWa6jDyA1cuwbiNt61rmD2DrJ5uM5K+wOT2vpxjjDg6fpTgaV&#xA;Za60VtqaO9xp0It4VWRlURIaDZTQkdCe+ZuqxeH6o/SXF0uouwfqVR+Xnl3vaE/ORv65h+LLvczi&#xA;DJrCS8sLKGytKR20ChIk2NFHapqcgSWBAKBu9Jgu9Zh1i4hWTUIAqxymlBxJKkr9kkE9SP1DDxGq&#xA;SCAKZBp2oX0tykU3EowO4ABqBXtiC1yiKTfC1uxVDXsLSFKQ+rSv+7Gjp93XFIKF+qSf8sn/AE8P&#xA;gTbxXWbOfRfMesjUkNubq6kuoGYllaCRiyEN3puM3OLUQEYi+jqdZosuWXFEWApfXrT/AH4PuP8A&#xA;TLPzOPvcL+S9R/N+5OfL9hDqCG5jnZDDIAOI3qAGqCemcxqfC0+bjgDImzvys/D9L2GKepz6fwsv&#xA;DCOw9I3oefER9jKYIY4IlijHFEFFGavLllkkZS5lzcOKOOIjHkFWK4e1uIrpN2hbkQO6nZh92ViZ&#xA;gRIfw/gs5QEwYnqzmORJI1kQ1RwGU+IIqM6KMgRYdCQQaK7Ch2KvEPNHmbRrPzXqlje3AtbuO4Ys&#xA;kgZRxejIwalN0IPXN3oyPDDg6qJM/kx6513y4t99cN9HKwIWJx8YiLDcK4U8efHfftmg7Q0eo8Y5&#xA;MfLnsf1vTdma3TeAMeXny3G3zDL9C03Uf0hDctGyRL8TSNtUEdq9a5q8OPLLLxSvzJdnq8+COEwh&#xA;XkAy7Nq88nXl1W/ft+yeI+kVwxasqc5JqWyc/Tbh9uh4/Ptir5dufKl80juLhJXYlmL1Ukk1JP2t&#xA;8sx+0OL+KJH2/qdpk9ncn8Mon7P1pz5A0CfTdPlkvomWed9lUhqKpPht92S1GvlOjgy4ojrxmi68&#xA;aLgJjmx5Cf6O7KWjj4njHJyptt3zFOs1Vf32n/0zZHTaexePN8lbyVHqsVu6amxaXmfTLOH+Gg2H&#xA;GOADf/J+nKME5SsyN31u/uJc7VRxihDavKv97FmyEFRTpTMl15YprmnXy6hJcJGzxuQyugJpt3p0&#xA;pm60meHAIk0Q6vUYpcRNPModAm/xXdXYgltAjepBcoYwA/LdfTaIGrCtSS3+xOc5rNTmmZQF8MpV&#xA;VHl0es0ejwRjGcquMbuxz6/jf4M6S7uowQkzpy+1xYivzpnU4tLixioxA+Dx+XUTmbkSU48tWdy1&#xA;2btwwiCkBm/aJ8K9cxtdljw8I5t2kxni4ujJmJCkgVI6DxzUOyUHaZ1o0Dgf5LhT96kYpU/Sb/fU&#xA;v/I5v+asVRmkRsNRhJjkX7W7Slh9k9uRxDGXJkuSanYqwT8z/Pln5etUt7eQyazICYrdWoqKf25a&#xA;dtth3/HMnT6Y5Df8LE5eF4voXmjzJD5ibVIJ5J7yY1u+bkCRO4c1FAO3hmw1QxQx1LYdPf5MdPCe&#xA;SdRFlNvMurrr2pyXRZmiFI1UsTtHsVJ2qOVc1ULAdsICqSq6BMVN93QGhI2LgHp7ZKPNZ8noP5Xx&#xA;QPDfwFQBGYmRRtswYHYfLNbr42QS2Rlw8mc/ULb+U/ec1/hhPiF31C1/l/E4+GF8SSXLdX9rI9pE&#xA;JHWI/BxZh8B3XMrQ5NjD+b9zXqYA1Pv+9f8ApDVf99Tf8E39Mz3GoO/SGq/76m/4Jv6YrQfNXnq/&#xA;kv8Azhq9zISWNy8dSamkR9Mb/JM3mAVAe51eU3IpVa6heWiyLBKUSYUlTYq1K0qpqCRXY9u2WEAs&#xA;LfRnkzVrrUPKul3QgaUtbojyAn4nj/duen8ynNHnjwzIdpikDEJz6133tH+/+zKmeyZ23mC+t4hE&#xA;mnUUdKFvx2OStgYA9Uz0nW5ryZop7Y25C8lYmoNOo3AwgsJQrkgr7znZwymO3hNwFNC/Lgv0bNXN&#xA;Vm7WhE1EcX2Odi7NlIXI0wHzTNp9xdrcWtp9VllLNOA/NWJpuBxXj3y/s/SQ1vFKjCq8/wBCNd2z&#xA;m0HBDbICDz2O3Le2MaxFc3dnHaxzvDVzwZDxIJRj16jffM6Ps9EG+L7P2uGfa0yBvHR7xL9jItAl&#xA;nuLsW8zc+SHiB4jf9WR1vZWDDhEuG5CrO+7Rou18ufUyF8MJWQNtmTJp8yfZRh3+yc1uPURgKjGg&#xA;7ieMyNmSLT62ooY3r4gEZZ+c/olgdOO8Nl7oCpRwB88P5zyKPy47w+f7zXNTmvLiZLydVlkdwBI4&#xA;HxMT0rnZwFRAdBIAlvTdXvU1WznubmSaGOaNpYpXZ0ZQwJBDE9sjljcSPJljoSBfQHK6/wB9yfjn&#xA;HfnPIu9/LjvDuV1/JJ+OP5zyK/lx3h3K6/kk/HH855Ffy47w7ldfySfjj+c8iv5cd4VrO7uLe4WY&#xA;wSSca0WpHUU8Dg/O/wBFB0wI5hObHWXubgQvbNFyBo1SRsK77DLcOq45VVNGXTcMbBtM8zHFfP8A&#xA;rv5eX0fmO7Or6k14zP6jTgESShwCCa1C+FBX2zPPaAjGoxRDTcW5KWX+hW+lyg26kxyCgdjVqjqD&#xA;mPLUSyc3OwYow5c0GkMaM7IKGQ8n60JpStPoyJJLeIgLLncRoOrSLT/YnmfwXDFjNnf5XSU1C9j/&#xA;AJoVan+q1P8AjbMHWjYMi9HzXK7FUv1H9xPDeDoD6cv+q3Q/QcrM/DnGfTkfc2RjxxMPiEXm7das&#xA;nmSGGSZ9kiUux9lFThAtD5DuZ3uLiWd/tyuzt82NTm+Ap1pU8KH0N+RV2bjyP6JRW+qXc0Sljx2Y&#xA;LLt8Q7yZqtYKn8HNwH0vROP/ABXF/wAH/wA35iNzuP8AxXF/wf8AzfiqH1BpI7C4aNUVvTIqjVND&#xA;sf2j2zF1pIwyrub9KAckb72IZyj0SUawa3CjwQfiTnb+zMawSPfL9AeF9p5XniO6H6Slc395B/rn&#xA;/iDZ0bz0eR/HVNfL8/o61Zv0rIEP+z+D/jbMTXQ4sMh5fdu5PZ8+HPE+f37PS8457h2Kpf5hu/qm&#xA;g6jdVoYbaV1/1ghp+OXaeHFkiO8hryGok+T5rzuHROxV9MaNdG70exuiam4t4pSf9dA38c4bNHhn&#xA;IdxLvoG4gozKmbsVdirsVRGn/wC9cf0/8ROXaf6w1ZvpKcZs3AY/5m8vw6oFljJivIxxDlTxZfBv&#xA;64CGyE6YfeeR9VuYXhkRKHo3LoexGAWG8ZQGC3PlzV7ed4WgLFGK8lIINDT/ADrlI7Qw9ZUQ5wwy&#xA;O4CUGOT60/qKUEJKKp7tWjN/AfTmaJAxBHVpo3v0Zh+W91Fb61cGVwiNbMN/ESJT+OYOvmIwBPez&#xA;jAy2D0b9K6d/v9fx/pmp/MQ72fgT7nfpXTv9/r+P9MfzEO9fAn3JZrOqQzxCCA8hWrv0G3YVzE1O&#xA;oEhwhydPhMTZVbSPXZLaN4gDGR8BPCtBt3ze6KUpYok9zrNSIjIQvks9ekjaOSNHjcFXRvTIIIoQ&#xA;QeoOZe7RcXnXmLyno1tqckcmmW0LFVbhHGiqKjsFFM1ur1maOShKXzeg7N0eCeIEwiTv0S2PQNDF&#xA;GFhBX3jU/rGYh12c/wAcvm7Adn6cfwR+Qei+WYtSbR4RYRRpAlU4oEUVXbpt2za6bIZwBO5eb1+K&#xA;OPMRVDmmn1fzD/Kv3pl+7h3Fctt5gPXgPnx/hjutxRmnW1+ryfXuDxMhT0x35bHp7YmNgg8igyrc&#xA;c0pu/LN2kp+rESRE/CCaMPnXNBm7KmD6Nw7bF2jAj1bFjnmTSLqyWKedeJkPAfED0Fe2Zmm1Wp0k&#xA;OGo8N+/9LUey9LrshlIysDpt+hL7DSpr6G6ljXl9TT1TuBTY9j12rmXDtrUyB4RHbn+Las3s1o8c&#xA;ogyn6jXMf8S1o5/3KWoIDcpFUA9Kk0HX3zEl2rqMhri5+5zz7P6PFAyENxvZJPJ6L6er/wAn4p/X&#xA;I+Bm7vucLxcXf97vT1f+T8U/rj4Gbu+5fFxd/wB6W+ZNJ1bUtCvbIn0VmjIMnwNQKQx2qOtKZdpx&#xA;lxTEzG+HzDGfh5Bwg1fveLDydqckqxwPHIzkKoqQan6M3WPt/DLYiQPw/Wwy9gZoixKJHx/U618m&#xA;atc3EVujwiSZ1jTkzU5MaDopyQ7ewEgASN+Q/Wwl2DnjEyJjQF8z+p7ZoOl65p2jWdhKFZ7aJYiy&#xA;FeJ47ClaHNJqYZJ5JSA2J8mzFPHGIBO496P9PV/5PxT+uUeBm7vubPFxd/3u9PV/5PxT+uPgZu77&#xA;l8XF3/e709X/AJPxT+uPgZu77l8XF3/e709X/k/FP64+Bm7vuXxcXf8AejNNS/S7SS4FI1BqBQk1&#xA;BHbL9PgyCVy5NOfJAxqPNO1nVv2W+45sXBpUxQ7FUk1XyraX85uEkMErfbIAZSfGm2+a7U9mwyy4&#xA;geEudp9fLGKIsPDNegFvrmo24PIQ3U0fKlK8ZCK0+jNlihwwEe4AN/Fxb96cfl5pyah5h+rPIYuU&#xA;LlWA5bgg07ZRrNP40OG63Xx/C9VW9O/wNF/y2N/wA/5qzV/yMP532L/Kh/m/a7/A0X/LY3/AD/mr&#xA;H+Rh/O+xf5UP837VSDyRaLIGmuHlQdUAC1+mpycOx4A7kljLtORGwpkCW8CIEWNVVRRQAKADNsIg&#xA;Cg60yJNlv0Yv5B92FFvNfzMtlj1m3kUUWS3A+lXb+BGabtEesHyep7DleIjul+hj8+kypo1tqaCs&#xA;MrvFJ/kupqP+CH6sxJYjwCXR2UdQDlOM8xuyr8s9QgElzpsxXlIRLbhu5Ao4Fe9ADmw7NkTxD4uk&#xA;7egAYyvc7fpegehD/IPuzaOgt3oQ/wAg+7Fba+rw/wAgxW3fV4f5BitsL/M+NFsLLioH71un+rmt&#xA;7S+ke93vYX1y9yh+WFrFLDqbSoHV/SShHaj1H45Ds2O0vg2duzIMK8/0MNuYZNN1WSL9u0nIHv6b&#xA;bfqzXyHBOu4u7hIZcYP84fe9sjS3kjWRFUo4DKR3BFRnSB4M2DS70If5B92FbUL+CP6jc0QV9J6b&#xA;f5JyE/pLPEfWPeHk3k6BZ/MtjGwDLzZiD0+BGbv8s0OkF5A9j2lLhwSP45qWlQeh5os7dt/SvY4z&#xA;X/JlAwYhWUD+l+lnqJcWnke+B+57N6cf8o+4Z0Tw7vTj/lH3DFW+Cfyj7sVb4r4DFXYq7FXYq7FW&#xA;iyjqQPnirRliH7a/eMVp89fmXdQ6d511O3ht1aOQrMr8mrzmjEjk1JH22O2ZuLRnJESEiPgG+Ou4&#xA;BwmIPxK38u/P2k6BetNq1g070IivYCfVUNsVaNnWNl96VHvmTm0QP07OJ+ZkRUnuuh+Z9F1uwW+0&#xA;249a3YlT8LBlcdVZSKgiuazJjMDRZxN8kf8AWoP5vwOQZU19bg8T92K0765D7/ditILU/Mmk6bGH&#xA;u5eBb7CAVZqeAGWY8Up8g05s8MYuReZea/Mba5fLIsfp20AKwKft0NKlvc0zJzdkwyQqX1d/c4ul&#xA;9ocuDJcR+7/m9/x6fBXg1uOLyVPprcTLLccY1pUhBxdm+/bBh7MhAiH1R57966rtzLlvIPRM7Dh7&#xA;kr0aLUn1GF9ORnuYmDoR0FD1Y9KfPM3wcWKBAAjEutOp1GoyAkmco8r/AB/a9lW9j4jkCGpuB45p&#xA;nogC39ch9/uxWnfXIff7sVp31yH3+7FaYF+beoMlhp/pDYySci3Y8RSmU5dOMtA9HY9n5ziMiOZS&#xA;X8vPO+l6OJbTUTKqXLK/1mgZUYClCB8XHLY4Yw+kUjVGeWiTdIH8xrpTr0k1qUe0voklinQ8gw48&#xA;GoRt1XKPycTk4y5Wn1sxh8P4IHTfP/mfToY7azuFS1iAWO2KK6gexYM+5/ysy6cSWGJ5vU/J3mTV&#xA;dQ0qS41u2Fo8bfBLxMaulK8uLbinj0yJcTJAA7IfzT+YWkadYyJZSx3t66HhGrgotdqsQfwH4ZAn&#xA;eqO7ZiwE78qYD+X2rsPNtisiLxcyLyFdqxtvmNi0MccuIF2ut10smIxIdfazFB5tudQTg0NtqDSe&#xA;lzo7rHNyJWopvTKZaUDKD6ud8tm2OrkdPwbfTX2U9mt760uIY54ZVeKVQ8bjoVYVBzYvOkFVEsR/&#xA;bH3jFFNhlPQg4q3irsVdirsVdiqmbaA/sfrGKbWm0h8D9+K2x7XPy18oa3eG91C0Z7tgqtMksiEh&#xA;RQAhSF/DL8eonAUDswlAHmlv/Kl/IX/LJL/yPk/rk/zuTvR4cU/0Hyho2g2TWemI0MDyGVlZi5Ls&#xA;ApNWJ7KMoyZJTNlnEAckx+or/Mcgm3fUV/nP3YrbvqI/n/DFbSnV/Jun6rPHNcyyBo14AJQAitd6&#xA;g5fi1EsYoOLqNJDKQZWhU/LrQF6h3/1mb+BGTOsyNQ7Ow9x+aAm/LOGTVGdJxDptFKxLyaStKMKt&#xA;XbvWp+WWjXER75NEuzAZ2DUPtZNY6DZ2MAgtVEUY6gDcnxJrUnMKczI2S7LFjjAVEUiPqJ/n/DIN&#xA;ttfUT/P+GK239RP8/wCGK276j/l/h/bhRaS+Z/JUGv20MMt08BhYujIoO5FNwThBpsx5eFikv5LN&#xA;/urVwfZoKbfMSHDxN35nyR+n/lFYpbiLUb6S4CSF41iURgcgAwNS5NeI8MeJidQegZJpvkzQdNob&#xA;O1jjkHSUrzf/AINiWyNtUspPNE6noNvqNjLZTyOsMwAcx0DUBBpU1603yUJcJvm1TBIqyPcx3/lU&#xA;vlr/AH5cf8FH/wA0Zb4/9GP4+LXwT/nz+Y/UitM/LbQNOvor23eczQklOTJSpBHZAe/jglmsVQTG&#xA;EgbM5H3n9iUzflDaSSvJ9f8AtMT8UNTua7kSCpyzx4/zQw4Mw5ZD9jKtB8uxaTpsdj67TrETxYjj&#xA;QE1oBU7fTmPOQJsCm6PEBubKYi0h8D9+RZWuFvCOi/xxW1TFDsVdirsVf//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:2436eb4b-8d06-7041-b45c-67219c899331"
    stRef:documentID="xmp.did:2436eb4b-8d06-7041-b45c-67219c899331"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2436eb4b-8d06-7041-b45c-67219c899331"
      stEvt:when="2022-03-07T14:34:31+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:d8df4f36-8749-df42-93fa-7eee571a45bc"
      stEvt:when="2022-03-07T14:34:34+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="661.831183"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -364.862 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 364.862 li
627.248 364.862 li
627.248 0 li
cp
clp
527.454 130.46 mo
546.572 131.073 li
549.965 131.183 552.804 128.52 552.913 125.126 cv
553.746 99.1745 li
553.855 95.781 551.192 92.9416 547.798 92.8327 cv
528.682 92.219 li
525.288 92.1101 522.448 94.7732 522.339 98.1667 cv
521.507 124.118 li
521.398 127.512 524.061 130.351 527.454 130.46 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.639216 .482353 .564706 rgb
f
569.834 83.8108 mo
569.834 83.8108 573.274 77.4416 573.783 73.0232 cv
574.293 68.6052 573.325 66.9909 572.587 66.8249 cv
571.848 66.6589 570.823 69.3542 570.823 69.3542 cv
570.823 69.3542 571.172 65.1892 569.546 64.8503 cv
567.92 64.511 567.15 68.133 567.15 68.133 cv
567.15 68.133 566.698 65.1062 565.332 65.5637 cv
563.967 66.0207 563.361 71.5617 563.361 71.5617 cv
563.361 71.5617 561.956 67.7419 560.895 68.0832 cv
559.834 68.4245 559.211 74.9407 559.868 76.8015 cv
560.527 78.6623 562.357 80.9709 562.357 80.9709 cv
569.834 83.8108 li
cp
.956863 .517647 .384314 rgb
f
570.823 69.3542 mo
570.823 69.3542 572.835 64.2038 573.996 68.0188 cv
574.877 70.9128 573.736 76.2473 572.366 76.1687 cv
570.997 76.0901 570.293 73.1887 570.293 73.1887 cv
570.293 73.1887 569.641 75.3132 567.988 74.7263 cv
566.483 74.1916 566.389 71.6443 566.389 71.6443 cv
566.389 71.6443 566.096 74.2097 564.4 73.5383 cv
561.905 72.551 563.916 65.8132 565.252 64.9656 cv
567.029 63.8391 566.922 67.1589 566.922 67.1589 cv
566.922 67.1589 568.569 63.6028 570.131 65.0661 cv
571.693 66.529 570.823 69.3542 570.823 69.3542 cv
cp
f
566.429 79.1194 mo
566.259 79.1194 566.124 78.9826 566.124 78.8142 cv
566.133 72.945 563.124 71.4909 563.093 71.4768 cv
562.942 71.4065 562.874 71.2263 562.943 71.0735 cv
563.012 70.9216 563.188 70.8518 563.344 70.9216 cv
563.484 70.9836 566.742 72.5212 566.734 78.8152 cv
566.734 78.9831 566.596 79.1194 566.429 79.1194 cv
cp
0 0 0 rgb
f
572.183 76.4099 mo
572.05 76.4055 li
571.591 76.3747 570.939 76.0964 570.45 74.9431 cv
570.101 74.1199 569.988 73.178 570.12 72.2185 cv
570.522 69.3117 li
570.546 69.1457 570.69 69.0281 570.866 69.052 cv
571.031 69.0749 571.15 69.2287 571.125 69.3957 cv
570.723 72.3025 li
570.605 73.1526 570.705 73.9831 571.012 74.7048 cv
571.214 75.1843 571.567 75.7624 572.091 75.7971 cv
572.9 75.8474 573.096 75.176 573.104 75.1482 cv
573.147 74.9861 573.313 74.8889 573.477 74.9314 cv
573.639 74.9743 573.738 75.1408 573.694 75.3034 cv
573.589 75.697 573.142 76.4099 572.183 76.4099 cv
cp
f
568.342 75.0608 mo
568.213 75.0608 568.079 75.05 567.939 75.0271 cv
565.954 74.7038 566.079 71.7546 566.084 71.6296 cv
566.62 67.1228 li
566.64 66.9563 566.783 66.8366 566.958 66.8562 cv
567.125 66.8762 567.245 67.0276 567.225 67.195 cv
566.692 71.6809 li
566.692 71.6853 566.587 74.1897 568.037 74.4255 cv
569.488 74.6574 569.981 73.1614 570.001 73.0974 cv
570.052 72.9372 570.223 72.8503 570.383 72.8982 cv
570.543 72.9485 570.633 73.1189 570.583 73.279 cv
570.38 73.9328 569.666 75.0608 568.342 75.0608 cv
cp
f
565.308 73.7868 mo
565.148 73.7868 565.014 73.6623 565.004 73.5007 cv
564.993 73.3327 565.121 73.1882 565.289 73.178 cv
565.781 73.1482 566.038 72.1125 566.085 71.6155 cv
566.102 71.4485 566.251 71.3293 566.418 71.3415 cv
566.585 71.3576 566.708 71.5061 566.693 71.674 cv
566.672 71.8825 566.464 73.7165 565.326 73.7864 cv
565.308 73.7868 li
cp
f
527.447 103.465 mo
527.447 103.465 519.808 98.7673 520.751 96.0476 cv
521.695 93.3279 527.46 90.0525 533.389 90.0525 cv
539.318 90.0525 545.867 93.0158 546.024 95.9787 cv
546.18 98.9421 527.447 103.465 527.447 103.465 cv
cp
.968627 .701961 .411765 rgb
f
512.712 209.887 mo
512.587 209.887 512.471 209.811 512.425 209.687 cv
511.813 208.007 509.904 203.513 508.462 202.895 cv
508.288 202.822 508.142 202.815 508.004 202.873 cv
507.866 202.933 507.791 203.026 507.754 203.174 cv
507.458 204.418 509.972 207.857 511.104 209.251 cv
511.217 209.391 li
511.323 209.522 511.302 209.712 511.172 209.819 cv
511.043 209.924 510.852 209.906 510.745 209.777 cv
510.633 209.639 li
509.626 208.424 507.106 205.718 505.804 205.879 cv
505.646 205.898 505.412 205.964 505.229 206.338 cv
505.05 206.702 505.041 207.019 505.204 207.306 cv
505.822 208.402 508.65 208.881 509.688 208.973 cv
509.855 208.988 509.979 209.136 509.964 209.304 cv
509.949 209.471 509.815 209.595 509.633 209.58 cv
509.219 209.543 505.558 209.175 504.672 207.605 cv
504.408 207.136 504.412 206.62 504.681 206.071 cv
504.971 205.477 505.416 205.31 505.736 205.274 cv
506.513 205.186 507.473 205.755 508.383 206.493 cv
507.596 205.208 506.967 203.853 507.162 203.032 cv
507.241 202.698 507.449 202.45 507.759 202.315 cv
508.054 202.187 508.371 202.194 508.7 202.335 cv
510.646 203.168 512.762 208.834 512.997 209.478 cv
513.055 209.636 512.975 209.811 512.817 209.868 cv
512.712 209.887 li
cp
.360784 .411765 .647059 rgb
f
554.654 207.356 mo
554.518 207.356 554.388 207.342 554.262 207.315 cv
553.738 207.2 553.354 206.855 553.122 206.288 cv
552.874 205.676 553.043 205.234 553.231 204.97 cv
553.676 204.34 554.743 203.993 555.902 203.806 cv
554.42 203.538 552.989 203.106 552.508 202.414 cv
552.311 202.132 552.263 201.813 552.37 201.49 cv
552.469 201.186 552.685 200.953 553.01 200.801 cv
554.933 199.906 560.564 202.094 561.2 202.347 cv
561.358 202.409 561.434 202.586 561.371 202.742 cv
561.309 202.899 561.133 202.975 560.976 202.913 cv
559.314 202.254 554.688 200.691 553.269 201.353 cv
553.097 201.434 552.995 201.537 552.948 201.68 cv
552.902 201.822 552.921 201.941 553.008 202.066 cv
553.738 203.115 557.975 203.528 559.769 203.611 cv
559.95 203.618 li
560.118 203.627 560.247 203.769 560.241 203.937 cv
560.234 204.104 560.098 204.217 559.925 204.228 cv
559.745 204.22 li
558.166 204.162 554.484 204.256 553.729 205.322 cv
553.635 205.453 553.53 205.672 553.688 206.058 cv
553.839 206.433 554.071 206.65 554.392 206.72 cv
555.609 206.977 557.861 205.196 558.62 204.483 cv
558.745 204.366 558.936 204.373 559.051 204.495 cv
559.166 204.618 559.16 204.811 559.038 204.926 cv
558.756 205.191 556.398 207.356 554.654 207.356 cv
cp
f
532.174 220.31 mo
532.191 220.595 531.974 220.837 531.689 220.861 cv
498.633 223.525 li
498.342 223.548 498.086 223.331 498.064 223.039 cv
497.811 220.03 li
497.807 219.732 497.991 219.503 498.257 219.46 cv
498.438 219.432 498.585 219.321 498.655 219.164 cv
498.693 219.085 498.71 218.989 498.697 218.885 cv
498.594 218.005 498.531 216.088 499.573 214.474 cv
500.989 212.298 508.442 209.895 511.733 208.413 cv
513.878 207.452 514.96 204.918 515.457 203.266 cv
515.73 202.356 516.538 201.71 517.484 201.665 cv
521.233 201.513 530.079 201.152 530.651 201.261 cv
531.371 201.395 532.177 208.006 531.919 210.601 cv
531.667 213.196 531.13 216.229 531.13 216.229 cv
531.99 216.069 li
532.174 220.31 li
cp
.639216 .482353 .564706 rgb
f
532.174 220.31 mo
532.191 220.595 531.974 220.837 531.689 220.861 cv
498.633 223.525 li
498.342 223.548 498.086 223.331 498.064 223.039 cv
497.811 220.03 li
497.807 219.732 497.991 219.503 498.257 219.46 cv
498.438 219.432 498.585 219.321 498.655 219.164 cv
507.95 218.544 531.13 216.229 531.13 216.229 cv
531.99 216.069 li
532.174 220.31 li
cp
f
582.318 197.439 mo
582.524 197.635 582.531 197.961 582.339 198.172 cv
560.017 222.697 li
559.82 222.913 559.485 222.929 559.269 222.733 cv
557.029 220.707 li
556.823 220.492 556.801 220.198 556.965 219.987 cv
557.078 219.842 557.11 219.659 557.053 219.498 cv
556.893 219.266 li
556.218 218.693 554.862 217.336 554.52 215.446 cv
554.069 212.889 557.869 206.043 559.262 202.713 cv
560.172 200.546 559.231 197.956 558.465 196.409 cv
558.043 195.558 558.192 194.534 558.852 193.857 cv
561.487 191.184 567.7 184.877 568.193 184.567 cv
568.81 184.171 573.914 188.45 575.498 190.522 cv
577.087 192.589 578.767 195.171 578.767 195.171 cv
579.285 194.467 li
582.318 197.439 li
cp
f
582.318 197.439 mo
582.524 197.635 582.531 197.961 582.339 198.172 cv
560.017 222.697 li
559.82 222.913 559.485 222.929 559.269 222.733 cv
557.029 220.707 li
556.823 220.492 556.801 220.198 556.965 219.987 cv
557.078 219.842 557.11 219.659 557.053 219.498 cv
563.42 212.696 578.767 195.171 578.767 195.171 cv
579.285 194.467 li
582.318 197.439 li
cp
f
515.731 130.406 mo
515.731 130.406 506.984 151.397 504.608 165.765 cv
502.232 180.133 510.439 203.468 510.439 203.468 cv
535.709 203.162 li
535.709 203.162 530.958 180.031 530.094 173 cv
529.446 165.256 533.982 131.73 533.982 131.73 cv
515.731 130.406 li
cp
.968627 .701961 .411765 rgb
f
545.105 129.998 mo
545.105 129.998 549.857 148.748 559.36 164.44 cv
568.864 180.133 573.399 184.616 573.399 184.616 cv
553.556 200.396 li
553.556 200.396 530.85 177.076 528.042 161.179 cv
525.235 145.283 525.45 131.017 525.45 131.017 cv
545.105 129.998 li
cp
f
496.617 81.8196 mo
496.617 81.8196 495.762 74.6321 496.913 70.3357 cv
498.065 66.0398 499.558 64.8948 500.306 65.0119 cv
501.054 65.1291 501.015 68.0119 501.015 68.0119 cv
501.015 68.0119 502.223 64.011 503.86 64.2937 cv
505.496 64.5769 504.88 68.2278 504.88 68.2278 cv
504.88 68.2278 506.414 65.5798 507.516 66.5071 cv
508.617 67.4348 507.143 72.8103 507.143 72.8103 cv
507.143 72.8103 509.854 69.7741 510.715 70.4817 cv
511.576 71.1897 509.759 77.4782 508.463 78.9665 cv
507.167 80.4553 504.616 81.9289 504.616 81.9289 cv
496.617 81.8196 li
cp
.956863 .517647 .384314 rgb
f
544.047 137.956 mo
540.247 137.956 538.495 134.09 538.476 134.045 cv
538.408 133.891 538.479 133.712 538.633 133.644 cv
538.787 133.577 538.967 133.646 539.033 133.8 cv
539.117 133.987 541.106 138.368 545.575 137.128 cv
545.743 137.082 545.906 137.178 545.951 137.34 cv
545.996 137.502 545.902 137.67 545.74 137.715 cv
545.137 137.883 544.572 137.956 544.047 137.956 cv
cp
.639216 .482353 .564706 rgb
f
555.116 159.37 mo
554.006 159.835 552.825 160.506 552.745 161.014 cv
552.738 161.063 552.714 161.214 552.997 161.425 cv
553.067 161.476 553.137 161.489 553.231 161.467 cv
553.767 161.345 554.548 160.301 555.116 159.37 cv
cp
553.15 162.087 mo
552.962 162.087 552.787 162.028 552.633 161.913 cv
552.155 161.557 552.104 161.176 552.144 160.919 cv
552.335 159.701 555.139 158.687 555.699 158.496 cv
555.814 158.457 555.946 158.491 556.03 158.586 cv
556.11 158.68 556.125 158.815 556.068 158.925 cv
555.916 159.218 554.546 161.791 553.366 162.061 cv
553.15 162.087 li
cp
f
549.959 196.467 mo
549.725 196.357 li
549.617 196.227 549.635 196.034 549.765 195.928 cv
569.392 179.699 li
569.521 179.593 569.713 179.61 569.821 179.74 cv
569.927 179.87 569.909 180.062 569.78 180.169 cv
550.155 196.397 li
549.959 196.467 li
cp
f
530.151 166.683 mo
530.035 166.683 529.925 166.618 529.875 166.507 cv
527.031 160.355 526.218 146.322 526.116 144.332 cv
519.204 142.234 li
519.042 142.185 518.951 142.015 519 141.854 cv
519.05 141.693 519.216 141.599 519.381 141.651 cv
526.499 143.811 li
526.621 143.849 526.708 143.96 526.714 144.089 cv
526.721 144.246 527.479 159.871 530.427 166.251 cv
530.499 166.404 530.431 166.585 530.28 166.655 cv
530.151 166.683 li
cp
f
509.633 198.977 mo
509.467 198.977 509.332 198.844 509.329 198.678 cv
509.325 198.51 509.459 198.37 509.627 198.367 cv
534.512 197.889 li
534.684 197.889 534.821 198.022 534.823 198.188 cv
534.825 198.356 534.692 198.495 534.525 198.498 cv
509.639 198.977 li
509.633 198.977 li
cp
f
498.655 219.468 mo
498.497 219.468 498.365 219.349 498.35 219.191 cv
498.335 219.023 498.458 218.875 498.626 218.86 cv
531.102 215.925 li
531.263 215.906 531.417 216.034 531.433 216.201 cv
531.448 216.369 531.324 216.517 531.156 216.532 cv
498.681 219.467 li
498.655 219.468 li
cp
.360784 .411765 .647059 rgb
f
557.054 219.803 mo
556.85 219.726 li
556.725 219.614 556.713 219.421 556.825 219.295 cv
578.538 194.968 li
578.651 194.842 578.842 194.831 578.969 194.944 cv
579.094 195.056 579.106 195.248 578.993 195.374 cv
557.281 219.701 li
557.054 219.803 li
cp
f
510.179 78.6272 mo
510.179 78.6272 506.913 89.1125 512.21 93.383 cv
517.506 97.654 525.414 95.7629 527.156 95.6272 cv
528.898 95.4914 533.831 95.0847 537.241 95.695 cv
540.651 96.3049 548.704 96.1194 553.856 89.6706 cv
559.007 83.2214 559.225 78.4426 559.225 78.4426 cv
574.243 78.6272 li
574.243 78.6272 575.477 95.6448 566.988 104.372 cv
561.011 110.517 549.284 112.778 549.284 112.778 cv
549.284 112.778 548.85 119.422 548.56 122.879 cv
548.269 126.336 545.505 131.556 545.505 131.556 cv
545.505 131.556 538.221 132.505 529.315 132.369 cv
520.408 132.234 515.364 131.304 515.364 131.304 cv
515.364 131.304 514.531 129.194 514.459 124.342 cv
514.387 119.489 515.185 112.981 515.185 112.981 cv
515.185 112.981 498.207 112.303 493.999 101.728 cv
489.791 91.1531 495.668 78.094 495.668 78.094 cv
510.179 78.6272 li
cp
.25098 .313726 .498039 rgb
f
526.497 108.607 mo
526.405 108.593 li
526.243 108.541 526.156 108.369 526.208 108.209 cv
527.587 103.945 li
527.639 103.785 527.811 103.698 527.971 103.749 cv
528.131 103.801 528.219 103.972 528.167 104.133 cv
526.787 108.396 li
526.745 108.525 526.626 108.607 526.497 108.607 cv
cp
1 .698039 .333333 rgb
f
536.202 108.471 mo
536.064 108.471 535.939 108.376 535.906 108.236 cv
534.847 103.7 li
534.809 103.536 534.91 103.372 535.074 103.334 cv
535.241 103.296 535.404 103.398 535.442 103.561 cv
536.5 108.097 li
536.537 108.261 536.436 108.425 536.272 108.463 cv
536.202 108.471 li
cp
f
509.28 92.5422 mo
508.187 93.156 506.808 94.0691 506.591 94.779 cv
506.537 94.949 506.579 95.0495 506.616 95.1106 cv
506.734 95.1965 li
507.204 95.1965 508.304 93.949 509.28 92.5422 cv
cp
506.731 95.8064 mo
506.46 95.803 506.236 95.6662 506.091 95.4201 cv
505.947 95.176 505.917 94.8923 506.008 94.5998 cv
506.439 93.195 509.679 91.6296 510.046 91.4558 cv
510.166 91.3962 510.314 91.4275 510.405 91.5281 cv
510.493 91.6291 510.506 91.7771 510.435 91.8918 cv
510.03 92.5466 507.948 95.8064 506.731 95.8064 cv
cp
f
553.067 92.5783 mo
553.8 93.9148 554.844 95.3005 555.646 95.0803 cv
555.749 95.0329 li
555.796 94.7224 554.617 93.6584 553.067 92.5783 cv
cp
555.475 95.7136 mo
553.773 95.7136 552.196 92.2385 552.009 91.8176 cv
551.955 91.6946 551.989 91.551 552.091 91.4636 cv
552.193 91.3777 552.341 91.3659 552.451 91.4377 cv
553.671 92.2131 556.492 94.1257 556.346 95.1325 cv
556.324 95.281 556.226 95.5481 555.811 95.6662 cv
555.699 95.6985 555.585 95.7136 555.475 95.7136 cv
cp
f
501.015 68.0119 mo
501.015 68.0119 501.038 62.4826 498.556 65.6037 cv
496.673 67.9709 495.772 73.3513 497.074 73.7815 cv
498.376 74.2121 500.098 71.7732 500.098 71.7732 cv
500.098 71.7732 499.923 73.9885 501.676 74.051 cv
503.273 74.1076 504.296 71.7732 504.296 71.7732 cv
504.296 71.7732 503.625 74.2663 505.45 74.2658 cv
508.133 74.2654 508.74 67.26 507.81 65.9802 cv
506.573 64.2795 505.45 67.406 505.45 67.406 cv
505.45 67.406 505.228 63.4934 503.237 64.2795 cv
501.246 65.0657 501.015 68.0119 501.015 68.0119 cv
cp
.956863 .517647 .384314 rgb
f
501.622 78.7307 mo
501.512 78.7097 li
501.354 78.6477 501.279 78.4709 501.339 78.3142 cv
503.646 72.4582 507.241 72.2278 507.394 72.2209 cv
507.567 72.2053 507.702 72.3425 507.712 72.51 cv
507.721 72.6775 507.591 72.82 507.423 72.8293 cv
507.389 72.8313 504.056 73.0769 501.906 78.5378 cv
501.859 78.6574 501.743 78.7307 501.622 78.7307 cv
cp
0 0 0 rgb
f
497.708 74.1858 mo
497.564 74.1858 497.421 74.1633 497.281 74.1179 cv
496.277 73.7956 496.108 72.9114 496.158 72.489 cv
496.179 72.3225 496.325 72.2029 496.496 72.2224 cv
496.663 72.2424 496.783 72.3943 496.763 72.5613 cv
496.755 72.6335 496.71 73.2947 497.467 73.5378 cv
497.868 73.6643 498.339 73.4582 498.872 72.9192 cv
499.422 72.3611 499.821 71.6252 500.025 70.7907 cv
500.719 67.9397 li
500.759 67.7771 500.921 67.677 501.087 67.716 cv
501.25 67.7556 501.351 67.9206 501.312 68.0842 cv
500.616 70.9353 li
500.387 71.8767 499.934 72.7107 499.306 73.3469 cv
498.755 73.905 498.221 74.1858 497.708 74.1858 cv
cp
f
502.017 74.3933 mo
501.887 74.3933 501.751 74.3791 501.611 74.3484 cv
500.045 74.0056 499.738 72.4992 499.795 71.7502 cv
499.806 71.5832 499.925 71.4494 500.12 71.4695 cv
500.287 71.4817 500.413 71.6277 500.402 71.7951 cv
500.397 71.862 500.304 73.4387 501.741 73.7527 cv
503.177 74.071 504 71.6994 504.008 71.675 cv
505.155 67.3283 li
505.198 67.1662 505.364 67.0657 505.529 67.1115 cv
505.69 67.1545 505.787 67.321 505.745 67.4836 cv
504.592 71.8508 li
504.548 71.9797 503.71 74.3933 502.017 74.3933 cv
cp
f
504.625 74.1843 mo
504.495 74.1555 li
503.464 73.6721 503.946 71.8904 504.004 71.6887 cv
504.05 71.5281 504.216 71.4343 504.38 71.4807 cv
504.542 71.5271 504.635 71.696 504.589 71.8576 cv
504.451 72.3376 504.31 73.3957 504.754 73.6037 cv
504.906 73.675 504.972 73.8567 504.901 74.009 cv
504.848 74.1194 504.739 74.1843 504.625 74.1843 cv
cp
f
514.464 122.732 mo
514.464 122.732 515.421 114.566 518.164 107.407 cv
521.339 99.1218 523.68 94.7185 524.67 93.1545 cv
524.619 93.1535 li
521.816 93.115 519.269 94.8122 518.09 97.3567 cv
517.041 99.6218 515.892 102.664 515.078 106.291 cv
512.888 116.162 514.464 122.732 514.464 122.732 cv
cp
.639216 .482353 .564706 rgb
f
547.073 94.238 mo
547.073 94.238 545.941 102.921 546.756 108.727 cv
547.627 114.93 551.495 122.364 551.495 122.364 cv
551.495 127.897 li
551.495 127.897 540.563 120.093 540.563 103.795 cv
540.563 96.2492 541.536 92.6379 541.536 92.6379 cv
541.536 92.6379 545.889 93.0271 547.073 94.238 cv
cp
f
537.475 88.8415 mo
537.277 94.6985 li
537.277 94.6985 536.038 96.3679 532.197 96.6013 cv
529.335 96.7751 528.352 96.1863 528.352 96.1863 cv
528.851 93.2248 li
529.341 90.3366 li
536.306 89.0569 li
537.475 88.8415 li
cp
.956863 .517647 .384314 rgb
f
536.307 89.0725 mo
536.286 89.2512 536.214 89.4607 536.103 89.7009 cv
534.563 92.9426 530.438 93.5051 528.784 93.6164 cv
529.349 90.3874 li
536.307 89.0725 li
cp
0 0 0 rgb
f
528.219 75.467 mo
528.219 75.467 524.596 83.6101 525.851 88.2063 cv
527.106 92.8034 531.29 92.1091 533.797 91.239 cv
536.304 90.3689 537.476 88.843 537.476 88.843 cv
537.476 88.843 539.807 89.6506 541.384 87.4885 cv
542.961 85.3264 542.016 82.8254 540.686 82.2444 cv
539.356 81.6638 537.763 82.6164 537.763 82.6164 cv
539.022 80.2512 li
539.022 80.2512 533.871 68.155 528.219 75.467 cv
cp
.956863 .517647 .384314 rgb
f
538.11 86.4914 mo
537.901 86.4084 li
537.78 86.2927 537.773 86.0998 537.888 85.9778 cv
540.106 83.6267 li
540.221 83.5041 540.414 83.4978 540.537 83.614 cv
540.658 83.7297 540.664 83.9226 540.55 84.0447 cv
538.332 86.3957 li
538.11 86.4914 li
cp
0 0 0 rgb
f
540.458 85.8615 mo
538.877 85.6257 li
538.712 85.6003 538.597 85.445 538.621 85.279 cv
538.647 85.113 538.797 84.9992 538.969 85.0232 cv
540.504 85.2556 li
540.67 85.281 540.783 85.4363 540.759 85.6023 cv
540.736 85.7536 540.606 85.8615 540.458 85.8615 cv
cp
f
532.152 83.4284 mo
531.947 83.4045 531.829 83.2522 531.85 83.0852 cv
532.117 80.9797 li
532.14 80.8132 532.295 80.6999 532.458 80.716 cv
532.625 80.7375 532.743 80.8899 532.723 81.0569 cv
532.454 83.1623 li
532.434 83.3161 532.304 83.4284 532.152 83.4284 cv
cp
f
527.629 83.031 mo
527.417 83.0032 527.302 82.8484 527.326 82.6819 cv
527.63 80.615 li
527.655 80.4485 527.808 80.3288 527.976 80.3581 cv
528.143 80.3825 528.258 80.5373 528.234 80.7038 cv
527.93 82.7707 li
527.908 82.9221 527.779 83.031 527.629 83.031 cv
cp
f
533.644 79.9275 mo
533.533 79.9275 533.427 79.8674 533.374 79.7624 cv
533.018 79.073 532.058 79.2654 532.019 79.2737 cv
531.85 79.3074 531.693 79.2029 531.658 79.0393 cv
531.624 78.8747 531.727 78.7136 531.892 78.678 cv
531.949 78.6662 533.346 78.3772 533.914 79.4831 cv
533.991 79.633 533.933 79.8166 533.783 79.8938 cv
533.644 79.9275 li
cp
f
526.992 79.4748 mo
526.781 79.3899 li
526.66 79.2737 526.656 79.0818 526.772 78.9602 cv
526.81 78.9201 527.71 77.9978 528.894 78.4236 cv
529.052 78.4807 529.134 78.6555 529.076 78.8137 cv
529.021 78.9719 528.846 79.0544 528.688 78.9968 cv
527.879 78.7053 527.238 79.3537 527.212 79.3821 cv
526.992 79.4748 li
cp
f
529.067 85.1184 mo
528.938 85.1184 528.817 85.0344 528.776 84.9035 cv
528.214 83.0896 529.574 81.8904 529.633 81.8401 cv
529.76 81.7307 529.951 81.7449 530.061 81.8718 cv
530.171 81.9983 530.158 82.1907 530.031 82.301 cv
529.986 82.341 528.916 83.2971 529.359 84.7239 cv
529.408 84.8845 529.318 85.0549 529.156 85.1047 cv
529.067 85.1184 li
cp
f
537.63 82.49 mo
537.63 82.49 534.592 81.7121 533.692 79.2776 cv
532.79 76.8435 533.692 75.4231 533.692 75.4231 cv
533.692 75.4231 532.572 74.5779 530.771 75.0178 cv
528.969 75.4573 527.41 77.5139 527.41 77.5139 cv
527.41 77.5139 523.956 73.699 525.644 71.1633 cv
527.331 68.6272 530.388 71.1633 530.388 71.1633 cv
530.388 71.1633 530.17 68.5261 534.647 69.3371 cv
539.122 70.1487 539.122 75.4231 539.122 75.4231 cv
539.122 75.4231 540.869 73.9016 542.18 77.4519 cv
543.49 81.0022 541.575 82.7693 541.575 82.7693 cv
541.575 82.7693 539.851 82.05 537.63 82.49 cv
cp
f
522.862 93.4607 mo
520.908 94.7541 520.379 97.5032 521.897 99.2873 cv
521.976 99.3796 522.058 99.4675 522.145 99.551 cv
522.504 99.8962 522.95 100.24 523.506 100.567 cv
526.841 102.529 531.073 103.465 531.073 103.465 cv
531.073 103.465 536.437 102.488 540.93 100.285 cv
544.366 98.5998 545.701 94.9656 544.224 93.5271 cv
542.746 92.0891 541.226 91.6238 541.226 91.6238 cv
541.226 91.6238 535.471 94.2385 533.807 95.2644 cv
532.144 96.2907 531.073 96.7585 531.073 96.7585 cv
531.073 96.7585 528.729 94.2424 526.273 93.1526 cv
524.254 92.2571 524.105 92.6379 524.105 92.6379 cv
522.862 93.4607 li
cp
.968627 .701961 .411765 rgb
f
529.677 87.2658 mo
530.021 87.531 530.421 87.7434 530.655 87.6531 cv
530.918 87.5471 531.229 87.157 531.477 86.76 cv
529.677 87.2658 li
cp
530.535 88.2829 mo
529.768 88.2829 528.944 87.4421 528.841 87.3327 cv
528.767 87.2551 528.739 87.1448 528.767 87.0417 cv
528.796 86.9392 528.875 86.8581 528.979 86.8293 cv
532.01 85.9768 li
532.121 85.9455 532.246 85.9817 532.324 86.073 cv
532.402 86.1633 532.418 86.2907 532.368 86.3987 cv
532.297 86.5525 531.648 87.9118 530.88 88.2185 cv
530.769 88.2634 530.654 88.2829 530.535 88.2829 cv
cp
0 0 0 rgb
f
284.055 362.656 mo
137.497 362.656 18.6882 358.991 18.6882 354.471 cv
18.6882 349.95 137.497 346.285 284.055 346.285 cv
430.614 346.285 549.423 349.95 549.423 354.471 cv
549.423 358.991 430.614 362.656 284.055 362.656 cv
.951003 .931903 .931903 rgb
f
314.359 316.7 mo
141.555 316.7 1.46991 313.53 1.46991 309.619 cv
1.46991 305.708 141.555 302.537 314.359 302.537 cv
487.162 302.537 627.247 305.708 627.247 309.619 cv
627.247 313.53 487.162 316.7 314.359 316.7 cv
f
459.052 102.129 mo
458.92 102.129 458.783 102.095 458.659 102.024 cv
458.281 101.806 458.15 101.323 458.366 100.944 cv
465.405 88.6648 li
465.621 88.2859 466.104 88.1531 466.484 88.3718 cv
466.863 88.5891 466.995 89.0725 466.777 89.4519 cv
459.74 101.731 li
459.593 101.986 459.326 102.129 459.052 102.129 cv
cp
.25098 .313726 .498039 rgb
f
448.097 78.0969 mo
473.925 96.5891 li
475.165 97.4768 476.891 97.1819 477.766 95.9324 cv
478.437 94.9743 li
479.291 93.7527 479.013 92.0715 477.81 91.1907 cv
452.316 72.5364 li
451.179 71.7048 449.597 71.8703 448.656 72.9187 cv
447.653 74.0393 li
446.563 75.2546 446.77 77.1467 448.097 78.0969 cv
cp
.462745 .541176 .709804 rgb
f
380.037 230.033 mo
379.939 230.033 379.841 230.015 379.743 229.977 cv
379.337 229.816 379.139 229.355 379.301 228.948 cv
404.705 165.105 li
404.824 164.805 405.114 164.608 405.437 164.606 cv
405.762 164.606 406.05 164.799 406.172 165.094 cv
432.583 228.939 li
432.75 229.343 432.558 229.806 432.155 229.973 cv
431.75 230.139 431.287 229.948 431.12 229.544 cv
405.455 167.502 li
380.772 229.534 li
380.65 229.844 380.351 230.033 380.037 230.033 cv
cp
.25098 .313726 .498039 rgb
f
387.642 99.678 mo
381.822 112.592 li
380.893 114.652 381.808 117.074 383.865 118.006 cv
419.293 134.056 li
421.29 134.961 423.646 134.133 424.637 132.177 cv
431.852 117.05 li
406.091 101.848 li
387.642 99.678 li
cp
f
413.325 124.912 mo
397.251 121.751 li
397.067 153.65 li
397.056 155.515 398.58 157.024 400.446 156.995 cv
400.891 156.988 li
401.107 165.257 li
401.162 167.394 402.945 169.08 405.082 169.017 cv
406.191 168.984 li
408.258 168.923 409.91 167.244 409.939 165.176 cv
410.052 156.843 li
411.868 156.814 413.325 155.334 413.325 153.517 cv
413.325 124.912 li
cp
f
357.424 10.9431 mo
488.242 122.929 li
478.793 140.246 li
319.059 72.7346 li
319.059 72.7346 339.411 19.529 357.424 10.9431 cv
cp
.360784 .411765 .647059 rgb
f
357.424 10.9431 mo
357.387 10.9958 li
356.854 11.8611 li
332.404 51.2439 li
319.676 71.7375 li
319.059 72.7346 li
318.373 73.8425 316.933 74.2014 315.804 73.5578 cv
303.019 66.2131 li
301.821 65.5271 301.441 63.9812 302.185 62.82 cv
318.784 36.7761 li
341.51 1.11839 li
342.217 .00510424 343.69 -.332786 344.808 .35862 cv
356.632 7.6135 li
357.778 8.30979 358.131 9.80833 357.424 10.9431 cv
cp
.462745 .541176 .709804 rgb
f
400.271 42.6457 mo
400.239 42.6916 li
399.778 43.4411 li
378.597 77.5559 li
367.573 95.3083 li
367.038 96.1721 li
366.444 97.1316 365.197 97.4426 364.218 96.885 cv
353.144 90.5227 li
352.106 89.9284 351.777 88.5896 352.421 87.5837 cv
366.801 65.0237 li
386.486 34.1355 li
387.099 33.1711 388.373 32.8786 389.343 33.4773 cv
399.585 39.7619 li
400.577 40.365 400.883 41.6633 400.271 42.6457 cv
cp
f
443.952 78.883 mo
443.594 79.4602 li
428.232 104.205 li
420.235 117.081 li
419.847 117.708 li
419.416 118.404 418.511 118.629 417.802 118.225 cv
409.769 113.61 li
409.017 113.179 408.778 112.208 409.245 111.478 cv
419.675 95.1145 li
433.953 72.7102 li
434.398 72.0105 435.323 71.7986 436.026 72.2331 cv
443.455 76.7912 li
444.174 77.2287 444.397 78.1706 443.952 78.883 cv
cp
f
493.361 125.778 mo
491.952 128.437 li
491.736 128.838 li
485.135 141.28 li
484.248 142.947 li
483.637 144.093 482.228 144.551 481.056 143.987 cv
479.922 143.433 li
478.73 142.847 478.239 141.427 478.793 140.246 cv
478.862 140.103 li
484.544 129.698 li
488.196 123.008 li
488.242 122.929 li
488.897 121.831 490.295 121.43 491.435 122.027 cv
492.348 122.501 li
493.535 123.124 493.994 124.591 493.361 125.778 cv
cp
f
375.963 32.9455 mo
375.86 32.9455 375.755 32.9143 375.664 32.8498 cv
359.027 20.9582 li
358.796 20.7932 358.743 20.4729 358.908 20.2424 cv
359.074 20.0105 359.394 19.9597 359.625 20.1233 cv
376.262 32.0149 li
376.492 32.1799 376.546 32.5002 376.38 32.7307 cv
376.281 32.8708 376.122 32.9455 375.963 32.9455 cv
cp
1 1 1 rgb
f
590.218 307.857 mo
330.894 307.857 li
318.991 307.857 309.343 298.207 309.343 286.306 cv
309.343 274.404 318.991 264.754 330.894 264.754 cv
590.218 264.754 li
590.53 264.754 590.782 265.007 590.782 265.319 cv
590.782 307.292 li
590.782 307.604 590.53 307.857 590.218 307.857 cv
cp
.968627 .701961 .411765 rgb
f
595.895 307.857 mo
392.798 307.857 li
380.896 307.857 371.246 298.207 371.246 286.306 cv
371.246 274.404 380.896 264.754 392.798 264.754 cv
595.895 264.754 li
599.62 264.754 602.641 267.775 602.641 271.501 cv
602.641 301.111 li
602.641 304.836 599.62 307.857 595.895 307.857 cv
cp
.976471 .784314 .607843 rgb
f
602.641 299.532 mo
394.347 299.532 li
386.79 299.532 380.664 293.406 380.664 285.849 cv
380.664 278.292 386.79 272.166 394.347 272.166 cv
602.641 272.166 li
602.641 299.532 li
cp
1 .886275 .752941 rgb
f
570.522 265.097 mo
377.204 265.097 li
365.302 265.097 355.654 255.447 355.654 243.545 cv
355.654 231.643 365.302 221.994 377.204 221.994 cv
570.522 221.994 li
571.88 221.994 572.983 223.096 572.983 224.455 cv
572.983 262.636 li
572.983 263.994 571.88 265.097 570.522 265.097 cv
cp
.847059 .764706 .764706 rgb
f
576.657 265.097 mo
427.061 265.097 li
415.158 265.097 405.509 255.447 405.509 243.545 cv
405.509 231.643 415.158 221.994 427.061 221.994 cv
576.657 221.994 li
580.047 221.994 582.794 224.741 582.794 228.131 cv
582.794 258.96 li
582.794 262.349 580.047 265.097 576.657 265.097 cv
cp
.898039 .827451 .827451 rgb
f
582.794 257.229 mo
426.407 257.229 li
418.851 257.229 412.725 251.103 412.725 243.545 cv
412.725 235.989 418.851 229.863 426.407 229.863 cv
582.794 229.863 li
582.794 257.229 li
cp
.917647 .878431 .878431 rgb
f
583.148 239.041 mo
542.64 239.041 li
542.358 239.041 542.127 238.812 542.127 238.529 cv
542.127 238.245 542.358 238.016 542.64 238.016 cv
583.148 238.016 li
583.431 238.016 583.66 238.245 583.66 238.529 cv
583.66 238.812 583.431 239.041 583.148 239.041 cv
cp
.768627 .678431 .678431 rgb
f
582.949 248.163 mo
526.788 248.163 li
526.505 248.163 526.276 247.934 526.276 247.651 cv
526.276 247.367 526.505 247.138 526.788 247.138 cv
582.949 247.138 li
583.234 247.138 583.462 247.367 583.462 247.651 cv
583.462 247.934 583.234 248.163 582.949 248.163 cv
cp
f
282.046 307.335 mo
26.6272 307.335 li
14.7248 307.335 5.07641 297.687 5.07641 285.784 cv
5.07641 273.882 14.7248 264.234 26.6272 264.234 cv
282.046 264.234 li
282.046 307.335 li
cp
f
299.288 307.335 mo
85.4402 307.335 li
74.3352 307.335 65.3328 298.333 65.3328 287.228 cv
65.3328 284.341 li
65.3328 273.236 74.3352 264.234 85.4402 264.234 cv
299.288 264.234 li
303.24 264.234 306.445 267.438 306.445 271.39 cv
306.445 300.179 li
306.445 304.131 303.24 307.335 299.288 307.335 cv
cp
.827451 .737255 .737255 rgb
f
306.445 299.011 mo
88.8284 299.011 li
81.2717 299.011 75.1453 292.885 75.1453 285.328 cv
75.1453 277.771 81.2717 271.645 88.8284 271.645 cv
306.445 271.645 li
306.445 299.011 li
cp
.917647 .878431 .878431 rgb
f
306.445 281.28 mo
233.097 281.28 li
232.814 281.28 232.584 281.05 232.584 280.767 cv
232.584 280.484 232.814 280.254 233.097 280.254 cv
306.445 280.254 li
306.728 280.254 306.958 280.484 306.958 280.767 cv
306.958 281.05 306.728 281.28 306.445 281.28 cv
cp
1 1 1 rgb
f
306.445 290.402 mo
246.179 290.402 li
245.896 290.402 245.666 290.172 245.666 289.889 cv
245.666 289.606 245.896 289.376 246.179 289.376 cv
306.445 289.376 li
306.728 289.376 306.958 289.606 306.958 289.889 cv
306.958 290.172 306.728 290.402 306.445 290.402 cv
cp
f
22.5666 264.575 mo
263.116 264.575 li
275.018 264.575 284.667 254.927 284.667 243.025 cv
284.667 231.122 275.018 221.473 263.116 221.473 cv
22.5666 221.473 li
22.2551 221.473 22.0027 221.726 22.0027 222.037 cv
22.0027 264.011 li
22.0027 264.322 22.2551 264.575 22.5666 264.575 cv
cp
.898039 .827451 .827451 rgb
f
16.8904 264.575 mo
202.86 264.575 li
214.762 264.575 224.411 254.927 224.411 243.025 cv
224.411 231.122 214.762 221.473 202.86 221.473 cv
16.8904 221.473 li
13.1643 221.473 10.1438 224.493 10.1438 228.22 cv
10.1438 257.829 li
10.1438 261.555 13.1643 264.575 16.8904 264.575 cv
cp
f
10.1438 256.251 mo
202.008 256.251 li
209.565 256.251 215.691 250.125 215.691 242.569 cv
215.691 235.011 209.565 228.885 202.008 228.885 cv
10.1438 228.885 li
10.1438 256.251 li
cp
1 1 1 rgb
f
42.2639 221.816 mo
235.581 221.816 li
247.483 221.816 257.132 212.166 257.132 200.265 cv
257.132 188.362 247.483 178.713 235.581 178.713 cv
42.2639 178.713 li
40.9045 178.713 39.803 179.815 39.803 181.174 cv
39.803 219.355 li
39.803 220.714 40.9045 221.816 42.2639 221.816 cv
cp
.733333 .835294 .988235 rgb
f
36.1277 221.816 mo
185.725 221.816 li
197.627 221.816 207.276 212.166 207.276 200.265 cv
207.276 188.362 197.627 178.713 185.725 178.713 cv
36.1277 178.713 li
32.7385 178.713 29.991 181.461 29.991 184.85 cv
29.991 215.679 li
29.991 219.068 32.7385 221.816 36.1277 221.816 cv
cp
.843137 .905882 1 rgb
f
29.991 213.491 mo
186.377 213.491 li
193.934 213.491 200.061 207.365 200.061 199.808 cv
200.061 192.251 193.934 186.125 186.377 186.125 cv
29.991 186.125 li
29.991 213.491 li
cp
.968627 .94902 .94902 rgb
f
116.211 238.52 mo
10.0237 238.52 li
9.74047 238.52 9.51049 238.29 9.51049 238.007 cv
9.51049 237.724 9.74047 237.494 10.0237 237.494 cv
116.211 237.494 li
116.494 237.494 116.724 237.724 116.724 238.007 cv
116.724 238.29 116.494 238.52 116.211 238.52 cv
cp
.768627 .678431 .678431 rgb
f
94.0915 247.642 mo
10.2224 247.642 li
9.93921 247.642 9.70922 247.412 9.70922 247.129 cv
9.70922 246.846 9.93921 246.616 10.2224 246.616 cv
94.0915 246.616 li
94.3747 246.616 94.6047 246.846 94.6047 247.129 cv
94.6047 247.412 94.3747 247.642 94.0915 247.642 cv
cp
f
70.1448 195.76 mo
29.6365 195.76 li
29.3533 195.76 29.1233 195.531 29.1233 195.247 cv
29.1233 194.964 29.3533 194.735 29.6365 194.735 cv
70.1448 194.735 li
70.428 194.735 70.658 194.964 70.658 195.247 cv
70.658 195.531 70.428 195.76 70.1448 195.76 cv
cp
.462745 .541176 .709804 rgb
f
85.9958 204.882 mo
29.8352 204.882 li
29.552 204.882 29.322 204.653 29.322 204.369 cv
29.322 204.086 29.552 203.857 29.8352 203.857 cv
85.9958 203.857 li
86.279 203.857 86.509 204.086 86.509 204.369 cv
86.509 204.653 86.279 204.882 85.9958 204.882 cv
cp
f
88.9363 151.304 mo
88.5217 195.053 li
42.1614 300.029 li
37.4104 310.786 45.3166 322.868 57.0764 322.822 cv
145.045 322.476 li
156.807 322.429 164.618 310.28 159.778 299.56 cv
112.011 193.762 li
111.256 151.217 li
88.9363 151.304 li
cp
.968627 .701961 .411765 rgb
f
137.065 309.045 mo
64.9822 309.332 li
55.3508 309.368 48.865 298.593 52.7541 289.003 cv
64.3254 260.474 li
90.7151 195.42 li
90.7561 151.338 li
109.044 151.266 li
109.962 194.271 li
137.45 260.474 li
149.134 288.618 li
153.1 298.177 146.707 309.009 137.065 309.045 cv
cp
.976471 .784314 .607843 rgb
f
116.919 151.489 mo
82.8845 151.489 li
79.7942 151.489 77.2883 148.984 77.2883 145.893 cv
77.2883 142.989 li
77.2883 139.899 79.7942 137.393 82.8845 137.393 cv
116.919 137.393 li
120.01 137.393 122.515 139.899 122.515 142.989 cv
122.515 145.893 li
122.515 148.984 120.01 151.489 116.919 151.489 cv
cp
.968627 .701961 .411765 rgb
f
137.065 309.045 mo
64.9822 309.332 li
55.3508 309.368 48.865 298.593 52.7541 289.003 cv
64.3254 260.474 li
137.45 260.474 li
149.134 288.618 li
153.1 298.177 146.707 309.009 137.065 309.045 cv
cp
1 .886275 .752941 rgb
f
96.8552 142.364 mo
84.696 142.364 li
84.4128 142.364 84.1829 142.134 84.1829 141.851 cv
84.1829 141.568 84.4128 141.338 84.696 141.338 cv
96.8552 141.338 li
97.1384 141.338 97.3684 141.568 97.3684 141.851 cv
97.3684 142.134 97.1384 142.364 96.8552 142.364 cv
cp
1 1 1 rgb
f
240.164 219.658 mo
239.52 219.749 209.727 206.005 209.295 205.104 cv
209.14 204.781 209.732 203.341 210.752 201.36 cv
212.604 197.752 217.284 192.198 220.035 188.719 cv
220.035 188.719 230.397 193.693 231.104 194.678 cv
231.816 195.671 238.609 208.429 238.609 208.429 cv
238.609 208.429 241.927 211.483 242.404 214.359 cv
242.542 215.202 242.462 216.009 242.264 216.712 cv
241.787 218.415 240.612 219.602 240.164 219.658 cv
cp
.968627 .701961 .411765 rgb
f
240.164 219.658 mo
239.52 219.749 209.727 206.005 209.295 205.104 cv
209.14 204.781 209.732 203.341 210.752 201.36 cv
242.264 216.712 li
241.787 218.415 240.612 219.602 240.164 219.658 cv
cp
.639216 .482353 .564706 rgb
f
236.255 204.423 mo
236.121 204.392 li
227.52 200.126 li
227.405 200.07 227.339 199.946 227.356 199.819 cv
227.372 199.692 227.468 199.589 227.594 199.564 cv
233.098 198.457 li
233.26 198.427 233.419 198.53 233.451 198.692 cv
233.484 198.855 233.379 199.013 233.216 199.045 cv
228.573 199.979 li
236.388 203.855 li
236.536 203.928 236.597 204.108 236.524 204.257 cv
236.471 204.363 236.365 204.423 236.255 204.423 cv
cp
1 1 1 rgb
f
222.112 157.571 mo
222.112 157.571 245.522 148.636 255.993 160.34 cv
269.029 174.911 235.8 196.555 235.8 196.555 cv
214.903 189.245 li
220.464 179.954 li
195.414 171.074 li
211.993 159.309 li
222.112 157.571 li
cp
.313726 .372549 .588235 rgb
f
270.162 218.86 mo
269.707 219.303 238.3 225.725 237.438 225.266 cv
237.13 225.102 236.762 223.625 236.418 221.475 cv
235.789 217.563 236.258 210.483 236.41 206.152 cv
236.41 206.152 247.446 204.071 248.573 204.437 cv
249.708 204.807 262.439 210.919 262.439 210.919 cv
262.439 210.919 266.818 211.404 268.858 213.392 cv
269.455 213.975 269.859 214.656 270.11 215.324 cv
270.72 216.942 270.482 218.556 270.162 218.86 cv
cp
.968627 .701961 .411765 rgb
f
270.162 218.86 mo
269.707 219.303 238.3 225.725 237.438 225.266 cv
237.13 225.102 236.762 223.625 236.418 221.475 cv
270.11 215.324 li
270.72 216.942 270.482 218.556 270.162 218.86 cv
cp
.639216 .482353 .564706 rgb
f
249.655 211.188 mo
249.547 211.188 249.446 211.129 249.392 211.032 cv
249.33 210.92 249.347 210.781 249.433 210.686 cv
253.126 206.63 li
253.238 206.507 253.427 206.499 253.55 206.611 cv
253.673 206.722 253.681 206.911 253.57 207.034 cv
250.468 210.441 li
258.843 208.972 li
259.003 208.947 259.162 209.053 259.19 209.216 cv
259.219 209.379 259.11 209.534 258.947 209.564 cv
249.707 211.184 li
249.655 211.188 li
cp
1 1 1 rgb
f
191.033 158.889 mo
191.033 158.889 233.442 154.841 240.161 160.524 cv
248.983 167.984 256.246 203.312 256.246 203.312 cv
233.745 212.693 li
233.745 212.693 226.156 183.113 223.354 182.343 cv
220.115 181.454 199.706 181.907 194.309 177.406 cv
188.912 172.904 191.033 158.889 191.033 158.889 cv
cp
.360784 .411765 .647059 rgb
f
214.137 153.757 mo
194.924 154.374 li
191.513 154.483 188.659 151.807 188.55 148.396 cv
187.713 122.313 li
187.603 118.902 190.28 116.048 193.691 115.938 cv
212.904 115.322 li
216.315 115.212 219.169 117.889 219.279 121.3 cv
220.115 147.383 li
220.225 150.794 217.549 153.648 214.137 153.757 cv
cp
.968627 .701961 .411765 rgb
f
204.249 116.329 mo
204.249 116.329 195.916 116.452 189.679 123.383 cv
183.442 130.312 181.912 145.4 181.912 145.4 cv
198.03 148.907 li
231.631 138.962 li
231.631 138.962 225.753 125.838 220.374 120.387 cv
214.994 114.937 204.249 116.329 204.249 116.329 cv
cp
.639216 .482353 .564706 rgb
f
202.786 111.475 mo
202.985 117.362 li
202.985 117.362 204.23 119.04 208.091 119.275 cv
210.967 119.449 211.955 118.858 211.955 118.858 cv
211.454 115.881 li
210.961 112.978 li
203.96 111.692 li
202.786 111.475 li
cp
.956863 .517647 .384314 rgb
f
203.959 111.708 mo
203.98 111.887 204.053 112.098 204.165 112.339 cv
205.712 115.597 209.759 116.218 211.42 116.329 cv
210.953 113.084 li
203.959 111.708 li
cp
0 0 0 rgb
f
212.089 98.0334 mo
212.089 98.0334 215.73 106.218 214.469 110.837 cv
213.208 115.457 209.002 114.759 206.482 113.885 cv
203.962 113.01 202.785 111.477 202.785 111.477 cv
202.785 111.477 200.442 112.289 198.857 110.116 cv
197.272 107.943 198.222 105.429 199.559 104.845 cv
200.896 104.261 202.497 105.219 202.497 105.219 cv
201.231 102.842 li
201.231 102.842 206.407 90.6838 212.089 98.0334 cv
cp
.956863 .517647 .384314 rgb
f
211.838 107.727 mo
211.749 107.714 li
211.591 107.665 211.502 107.497 211.552 107.338 cv
211.999 105.89 210.885 104.907 210.873 104.898 cv
210.747 104.79 210.734 104.6 210.842 104.475 cv
210.949 104.349 211.139 104.336 211.265 104.443 cv
211.323 104.494 212.688 105.697 212.125 107.516 cv
212.085 107.644 211.967 107.727 211.838 107.727 cv
cp
0 0 0 rgb
f
190.883 150.829 mo
190.617 159.963 li
190.617 159.963 199.864 161.359 209.829 159.963 cv
219.795 158.567 223.434 156.166 223.434 156.166 cv
223.434 136.309 li
196.696 136.309 li
190.883 150.829 li
cp
.639216 .482353 .564706 rgb
f
202.148 109.107 mo
201.929 109.013 li
199.7 106.651 li
199.586 106.53 199.592 106.34 199.712 106.226 cv
199.833 106.113 200.023 106.118 200.136 106.239 cv
202.366 108.601 li
202.48 108.721 202.474 108.911 202.354 109.025 cv
202.148 109.107 li
cp
0 0 0 rgb
f
199.787 108.474 mo
199.641 108.474 199.513 108.368 199.49 108.219 cv
199.466 108.055 199.578 107.902 199.742 107.877 cv
201.285 107.643 li
201.448 107.624 201.602 107.731 201.627 107.895 cv
201.652 108.059 201.539 108.212 201.375 108.237 cv
199.832 108.471 li
199.787 108.474 li
cp
f
208.135 106.029 mo
207.986 106.029 207.857 105.918 207.838 105.767 cv
207.568 103.651 li
207.547 103.486 207.663 103.336 207.827 103.315 cv
207.996 103.297 208.142 103.41 208.163 103.574 cv
208.433 105.691 li
208.454 105.855 208.338 106.006 208.174 106.027 cv
208.135 106.029 li
cp
f
212.682 105.63 mo
212.535 105.63 212.407 105.522 212.385 105.373 cv
212.08 103.295 li
212.055 103.132 212.169 102.979 212.333 102.955 cv
212.494 102.928 212.649 103.044 212.674 103.208 cv
212.979 105.286 li
213.004 105.449 212.89 105.602 212.726 105.626 cv
212.682 105.63 li
cp
f
206.635 102.51 mo
206.498 102.477 li
206.351 102.401 206.293 102.22 206.368 102.073 cv
206.939 100.965 208.337 101.255 208.396 101.266 cv
208.558 101.301 208.66 101.46 208.626 101.622 cv
208.591 101.784 208.434 101.888 208.27 101.853 cv
208.23 101.846 207.261 101.65 206.903 102.347 cv
206.849 102.451 206.744 102.51 206.635 102.51 cv
cp
f
213.321 102.055 mo
213.105 101.964 li
213.077 101.935 212.433 101.28 211.616 101.575 cv
211.457 101.631 211.288 101.55 211.232 101.395 cv
211.176 101.239 211.256 101.067 211.412 101.01 cv
212.597 100.583 213.5 101.509 213.538 101.549 cv
213.652 101.668 213.648 101.857 213.529 101.971 cv
213.321 102.055 li
cp
f
209.649 119.404 mo
205.982 119.404 202.987 117.709 202.835 117.622 cv
202.692 117.54 202.642 117.356 202.725 117.213 cv
202.808 117.068 202.991 117.02 203.135 117.102 cv
203.177 117.126 207.462 119.547 211.89 118.565 cv
212.053 118.527 212.212 118.631 212.248 118.793 cv
212.284 118.954 212.181 119.115 212.02 119.151 cv
211.214 119.329 210.416 119.404 209.649 119.404 cv
cp
1 1 1 rgb
f
210.615 110.242 mo
210.414 110.242 209.131 110.194 208.105 109.003 cv
207.997 108.877 208.011 108.688 208.137 108.579 cv
208.262 108.471 208.452 108.486 208.56 108.611 cv
209.459 109.655 210.579 109.643 210.624 109.642 cv
210.793 109.642 210.927 109.771 210.931 109.934 cv
210.935 110.099 210.806 110.237 210.641 110.242 cv
210.615 110.242 li
cp
0 0 0 rgb
f
198.488 117.421 mo
198.488 117.421 200.589 123.108 200.802 130.817 cv
201.014 138.525 199.315 148.131 199.315 148.131 cv
202.892 149.363 li
202.892 149.363 204.753 140.938 204.745 130.77 cv
204.738 120.602 202.069 116.367 202.069 116.367 cv
198.488 117.421 li
cp
.968627 .701961 .411765 rgb
f
217.375 148.556 mo
213.771 147.434 li
213.771 147.434 215.213 137.774 214.783 130.081 cv
214.437 123.65 212.316 117.857 211.637 116.125 cv
213.314 116.415 215.074 116.928 216.668 117.746 cv
217.5 119.922 218.553 123.844 218.733 129.929 cv
219.01 140.088 217.375 148.556 217.375 148.556 cv
cp
f
199.966 104.863 mo
201.291 104.652 202.497 105.219 202.549 105.514 cv
202.729 106.54 203.9 106.888 203.959 105.729 cv
204.065 103.681 202.497 103.252 202.497 103.252 cv
202.497 103.252 204.906 103.002 207.026 100.802 cv
209.147 98.6032 209.694 97.6794 209.694 97.6794 cv
212.745 99.6706 li
212.745 99.6706 216.105 92.9055 207.621 93.3674 cv
199.137 93.8293 199.024 101.265 199.024 101.265 cv
199.024 101.265 196.673 101.895 196.827 103.252 cv
196.981 104.609 198.405 106.049 198.405 106.049 cv
198.405 106.049 198.651 105.072 199.966 104.863 cv
cp
0 0 0 rgb
f
232.062 136.093 mo
232.062 136.093 233.405 134.366 236.371 133.13 cv
240.997 131.201 244.335 130.934 244.335 130.934 cv
244.255 133.523 li
232.062 136.093 li
cp
.917647 .917647 .917647 rgb
f
216.093 132.36 mo
215.972 136.281 li
235.772 137.335 li
235.772 137.335 235.096 135.13 229.536 133.737 cv
224.594 132.498 216.093 132.36 216.093 132.36 cv
cp
f
245.398 132.492 mo
244.708 154.903 li
233.007 157.279 li
215.201 156.975 li
215.469 133.958 li
233.216 134.887 li
245.398 132.492 li
cp
.407843 .713726 .847059 rgb
f
232.662 134.814 mo
231.964 157.491 li
233.746 157.342 li
234.446 134.629 li
232.662 134.814 li
cp
.352941 .647059 .74902 rgb
f
246.816 146.755 mo
246.816 146.755 250.811 147.855 249.268 149.531 cv
247.726 151.208 240.227 150.957 239.784 148.638 cv
239.341 146.319 246.816 146.755 246.816 146.755 cv
cp
.956863 .517647 .384314 rgb
f
246.898 143.327 mo
246.898 143.327 250.893 144.427 249.351 146.104 cv
247.808 147.781 240.309 147.53 239.866 145.21 cv
239.424 142.891 246.898 143.327 246.898 143.327 cv
cp
f
244.939 140.157 mo
245.873 140 246.838 140.045 247.721 140.387 cv
248.497 140.689 249.136 141.201 248.59 142.049 cv
247.498 143.743 240.921 144.655 240.185 142.7 cv
239.641 141.253 243.101 140.468 244.939 140.157 cv
cp
f
241.648 143.96 mo
241.491 143.96 241.359 143.837 241.349 143.678 cv
241.339 143.513 241.464 143.37 241.63 143.36 cv
246.879 143.028 li
247.041 143.011 247.187 143.143 247.197 143.308 cv
247.208 143.474 247.082 143.616 246.917 143.627 cv
241.668 143.959 li
241.648 143.96 li
cp
0 0 0 rgb
f
247.846 147.426 mo
242.076 147.344 li
241.91 147.342 241.778 147.206 241.78 147.04 cv
241.782 146.874 241.931 146.74 242.085 146.744 cv
247.851 146.826 li
248.016 146.828 248.149 146.965 248.147 147.131 cv
248.144 147.295 248.01 147.426 247.846 147.426 cv
cp
f
209.694 152.734 mo
209.694 152.734 201.33 155.351 189.303 153.023 cv
176.91 150.624 180.757 133.504 186.531 126.459 cv
192.306 119.413 198.488 117.421 198.488 117.421 cv
197.313 138.962 li
209.694 141.937 li
209.694 152.734 li
cp
.639216 .482353 .564706 rgb
f
194.105 134.444 mo
193.991 134.444 193.906 134.49 193.826 134.596 cv
193.728 134.725 193.701 134.864 193.742 135.032 cv
193.98 136.018 196.153 137.384 197.655 138.198 cv
196.545 136.504 194.967 134.493 194.13 134.445 cv
194.105 134.444 li
cp
198.488 139.262 mo
198.358 139.233 li
197.87 139 193.576 136.904 193.158 135.174 cv
193.075 134.829 193.141 134.504 193.348 134.232 cv
193.556 133.961 193.838 133.832 194.165 133.845 cv
195.804 133.94 198.449 138.311 198.745 138.809 cv
198.813 138.923 198.799 139.067 198.709 139.164 cv
198.488 139.262 li
cp
1 1 1 rgb
f
202.569 154.416 mo
199.445 154.416 195.162 154.295 191.319 153.765 cv
191.155 153.742 191.04 153.591 191.063 153.426 cv
191.085 153.262 191.231 153.148 191.401 153.17 cv
198.417 154.138 206.926 153.733 207.011 153.729 cv
207.155 153.722 207.318 153.847 207.326 154.014 cv
207.334 154.179 207.206 154.32 207.041 154.328 cv
207.002 154.33 205.194 154.416 202.569 154.416 cv
cp
f
226.993 175.21 mo
226.606 175.21 226.253 175.32 225.927 175.541 cv
224.254 176.676 223.803 180.336 223.69 181.769 cv
225.557 180.529 229.055 177.866 228.893 176.329 cv
228.85 175.922 228.524 175.613 227.895 175.385 cv
227.574 175.268 227.275 175.21 226.993 175.21 cv
cp
223.354 182.644 mo
223.205 182.604 li
223.109 182.549 223.051 182.445 223.054 182.335 cv
223.061 182.102 223.25 176.633 225.589 175.045 cv
226.312 174.554 227.157 174.477 228.1 174.821 cv
228.954 175.131 229.421 175.617 229.49 176.266 cv
229.74 178.629 224.152 182.198 223.513 182.598 cv
223.354 182.644 li
cp
.968627 .701961 .411765 rgb
f
206.693 151.642 mo
206.693 151.642 209.248 153.468 213.512 151.76 cv
218.224 149.873 211.421 141.76 211.421 141.76 cv
206.584 144.988 li
206.693 151.642 li
cp
.956863 .517647 .384314 rgb
f
206.584 144.511 mo
206.407 144.505 206.278 144.366 206.284 144.2 cv
206.385 141.353 li
205.058 140.964 198.089 138.961 193.465 138.465 cv
193.3 138.447 193.181 138.299 193.198 138.134 cv
193.216 137.969 193.358 137.84 193.529 137.868 cv
198.687 138.422 206.699 140.82 206.779 140.844 cv
206.91 140.884 206.997 141.006 206.992 141.142 cv
206.884 144.221 li
206.878 144.384 206.745 144.511 206.584 144.511 cv
cp
1 1 1 rgb
f
213.338 147.9 mo
213.338 147.9 209.571 149.628 211.364 151.034 cv
213.156 152.441 220.517 150.988 220.581 148.628 cv
220.645 146.268 213.338 147.9 213.338 147.9 cv
cp
.956863 .517647 .384314 rgb
f
212.706 144.53 mo
212.706 144.53 208.939 146.258 210.731 147.664 cv
212.523 149.071 219.885 147.618 219.948 145.258 cv
220.013 142.898 212.706 144.53 212.706 144.53 cv
cp
f
214.129 141.086 mo
213.182 141.08 212.237 141.281 211.421 141.76 cv
210.703 142.182 210.155 142.791 210.83 143.539 cv
212.181 145.036 218.819 144.879 219.231 142.831 cv
219.535 141.316 215.994 141.097 214.129 141.086 cv
cp
f
212.705 144.83 mo
212.553 144.83 212.423 144.714 212.407 144.559 cv
212.391 144.394 212.511 144.247 212.677 144.231 cv
217.911 143.715 li
218.078 143.701 218.222 143.819 218.239 143.984 cv
218.255 144.149 218.135 144.296 217.969 144.312 cv
212.735 144.828 li
212.705 144.83 li
cp
0 0 0 rgb
f
213.299 148.475 mo
213.159 148.475 213.033 148.376 213.005 148.233 cv
212.973 148.071 213.078 147.912 213.241 147.88 cv
217.81 146.974 li
217.973 146.944 218.131 147.047 218.163 147.21 cv
218.195 147.372 218.09 147.531 217.927 147.563 cv
213.358 148.469 li
213.299 148.475 li
cp
f
61.3264 193.238 mo
61.3264 193.238 50.3035 207.514 62.0515 214.603 cv
73.7996 221.691 73.3157 211.431 73.3157 211.431 cv
65.9324 192.099 li
61.3264 193.238 li
cp
f
73.8171 253.116 mo
49.2849 252.343 li
45.1497 252.213 41.9031 248.755 42.0334 244.62 cv
42.9841 214.461 li
43.114 210.325 46.572 207.079 50.7073 207.209 cv
75.239 207.983 li
79.3743 208.113 82.6208 211.571 82.4905 215.705 cv
81.5403 245.864 li
81.4099 250 77.9519 253.246 73.8171 253.116 cv
cp
.360784 .411765 .647059 rgb
f
75.9416 211.428 mo
75.9416 211.428 94.9866 213.203 101.447 228.406 cv
107.545 242.757 85.5076 250.149 82.1604 239 cv
78.8132 227.851 75.9416 211.428 75.9416 211.428 cv
cp
.407843 .713726 .847059 rgb
f
65.9324 204.065 mo
66.0163 211.484 li
66.0163 211.484 67.3787 213.601 71.7224 213.904 cv
74.9582 214.13 75.9631 212.458 75.9631 212.458 cv
75.1062 205.976 li
67.2502 204.341 li
65.9324 204.065 li
cp
.956863 .517647 .384314 rgb
f
67.2502 204.341 mo
67.2712 204.543 67.3508 204.781 67.4739 205.054 cv
69.176 208.741 73.7234 209.489 75.5925 209.634 cv
75.1062 205.976 li
67.2502 204.341 li
cp
0 0 0 rgb
f
76.5676 189.047 mo
76.5676 189.047 80.5671 198.304 79.0911 203.489 cv
77.615 208.674 72.8889 207.838 70.0632 206.822 cv
67.2375 205.808 65.9309 204.067 65.9309 204.067 cv
65.9309 204.067 63.2844 204.952 61.5261 202.487 cv
59.7683 200.022 60.8684 197.203 62.3806 196.563 cv
63.8923 195.922 65.6829 197.019 65.6829 197.019 cv
64.2869 194.328 li
64.2869 194.328 70.2615 180.705 76.5676 189.047 cv
cp
.956863 .517647 .384314 rgb
f
65.3518 201.028 mo
65.1257 200.946 li
62.1711 198.472 li
62.0217 198.347 62.0022 198.124 62.1272 197.975 cv
62.2512 197.825 62.4744 197.807 62.6233 197.931 cv
65.5779 200.405 li
65.7273 200.53 65.7468 200.752 65.6218 200.902 cv
65.5525 200.985 65.4524 201.028 65.3518 201.028 cv
cp
0 0 0 rgb
f
62.3645 200.988 mo
62.2327 200.988 62.1062 200.913 62.0457 200.786 cv
61.9622 200.611 62.0369 200.401 62.2126 200.317 cv
64.0862 199.424 li
64.2624 199.34 64.4719 199.415 64.5559 199.591 cv
64.6394 199.767 64.5647 199.977 64.3889 200.061 cv
62.5154 200.953 li
62.3645 200.988 li
cp
f
65.6829 197.019 mo
65.6829 197.019 68.9304 196.711 70.9914 194.052 cv
73.053 191.394 74.0276 188.669 74.0276 188.669 cv
74.0276 188.669 75.3987 188.906 76.2707 190.002 cv
76.9123 190.809 77.6648 191.98 77.6648 191.98 cv
77.6648 191.98 77.7585 188.239 75.885 186.393 cv
74.0115 184.547 72.3928 185.175 72.3928 185.175 cv
72.3928 185.175 68.2722 182.805 64.0515 186.508 cv
59.8308 190.211 61.7688 196.965 61.7688 196.965 cv
61.7688 196.965 63.9016 196.128 65.6829 197.019 cv
cp
f
76.4119 200.449 mo
76.3225 200.438 li
76.1345 200.389 76.0217 200.196 76.071 200.008 cv
76.5183 198.298 75.2043 197.224 75.1482 197.179 cv
74.9968 197.057 74.9709 196.836 75.092 196.684 cv
75.2126 196.532 75.4338 196.506 75.5857 196.626 cv
75.657 196.682 77.3191 198.023 76.7527 200.186 cv
76.7112 200.345 76.5686 200.449 76.4119 200.449 cv
cp
f
77.8572 197.146 mo
77.6916 197.146 77.5442 197.029 77.5115 196.86 cv
77.0452 194.439 li
77.0251 194.333 77.0539 194.225 77.1238 194.143 cv
77.5906 193.598 li
77.7185 193.449 77.9392 193.434 78.0876 193.56 cv
78.2351 193.687 78.2527 193.908 78.1257 194.057 cv
77.7698 194.473 li
78.2038 196.727 li
78.2405 196.917 78.1155 197.103 77.9246 197.139 cv
77.8572 197.146 li
cp
f
72.5437 197.849 mo
72.3752 197.849 72.2263 197.728 72.197 197.556 cv
71.7712 195.087 li
71.7546 194.993 71.7776 194.897 71.8337 194.82 cv
72.3718 194.083 li
72.4866 193.926 72.7048 193.892 72.8645 194.007 cv
73.0217 194.121 73.0559 194.342 72.9412 194.499 cv
72.491 195.114 li
72.8913 197.437 li
72.9246 197.628 72.7961 197.811 72.6042 197.844 cv
72.5437 197.849 li
cp
f
77.7942 192.722 mo
77.7346 192.717 li
76.1423 192.447 li
75.9504 192.413 75.8215 192.232 75.8538 192.04 cv
75.887 191.849 76.0696 191.725 76.2605 191.751 cv
77.8528 192.022 li
78.0447 192.055 78.1736 192.237 78.1413 192.428 cv
78.1121 192.6 77.9626 192.722 77.7942 192.722 cv
cp
f
70.8059 193.367 mo
70.6506 193.367 70.508 193.264 70.4656 193.107 cv
70.4148 192.919 70.5256 192.726 70.7136 192.675 cv
73.7048 191.864 li
73.8928 191.811 74.0862 191.924 74.1374 192.113 cv
74.1882 192.3 74.0774 192.493 73.8894 192.544 cv
70.8982 193.355 li
70.8059 193.367 li
cp
f
64.5881 336.251 mo
64.9573 344.582 li
80.6282 347.935 li
81.4177 342.19 li
80.1804 334.712 li
64.5881 336.251 li
cp
.956863 .517647 .384314 rgb
f
85.3772 246.398 mo
85.3772 246.398 88.8303 271.547 89.8957 295.824 cv
90.9607 320.102 91.6575 337.639 91.6575 337.639 cv
61.8782 338.546 li
60.6248 290.335 li
61.3083 246.398 li
85.3772 246.398 li
cp
.639216 .482353 .564706 rgb
f
37.739 265.081 mo
43.573 271.024 li
30.908 282.903 li
24.7913 276.631 li
37.739 265.081 li
cp
.956863 .517647 .384314 rgb
f
49.3806 246.398 mo
49.3806 246.398 46.3269 255.587 44.5554 263.454 cv
42.7839 271.322 40.1282 281.865 40.1282 281.865 cv
40.1282 281.865 30.2375 305.768 48.2732 309.192 cv
70.636 313.437 71.6506 290.335 71.6506 290.335 cv
69.3811 241.684 li
49.3806 246.398 li
cp
.639216 .482353 .564706 rgb
f
33.8665 188.657 mo
33.8665 188.657 28.4231 180.425 26.9675 174.444 cv
25.512 168.464 26.4075 166.113 27.2903 165.78 cv
28.1726 165.446 29.9431 168.991 29.9431 168.991 cv
29.9431 168.991 28.7346 163.335 30.6829 162.637 cv
32.6306 161.939 34.2595 166.791 34.2595 166.791 cv
34.2595 166.791 34.2541 162.578 36.0286 163.009 cv
37.803 163.44 40.0183 172.589 40.0183 172.589 cv
40.0183 172.589 40.4656 167.749 41.842 168.065 cv
43.2185 168.38 45.3513 174.978 44.8855 177.622 cv
44.4192 180.266 42.5862 183.692 42.5862 183.692 cv
33.8665 188.657 li
cp
.956863 .517647 .384314 rgb
f
66.2571 209.903 mo
66.2571 209.903 56.2707 198.805 52.4094 191.276 cv
48.5481 183.746 46.8625 179.916 46.8625 179.916 cv
27.304 186.459 li
27.304 186.459 28.0437 192.788 35.1003 204.603 cv
42.157 216.418 48.5017 223.962 48.5017 223.962 cv
48.5017 223.962 47.0837 247.811 47.4832 248.276 cv
47.8826 248.74 58.7527 250.852 70.9597 250.262 cv
83.1667 249.671 85.8279 248.159 86.4944 247.811 cv
87.1609 247.462 75.9416 211.428 75.9416 211.428 cv
75.9416 211.428 73.0163 214.042 66.2571 209.903 cv
cp
.407843 .713726 .847059 rgb
f
66.9924 357.689 mo
65.8865 357.679 64.9807 356.774 64.9319 355.626 cv
64.7395 351.095 63.7371 340.96 64.5881 340.927 cv
65.6736 340.884 76.6912 343.339 76.6912 343.339 cv
76.6912 343.339 76.7366 337.048 81.2805 337.996 cv
84.7673 338.724 88.9333 342.557 90.6833 344.302 cv
91.239 344.856 91.9299 345.229 92.6848 345.381 cv
95.9319 346.032 104.881 348.243 105.202 352.848 cv
105.594 358.476 103.242 357.925 102.156 357.968 cv
101.225 358.005 74.533 357.759 66.9924 357.689 cv
cp
.360784 .411765 .647059 rgb
f
26.0007 254.961 mo
26.7844 254.21 28.0832 254.231 28.9568 255.011 cv
32.4094 258.094 40.1936 266.53 39.6208 267.138 cv
38.8909 267.913 31.1052 272.441 31.1052 272.441 cv
31.1052 272.441 34.2742 276.288 30.3914 278.732 cv
27.4123 280.608 21.6819 280.745 19.1765 280.708 cv
18.3811 280.697 17.6228 280.905 16.9822 281.316 cv
14.2263 283.08 6.32739 287.651 2.7312 284.605 cv
-1.6648 280.881 .390377 279.658 1.12036 278.883 cv
1.74682 278.218 20.6575 260.083 26.0007 254.961 cv
cp
f
37.8269 181.934 mo
37.6794 181.934 37.5515 181.824 37.5325 181.674 cv
36.6916 175.078 39.699 172.469 39.8274 172.361 cv
39.9514 172.255 40.1389 172.271 40.2449 172.397 cv
40.3508 172.522 40.3347 172.71 40.2102 172.816 cv
40.1814 172.84 37.3254 175.349 38.1223 181.599 cv
38.1428 181.761 38.0276 181.91 37.865 181.931 cv
37.8269 181.934 li
cp
0 0 0 rgb
f
30.3044 175.91 mo
30.196 175.91 30.0915 175.85 30.0393 175.747 cv
29.9651 175.6 30.0242 175.422 30.1707 175.348 cv
39.449 170.662 li
39.593 170.587 39.7737 170.647 39.8479 170.794 cv
39.9221 170.94 39.863 171.119 39.7165 171.193 cv
30.4382 175.878 li
30.3044 175.91 li
cp
f
24.7913 281.865 mo
43.0901 269.299 li
47.6057 276.434 li
43.7087 307.396 li
43.7087 307.396 38.9109 306.57 24.7913 281.865 cv
cp
.639216 .482353 .564706 rgb
f
61.8933 310.525 mo
61.7839 310.525 61.676 310.474 61.6072 310.378 cv
61.4934 310.221 61.5286 310 61.6863 309.887 cv
61.7546 309.837 68.5676 304.784 72.1955 291.916 cv
75.844 278.976 73.6018 259.175 73.5788 258.977 cv
73.5608 258.822 73.6453 258.676 73.7869 258.613 cv
81.2756 255.311 li
81.4504 255.233 81.6614 255.312 81.74 255.49 cv
81.8186 255.669 81.738 255.877 81.5598 255.955 cv
74.3074 259.155 li
74.5598 261.544 76.3313 279.846 72.8743 292.108 cv
69.1741 305.233 62.386 310.25 62.0989 310.458 cv
61.8933 310.525 li
cp
.25098 .313726 .498039 rgb
f
43.1555 272.33 mo
43.7717 274.683 45.0437 278.154 46.7878 278.437 cv
46.9954 278.471 47.0559 278.435 47.0569 278.434 cv
47.3137 277.968 45.5906 275.298 43.1555 272.33 cv
cp
46.9431 279.155 mo
46.8621 279.155 46.7732 279.148 46.675 279.132 cv
43.5989 278.634 42.1995 271.363 42.1418 271.054 cv
42.1121 270.897 42.1916 270.739 42.3352 270.671 cv
42.4783 270.602 42.6506 270.637 42.7551 270.759 cv
44.4685 272.748 48.3762 277.515 47.6648 278.786 cv
47.5652 278.964 47.3611 279.155 46.9431 279.155 cv
cp
f
51.3459 260.422 mo
51.1633 260.422 51.009 260.28 50.9954 260.096 cv
50.9812 259.902 51.1267 259.733 51.3206 259.718 cv
51.5378 259.701 56.657 259.233 58.1038 252.33 cv
58.1428 252.139 58.3274 252.019 58.5207 252.058 cv
58.7112 252.098 58.8332 252.284 58.7932 252.475 cv
57.2346 259.914 51.4299 260.417 51.3718 260.421 cv
51.3459 260.422 li
cp
f
29.7659 191.097 mo
29.6174 191.097 29.4797 191.002 29.4309 190.854 cv
29.3704 190.669 29.4714 190.47 29.656 190.409 cv
47.6838 184.508 li
47.8723 184.448 48.0681 184.549 48.1287 184.734 cv
48.1892 184.918 48.0881 185.117 47.9036 185.178 cv
29.8757 191.079 li
29.7659 191.097 li
cp
1 1 1 rgb
f
73.905 202.202 mo
74.1467 202.642 74.5193 203.136 74.9431 203.169 cv
75.385 203.217 75.738 202.828 75.9553 202.513 cv
73.905 202.202 li
cp
75.0022 203.876 mo
74.8889 203.872 li
73.676 203.778 73.05 202.067 72.9827 201.871 cv
72.9421 201.755 72.9661 201.625 73.0447 201.531 cv
73.1233 201.436 73.2478 201.387 73.3684 201.407 cv
76.5686 201.893 li
76.6765 201.909 76.7707 201.975 76.824 202.071 cv
76.8772 202.165 76.8826 202.281 76.8396 202.381 cv
76.8127 202.444 76.1829 203.876 75.0022 203.876 cv
cp
0 0 0 rgb
f
65.0466 187.944 mo
65.0466 187.944 65.3601 178.606 58.2039 180.807 cv
51.0481 183.009 55.8474 191.072 60.0759 192.855 cv
64.3039 194.637 66.0657 190.795 66.0657 190.795 cv
65.0466 187.944 li
cp
f
72.8777 212.608 mo
69.4871 212.608 66.2317 210.318 66.052 210.19 cv
65.8938 210.076 65.8572 209.857 65.9705 209.697 cv
66.0832 209.54 66.303 209.503 66.4617 209.615 cv
66.5163 209.655 71.9578 213.478 75.7561 211.128 cv
75.9216 211.028 76.1389 211.078 76.2414 211.242 cv
76.344 211.408 76.2927 211.625 76.1272 211.728 cv
75.0974 212.365 73.9802 212.608 72.8777 212.608 cv
cp
1 1 1 rgb
f
97.3015 238.326 mo
97.0901 238.317 96.9397 238.152 96.949 237.957 cv
97.3205 230.094 90.7292 228.302 90.4485 228.23 cv
90.2605 228.181 90.1467 227.989 90.1951 227.8 cv
90.2439 227.612 90.4377 227.504 90.6238 227.546 cv
90.698 227.566 98.052 229.543 97.6531 237.99 cv
97.6443 238.179 97.4885 238.326 97.3015 238.326 cv
cp
f
46.7004 235.946 mo
46.7004 235.946 58.0178 229.724 63.301 218.114 cv
65.0476 214.277 66.7458 207.112 65.4221 207.049 cv
64.0989 206.988 64.0989 206.988 64.0989 206.988 cv
64.0989 206.988 56.8123 221.334 47.7937 227.913 cv
38.8987 234.402 46.7004 235.946 46.7004 235.946 cv
cp
.360784 .411765 .647059 rgb
f
88.5276 233.602 mo
88.5276 233.602 86.866 226.281 85.5354 222.279 cv
83.4094 215.887 80.8635 211.468 80.8635 211.468 cv
80.8635 211.468 80.0496 210.867 78.8381 210.331 cv
76.7541 209.41 75.7932 209.667 75.7932 209.667 cv
75.7932 209.667 82.2405 225.702 83.5515 233.285 cv
83.6926 234.101 88.5276 233.602 88.5276 233.602 cv
cp
f
94.1497 236.66 mo
94.5066 233.844 93.2014 231.078 90.8181 229.537 cv
90.3464 229.232 89.8962 228.952 89.5232 228.741 cv
87.9099 227.829 81.1013 229.879 81.1013 229.879 cv
81.1013 229.879 76.2175 231.377 77.2014 232.808 cv
78.1853 234.238 80.3762 233.817 80.9465 234.273 cv
81.5173 234.728 78.9924 240.004 80.0032 240.876 cv
81.6267 242.276 87.9582 243.138 91.1413 241.976 cv
91.2371 241.94 li
93.1062 241.228 93.866 238.9 94.1497 236.66 cv
cp
.956863 .517647 .384314 rgb
f
83.3743 234.891 mo
80.908 234.623 li
80.7146 234.602 80.5749 234.428 80.5959 234.235 cv
80.6169 234.04 80.7893 233.908 80.9851 233.922 cv
83.4123 234.188 li
83.6057 234.209 83.7454 234.383 83.7244 234.576 cv
83.7043 234.757 83.5515 234.891 83.3743 234.891 cv
cp
0 0 0 rgb
f
86.8547 230.021 mo
86.7844 230.014 li
84.0071 229.452 li
83.8162 229.413 83.6931 229.228 83.7317 229.036 cv
83.7703 228.846 83.9587 228.723 84.1467 228.761 cv
86.9241 229.322 li
87.115 229.362 87.238 229.547 87.1995 229.739 cv
87.1658 229.906 87.0188 230.021 86.8547 230.021 cv
cp
f
368.863 254.306 mo
346.301 255.03 li
342.295 255.157 338.945 252.015 338.816 248.01 cv
337.833 217.381 li
337.704 213.376 340.847 210.025 344.853 209.897 cv
367.414 209.172 li
371.419 209.044 374.771 212.187 374.9 216.192 cv
375.882 246.821 li
376.01 250.825 372.867 254.177 368.863 254.306 cv
cp
.25098 .313726 .498039 rgb
f
344.274 297.465 mo
344.274 347.284 li
360.161 347.284 li
363.827 300.29 li
344.274 297.465 li
cp
.956863 .517647 .384314 rgb
f
386.327 293.803 mo
394.03 339.031 li
379.518 345.144 li
366.233 294.252 li
386.327 293.803 li
cp
f
345.505 253.899 mo
345.505 253.899 343.23 264.39 341.922 275.314 cv
340.814 284.582 339.934 300.29 339.934 300.29 cv
367.019 300.918 li
390.328 296.982 li
390.328 296.982 383.694 256.937 381.476 252.25 cv
379.258 247.565 345.505 253.899 345.505 253.899 cv
cp
.407843 .713726 .847059 rgb
f
382.291 254.509 mo
354.055 255.616 li
332.604 245.2 li
332.604 245.2 335.729 226.761 343.053 218.623 cv
350.376 210.486 360.157 210.339 360.157 210.339 cv
360.157 210.339 364.698 209.753 369.695 210.681 cv
371.664 211.023 373.731 211.625 375.603 212.585 cv
376.872 213.237 378.076 214.066 379.102 215.108 cv
385.416 221.504 382.291 254.509 382.291 254.509 cv
cp
.360784 .411765 .647059 rgb
f
358.444 204.641 mo
358.678 211.553 li
358.678 211.553 360.139 213.524 364.673 213.799 cv
368.05 214.004 369.21 213.309 369.21 213.309 cv
368.622 209.814 li
368.044 206.406 li
359.823 204.895 li
358.444 204.641 li
cp
.956863 .517647 .384314 rgb
f
359.822 204.913 mo
359.846 205.124 359.932 205.371 360.063 205.655 cv
361.88 209.481 366.631 210.209 368.582 210.34 cv
368.034 206.53 li
359.822 204.913 li
cp
0 0 0 rgb
f
369.367 188.856 mo
369.367 188.856 373.644 198.466 372.162 203.891 cv
370.682 209.317 365.742 208.497 362.783 207.47 cv
359.825 206.444 358.443 204.642 358.443 204.642 cv
358.443 204.642 355.692 205.596 353.83 203.044 cv
351.969 200.492 353.084 197.54 354.655 196.855 cv
356.224 196.169 358.104 197.294 358.104 197.294 cv
356.618 194.502 li
356.618 194.502 362.697 180.226 369.367 188.856 cv
cp
.956863 .517647 .384314 rgb
f
369.073 200.239 mo
368.968 200.224 li
368.783 200.166 368.679 199.969 368.736 199.782 cv
369.258 198.095 367.993 196.963 367.939 196.915 cv
367.793 196.788 367.779 196.566 367.905 196.419 cv
368.03 196.271 368.252 196.255 368.401 196.383 cv
368.47 196.442 370.071 197.855 369.409 199.991 cv
369.363 200.143 369.223 200.239 369.073 200.239 cv
cp
0 0 0 rgb
f
357.694 201.86 mo
357.6 201.86 357.508 201.822 357.438 201.749 cv
354.821 198.975 li
354.687 198.833 354.692 198.61 354.833 198.477 cv
354.975 198.342 355.197 198.349 355.332 198.49 cv
357.949 201.265 li
358.083 201.406 358.078 201.63 357.937 201.763 cv
357.694 201.86 li
cp
f
354.922 201.116 mo
354.75 201.116 354.6 200.991 354.574 200.817 cv
354.545 200.624 354.677 200.445 354.87 200.415 cv
356.681 200.141 li
356.87 200.11 357.054 200.244 357.083 200.437 cv
357.113 200.629 356.979 200.809 356.787 200.838 cv
354.975 201.113 li
354.922 201.116 li
cp
f
364.725 198.245 mo
364.55 198.245 364.398 198.115 364.375 197.938 cv
364.059 195.452 li
364.034 195.259 364.171 195.082 364.364 195.058 cv
364.563 195.031 364.734 195.17 364.758 195.363 cv
365.074 197.848 li
365.1 198.041 364.962 198.218 364.771 198.242 cv
364.725 198.245 li
cp
f
370.064 197.777 mo
369.892 197.777 369.741 197.651 369.716 197.475 cv
369.358 195.034 li
369.329 194.842 369.462 194.663 369.655 194.635 cv
369.842 194.6 370.026 194.739 370.054 194.933 cv
370.412 197.373 li
370.442 197.566 370.308 197.744 370.115 197.773 cv
370.064 197.777 li
cp
f
362.964 194.114 mo
362.804 194.074 li
362.63 193.986 362.563 193.773 362.651 193.6 cv
363.321 192.298 364.962 192.639 365.032 192.653 cv
365.222 192.694 365.342 192.88 365.301 193.071 cv
365.262 193.261 365.08 193.38 364.884 193.342 cv
364.835 193.331 363.699 193.104 363.279 193.922 cv
363.216 194.043 363.092 194.114 362.964 194.114 cv
cp
f
368.171 193.004 mo
367.971 192.943 li
367.812 192.832 367.771 192.614 367.879 192.452 cv
368.151 192.056 368.517 191.819 368.935 191.767 cv
369.798 191.661 370.589 192.358 370.622 192.388 cv
370.768 192.517 370.782 192.739 370.655 192.884 cv
370.523 193.03 370.301 193.044 370.157 192.916 cv
369.991 192.772 369.476 192.401 369.021 192.467 cv
368.802 192.494 368.62 192.619 368.462 192.851 cv
368.393 192.95 368.283 193.004 368.171 193.004 cv
cp
f
358.104 197.294 mo
358.104 197.294 358.552 199.549 359.822 198.733 cv
361.091 197.917 358.104 193.761 358.104 193.761 cv
358.104 193.761 361.611 194.979 363.792 192.108 cv
365.973 189.237 364.957 187.429 364.957 187.429 cv
369.837 189.992 li
369.837 189.992 370.86 184.216 369.14 183.11 cv
367.42 182.004 364.524 183.11 364.524 183.11 cv
364.524 183.11 364.7 180.623 359.822 181.223 cv
354.943 181.822 355.076 186.886 355.076 186.886 cv
355.076 186.886 351.868 186.743 350.783 189.617 cv
349.698 192.491 351.688 194.711 351.688 194.711 cv
351.688 194.711 349.412 195.224 350.459 197.203 cv
351.507 199.183 352.859 200.12 352.859 200.12 cv
352.859 200.12 353.49 195.947 358.104 197.294 cv
cp
f
365.385 202.462 mo
365.722 202.891 366.324 203.448 367.26 203.629 cv
368.217 203.81 369.012 203.159 369.454 202.665 cv
365.385 202.462 li
cp
367.609 204.367 mo
367.454 204.367 367.293 204.353 367.127 204.321 cv
365.207 203.951 364.437 202.292 364.405 202.222 cv
364.354 202.11 364.365 201.98 364.434 201.878 cv
364.502 201.777 364.618 201.703 364.742 201.725 cv
370.157 201.995 li
370.281 202.001 370.392 202.072 370.449 202.181 cv
370.508 202.29 370.505 202.422 370.442 202.529 cv
370.392 202.61 369.314 204.367 367.609 204.367 cv
cp
f
333.771 245.476 mo
333.771 245.476 329.907 256.75 342.656 261.226 cv
355.406 265.701 368.17 263.242 368.17 263.242 cv
371.276 254.502 li
352.859 248.595 li
333.771 245.476 li
cp
.956863 .517647 .384314 rgb
f
367.075 297.818 mo
366.889 297.818 366.734 297.672 366.725 297.485 cv
365.096 268.1 li
365.087 267.95 365.175 267.813 365.313 267.755 cv
376.146 263.234 li
376.324 263.158 376.531 263.243 376.606 263.423 cv
376.681 263.603 376.596 263.809 376.416 263.884 cv
365.813 268.31 li
367.427 297.446 li
367.438 297.64 367.289 297.806 367.096 297.817 cv
367.075 297.818 li
cp
.360784 .411765 .647059 rgb
f
388.085 340.836 mo
388.085 340.836 389.141 334.253 392.29 333.248 cv
395.44 332.243 396.864 337.659 396.864 337.659 cv
396.864 337.659 414.463 340.178 415.078 340.295 cv
415.693 340.411 422.109 344.009 419.728 347.498 cv
417.346 350.988 386.068 360.409 383.897 360.01 cv
381.726 359.611 377.352 343.516 377.948 342.647 cv
378.546 341.778 388.085 340.836 388.085 340.836 cv
cp
.639216 .482353 .564706 rgb
f
348.794 342.403 mo
348.794 342.403 354.412 336.039 357.695 336.435 cv
360.977 336.829 361.272 343.307 361.272 343.307 cv
361.272 343.307 378.304 353.273 378.816 353.634 cv
379.326 353.996 383.666 359.935 380.05 362.119 cv
376.433 364.303 346.082 361.39 344.274 360.124 cv
342.465 358.858 343.369 341.136 344.274 340.594 cv
345.178 340.051 348.794 342.403 348.794 342.403 cv
cp
f
366.502 213.95 mo
362.197 213.95 358.679 211.96 358.501 211.859 cv
358.333 211.761 358.275 211.546 358.371 211.377 cv
358.468 211.208 358.683 211.152 358.854 211.247 cv
358.904 211.277 363.938 214.116 369.134 212.965 cv
369.322 212.924 369.513 213.043 369.554 213.233 cv
369.596 213.422 369.477 213.611 369.287 213.653 cv
368.339 213.863 367.405 213.95 366.502 213.95 cv
cp
1 1 1 rgb
f
379.096 215.105 mo
391.247 230.936 li
381.476 243.731 li
379.096 215.105 li
cp
.360784 .411765 .647059 rgb
f
350.906 212.573 mo
350.906 212.573 353.554 219.182 354.05 228.224 cv
354.546 237.265 352.859 248.595 352.859 248.595 cv
357.097 249.927 li
357.097 249.927 359.012 239.978 358.678 228.043 cv
358.344 216.108 355.076 211.222 355.076 211.222 cv
350.906 212.573 li
cp
.25098 .313726 .498039 rgb
f
376.433 248.764 mo
372.201 247.447 li
372.201 247.447 373.894 236.103 373.389 227.07 cv
372.983 219.518 370.492 212.715 369.695 210.681 cv
371.664 211.023 373.731 211.625 375.603 212.585 cv
376.579 215.14 377.816 219.746 378.028 226.891 cv
378.353 238.821 376.433 248.764 376.433 248.764 cv
cp
f
396.235 252.847 mo
361.607 252.847 li
360.875 252.847 360.281 252.253 360.281 251.521 cv
360.281 248.332 li
360.281 247.6 360.875 247.007 361.607 247.007 cv
396.235 247.007 li
396.967 247.007 397.56 247.6 397.56 248.332 cv
397.56 251.521 li
397.56 252.253 396.967 252.847 396.235 252.847 cv
cp
.486275 .631373 .847059 rgb
f
394.174 241.286 mo
366.445 241.286 li
365.712 241.286 365.118 240.693 365.118 239.96 cv
365.118 233.538 li
365.118 232.807 365.712 232.213 366.445 232.213 cv
394.174 232.213 li
394.906 232.213 395.5 232.807 395.5 233.538 cv
395.5 239.96 li
395.5 240.693 394.906 241.286 394.174 241.286 cv
cp
f
394.731 252.847 mo
360.104 252.847 li
359.371 252.847 358.778 252.253 358.778 251.521 cv
358.778 248.332 li
358.778 247.6 359.371 247.007 360.104 247.007 cv
394.731 247.007 li
395.463 247.007 396.056 247.6 396.056 248.332 cv
396.056 251.521 li
396.056 252.253 395.463 252.847 394.731 252.847 cv
cp
.572549 .705882 .917647 rgb
f
396.685 247.007 mo
364.435 247.007 li
363.702 247.007 363.11 246.413 363.11 245.681 cv
363.11 242.492 li
363.11 241.76 363.702 241.167 364.435 241.167 cv
396.685 241.167 li
397.417 241.167 398.011 241.76 398.011 242.492 cv
398.011 245.681 li
398.011 246.413 397.417 247.007 396.685 247.007 cv
cp
.937255 .643137 .34902 rgb
f
396.548 258.416 mo
360.606 258.416 li
359.873 258.416 359.28 257.822 359.28 257.091 cv
359.28 253.902 li
359.28 253.17 359.873 252.576 360.606 252.576 cv
396.548 252.576 li
397.28 252.576 397.873 253.17 397.873 253.902 cv
397.873 257.091 li
397.873 257.822 397.28 258.416 396.548 258.416 cv
cp
f
391.139 224.486 mo
368.979 224.486 li
368.247 224.486 367.654 223.892 367.654 223.159 cv
367.654 220.39 li
367.654 219.657 368.247 219.065 368.979 219.065 cv
391.139 219.065 li
391.871 219.065 392.465 219.657 392.465 220.39 cv
392.465 223.159 li
392.465 223.892 391.871 224.486 391.139 224.486 cv
cp
.486275 .631373 .847059 rgb
f
395.181 247.007 mo
362.931 247.007 li
362.199 247.007 361.606 246.413 361.606 245.681 cv
361.606 242.492 li
361.606 241.76 362.199 241.167 362.931 241.167 cv
395.181 241.167 li
395.913 241.167 396.507 241.76 396.507 242.492 cv
396.507 245.681 li
396.507 246.413 395.913 247.007 395.181 247.007 cv
cp
.968627 .701961 .411765 rgb
f
392.671 232.363 mo
368.448 232.363 li
367.717 232.363 367.123 231.769 367.123 231.037 cv
367.123 225.835 li
367.123 225.103 367.717 224.51 368.448 224.51 cv
392.671 224.51 li
393.404 224.51 393.996 225.103 393.996 225.835 cv
393.996 231.037 li
393.996 231.769 393.404 232.363 392.671 232.363 cv
cp
.937255 .643137 .34902 rgb
f
392.671 241.286 mo
364.941 241.286 li
364.208 241.286 363.615 240.693 363.615 239.96 cv
363.615 233.538 li
363.615 232.807 364.208 232.213 364.941 232.213 cv
392.671 232.213 li
393.403 232.213 393.996 232.807 393.996 233.538 cv
393.996 239.96 li
393.996 240.693 393.403 241.286 392.671 241.286 cv
cp
.572549 .705882 .917647 rgb
f
395.044 258.416 mo
359.102 258.416 li
358.369 258.416 357.777 257.822 357.777 257.091 cv
357.777 253.902 li
357.777 253.17 358.369 252.576 359.102 252.576 cv
395.044 252.576 li
395.776 252.576 396.369 253.17 396.369 253.902 cv
396.369 257.091 li
396.369 257.822 395.776 258.416 395.044 258.416 cv
cp
.968627 .701961 .411765 rgb
f
389.635 224.486 mo
367.476 224.486 li
366.743 224.486 366.15 223.892 366.15 223.159 cv
366.15 220.39 li
366.15 219.657 366.743 219.065 367.476 219.065 cv
389.635 219.065 li
390.367 219.065 390.961 219.657 390.961 220.39 cv
390.961 223.159 li
390.961 223.892 390.367 224.486 389.635 224.486 cv
cp
.572549 .705882 .917647 rgb
f
391.167 232.363 mo
366.946 232.363 li
366.213 232.363 365.619 231.769 365.619 231.037 cv
365.619 225.835 li
365.619 225.103 366.213 224.51 366.946 224.51 cv
391.167 224.51 li
391.9 224.51 392.493 225.103 392.493 225.835 cv
392.493 231.037 li
392.493 231.769 391.9 232.363 391.167 232.363 cv
cp
.968627 .701961 .411765 rgb
f
398.499 245.746 mo
398.499 245.746 403.192 247.037 401.38 249.006 cv
399.569 250.975 390.762 250.681 390.242 247.957 cv
389.723 245.234 398.499 245.746 398.499 245.746 cv
cp
.956863 .517647 .384314 rgb
f
398.596 241.721 mo
398.596 241.721 403.288 243.012 401.477 244.981 cv
399.665 246.949 390.859 246.656 390.339 243.932 cv
389.82 241.209 398.596 241.721 398.596 241.721 cv
cp
f
396.296 237.998 mo
397.392 237.813 398.526 237.866 399.563 238.269 cv
400.474 238.622 401.225 239.225 400.583 240.219 cv
399.3 242.209 391.577 243.281 390.713 240.984 cv
390.074 239.285 394.137 238.364 396.296 237.998 cv
cp
f
392.433 242.229 mo
392.241 242.229 392.084 242.076 392.079 241.885 cv
392.074 241.691 392.229 241.529 392.423 241.524 cv
398.587 241.368 li
398.758 241.346 398.944 241.518 398.949 241.712 cv
398.954 241.906 398.8 242.069 398.605 242.073 cv
392.442 242.229 li
392.433 242.229 li
cp
0 0 0 rgb
f
392.433 246.8 mo
392.247 246.8 392.092 246.656 392.08 246.47 cv
392.068 246.276 392.216 246.108 392.409 246.096 cv
398.574 245.705 li
398.783 245.679 398.935 245.841 398.948 246.034 cv
398.96 246.229 398.813 246.397 398.618 246.408 cv
392.454 246.799 li
392.433 246.8 li
cp
f
367.391 262.371 mo
367.391 262.371 365.519 266.863 363.794 264.818 cv
362.069 262.773 363.47 254.074 366.237 253.902 cv
369.004 253.729 367.391 262.371 367.391 262.371 cv
cp
.956863 .517647 .384314 rgb
f
371.372 262.974 mo
371.372 262.974 369.5 267.466 367.775 265.421 cv
366.05 263.376 367.451 254.677 370.218 254.504 cv
372.985 254.331 371.372 262.974 371.372 262.974 cv
cp
f
375.355 261.161 mo
375.4 262.272 375.204 263.39 374.675 264.367 cv
374.209 265.227 373.518 265.896 372.612 265.134 cv
370.799 263.611 370.709 255.815 373.096 255.246 cv
374.861 254.826 375.264 258.974 375.355 261.161 cv
cp
f
367.058 263.419 mo
366.817 263.389 366.683 263.211 366.708 263.019 cv
367.508 257.22 li
367.534 257.028 367.718 256.897 367.906 256.918 cv
368.1 256.946 368.234 257.123 368.208 257.316 cv
367.408 263.114 li
367.383 263.291 367.233 263.419 367.058 263.419 cv
cp
0 0 0 rgb
f
371.692 263.5 mo
371.479 263.489 371.329 263.323 371.339 263.129 cv
371.637 257.518 li
371.646 257.323 371.806 257.153 372.006 257.185 cv
372.2 257.195 372.35 257.361 372.339 257.555 cv
372.042 263.166 li
372.033 263.355 371.877 263.5 371.692 263.5 cv
cp
f
394.03 340.504 mo
393.931 340.504 393.833 340.463 393.764 340.384 cv
393.635 340.238 393.65 340.016 393.796 339.887 cv
396.63 337.395 li
396.776 337.268 397 337.28 397.127 337.427 cv
397.256 337.572 397.241 337.795 397.096 337.924 cv
394.262 340.416 li
394.03 340.504 li
cp
1 1 1 rgb
f
360.697 343.446 mo
357.078 343.446 li
356.883 343.446 356.725 343.287 356.725 343.093 cv
356.725 342.899 356.883 342.74 357.078 342.74 cv
360.697 342.74 li
360.892 342.74 361.05 342.899 361.05 343.093 cv
361.05 343.287 360.892 343.446 360.697 343.446 cv
cp
f
461.385 257.345 mo
483.947 258.069 li
487.952 258.197 491.303 255.054 491.432 251.049 cv
492.414 220.42 li
492.543 216.415 489.401 213.064 485.395 212.936 cv
462.833 212.212 li
458.828 212.083 455.477 215.226 455.348 219.232 cv
454.365 249.86 li
454.238 253.864 457.38 257.216 461.385 257.345 cv
cp
.639216 .482353 .564706 rgb
f
450.968 343.571 mo
450.968 343.571 448.047 307.96 451.837 289.503 cv
455.626 271.046 469.64 293.022 469.64 293.022 cv
469.64 293.022 463.857 335.183 464.736 343.852 cv
465.615 352.521 450.968 343.571 450.968 343.571 cv
cp
.956863 .517647 .384314 rgb
f
466.864 291.919 mo
466.864 291.919 473.885 344.379 474.623 344.732 cv
475.363 345.083 486.989 343.637 486.989 343.637 cv
486.989 291.919 li
466.864 291.919 li
cp
f
453.49 256.065 mo
453.49 256.065 445.643 301.28 446.505 302.343 cv
447.366 303.406 458.959 306.767 469.99 306.598 cv
481.021 306.429 492.584 305.689 493.308 305.263 cv
494.031 304.838 489.593 264.816 484.53 252.305 cv
479.466 239.794 453.49 256.065 453.49 256.065 cv
cp
.360784 .411765 .647059 rgb
f
453.743 250.222 mo
452.63 256.005 li
452.63 256.005 463.952 257.917 473.739 256.851 cv
483.524 255.783 487.127 253.926 487.127 253.926 cv
490.412 229.823 li
481.614 214.358 li
475.125 212.534 li
466.944 212.195 li
457.224 215.646 li
442.618 231.237 li
449.334 247.564 li
453.743 250.222 li
cp
.572549 .705882 .917647 rgb
f
459.985 214.354 mo
459.985 214.354 458.455 217.776 457.604 220.685 cv
456.751 223.593 456.139 227.489 456.139 227.489 cv
462.153 227.489 li
462.238 226.551 li
462.624 222.289 463.508 218.088 464.87 214.031 cv
465.289 212.783 li
459.985 214.354 li
cp
.639216 .482353 .564706 rgb
f
475.125 212.534 mo
475.125 212.534 474.493 218.802 475.578 229.219 cv
476.595 238.983 479.813 245.827 479.813 245.827 cv
483.723 238.487 li
483.723 238.487 482.179 230.022 481.184 223.782 cv
480.19 217.544 480.437 213.992 480.437 213.992 cv
480.437 213.992 476.21 212.406 475.125 212.534 cv
cp
f
459.437 244.369 mo
463.278 222.597 li
479.406 222 li
476.615 245.012 li
459.437 244.369 li
cp
.937255 .643137 .34902 rgb
f
477.571 222.069 mo
474.781 245.081 li
468.459 244.842 li
461.17 244.575 li
457.604 244.44 li
457.796 243.36 li
459.173 235.557 li
460.806 226.292 li
461.448 222.664 li
477.571 222.069 li
cp
.968627 .701961 .411765 rgb
f
451.229 241.695 mo
454.744 226.517 li
468.543 226.007 li
465.313 244.273 li
451.229 241.695 li
cp
.407843 .462745 .666667 rgb
f
466.434 226.084 mo
465.086 233.716 li
463.208 244.352 li
460.992 243.947 li
457.796 243.36 li
449.118 241.769 li
452.635 226.594 li
466.434 226.084 li
cp
.25098 .313726 .498039 rgb
f
451.703 239.483 mo
451.703 239.483 456.86 238.754 457.955 238.714 cv
459.051 238.674 460.62 241.191 460.62 241.191 cv
463.938 242.017 li
460.575 252.713 li
460.575 252.713 452.805 254.016 449.439 250.381 cv
448.176 249.017 451.703 239.483 451.703 239.483 cv
cp
.878431 .439216 .352941 rgb
f
459.985 214.358 mo
459.985 214.358 454.24 216.007 447.526 221.924 cv
437.806 230.49 432.992 238.502 436.192 246.09 cv
439.102 252.989 451.262 253.057 451.262 253.057 cv
454.469 238.048 li
444.409 231.993 li
457.269 218.855 li
459.985 214.358 li
cp
.572549 .705882 .917647 rgb
f
473.317 241.192 mo
473.317 241.192 470.203 239.674 468.702 239.34 cv
467.281 239.024 466.222 239.132 466.222 239.132 cv
465.831 241.341 li
465.831 241.341 460.985 242.588 457.605 244.437 cv
454.225 246.286 454.908 247.828 454.908 247.828 cv
454.908 247.828 452.77 249.318 453.743 250.222 cv
454.717 251.127 458.282 250.055 458.282 250.055 cv
458.282 250.055 453.807 251.945 455.723 252.892 cv
457.639 253.84 461.766 253.374 461.766 253.374 cv
461.766 253.374 470.834 254.607 473.693 251.366 cv
476.551 248.125 473.317 241.192 473.317 241.192 cv
cp
.956863 .517647 .384314 rgb
f
480.437 213.992 mo
480.437 213.992 489.729 215.781 498.725 228.032 cv
508.281 241.047 502.94 251.775 489.65 254.774 cv
476.359 257.773 469.257 254.352 469.257 254.352 cv
471.87 238.658 li
478.697 237.388 li
485.328 236.022 li
482.179 222.653 li
480.437 213.992 li
cp
.572549 .705882 .917647 rgb
f
460.62 241.543 mo
460.567 241.539 li
455.602 240.782 li
455.409 240.753 455.277 240.573 455.306 240.381 cv
455.335 240.189 455.519 240.054 455.708 240.085 cv
460.672 240.842 li
460.865 240.871 460.997 241.051 460.968 241.243 cv
460.942 241.418 460.791 241.543 460.62 241.543 cv
cp
0 0 0 rgb
f
465.83 241.694 mo
465.683 241.694 465.546 241.601 465.496 241.453 cv
465.434 241.269 465.533 241.069 465.718 241.007 cv
468.434 240.094 li
468.618 240.031 468.818 240.131 468.88 240.316 cv
468.943 240.5 468.843 240.7 468.658 240.762 cv
465.943 241.675 li
465.83 241.694 li
cp
f
455.109 247.924 mo
454.959 247.924 454.822 247.83 454.773 247.682 cv
454.712 247.497 454.813 247.298 454.997 247.237 cv
461.914 244.957 li
462.105 244.898 462.3 244.997 462.36 245.182 cv
462.421 245.366 462.321 245.566 462.135 245.627 cv
455.218 247.906 li
455.109 247.924 li
cp
f
457.817 250.533 mo
457.67 250.533 457.531 250.44 457.484 250.292 cv
457.421 250.108 457.521 249.908 457.705 249.847 cv
462.041 248.402 li
462.227 248.339 462.426 248.44 462.488 248.624 cv
462.548 248.809 462.449 249.008 462.264 249.07 cv
457.929 250.515 li
457.817 250.533 li
cp
f
478.697 237.74 mo
478.537 237.74 478.392 237.631 478.354 237.469 cv
478.309 237.28 478.426 237.09 478.616 237.045 cv
478.708 237.023 487.922 234.853 493.296 234.654 cv
493.477 234.64 493.654 234.799 493.66 234.993 cv
493.667 235.188 493.517 235.351 493.321 235.359 cv
488.018 235.555 478.87 237.709 478.779 237.731 cv
478.697 237.74 li
cp
1 1 1 rgb
f
491.413 231.897 mo
490.454 231.897 488.883 233.393 487.658 234.857 cv
490.018 233.668 491.852 232.442 491.824 232.02 cv
491.736 231.967 li
491.639 231.919 491.531 231.897 491.413 231.897 cv
cp
486.458 236.175 mo
486.356 236.175 486.254 236.13 486.187 236.046 cv
486.084 235.922 486.079 235.746 486.172 235.616 cv
486.563 235.074 490.034 230.345 492.045 231.333 cv
492.471 231.54 492.531 231.859 492.53 232.03 cv
492.513 233.345 487.991 235.511 486.605 236.143 cv
486.458 236.175 li
cp
f
450.638 236.094 mo
450.393 235.995 li
450.363 235.964 447.163 232.907 444.341 232.338 cv
444.15 232.299 444.026 232.114 444.064 231.923 cv
444.104 231.733 444.281 231.605 444.479 231.647 cv
447.506 232.257 450.746 235.356 450.883 235.488 cv
451.023 235.623 451.027 235.846 450.892 235.986 cv
450.823 236.058 450.731 236.094 450.638 236.094 cv
cp
f
446.008 229.968 mo
445.896 230.06 445.866 230.13 445.864 230.236 cv
445.856 230.682 446.35 231.405 446.897 232.039 cv
446.611 230.91 446.245 230.023 446.008 229.968 cv
cp
447.497 233.523 mo
447.259 233.429 li
447.041 233.23 445.137 231.44 445.159 230.223 cv
445.164 229.917 445.285 229.656 445.508 229.465 cv
445.734 229.271 445.996 229.213 446.249 229.305 cv
447.183 229.642 447.707 232.303 447.846 233.111 cv
447.87 233.259 447.798 233.407 447.666 233.48 cv
447.497 233.523 li
cp
f
455.371 212.025 mo
455.371 212.025 458.544 194.758 463.467 190.261 cv
468.39 185.763 477.968 192.034 477.968 192.034 cv
477.968 192.034 481.139 194.695 482.224 200.055 cv
483.309 205.415 483.723 212.756 483.723 212.756 cv
455.371 212.025 li
cp
0 0 0 rgb
f
474.695 206.795 mo
474.937 214.21 li
474.937 214.21 473.669 216.385 469.343 216.879 cv
466.12 217.247 465.042 215.621 465.042 215.621 cv
465.614 209.108 li
473.39 207.129 li
474.695 206.795 li
cp
.956863 .517647 .384314 rgb
f
473.39 207.129 mo
473.378 207.331 473.309 207.573 473.198 207.851 cv
471.659 211.61 467.15 212.556 465.289 212.783 cv
465.614 209.108 li
473.39 207.129 li
cp
0 0 0 rgb
f
463.408 192.26 mo
463.408 192.26 459.821 201.684 461.524 206.799 cv
463.226 211.914 467.91 210.87 470.689 209.732 cv
473.467 208.593 474.696 206.797 474.696 206.797 cv
474.696 206.797 477.379 207.565 479.027 205.025 cv
480.675 202.485 479.451 199.717 477.913 199.144 cv
476.374 198.571 474.634 199.745 474.634 199.745 cv
475.909 196.995 li
475.909 196.995 469.342 183.649 463.408 192.26 cv
cp
.956863 .517647 .384314 rgb
f
466.377 206.113 mo
466.033 206.113 465.812 206.035 465.788 206.027 cv
465.605 205.96 465.512 205.758 465.577 205.575 cv
465.644 205.393 465.843 205.298 466.026 205.364 cv
466.074 205.377 467.058 205.689 468.093 204.458 cv
468.217 204.311 468.44 204.29 468.591 204.416 cv
468.739 204.542 468.758 204.764 468.633 204.913 cv
467.788 205.913 466.929 206.113 466.377 206.113 cv
cp
0 0 0 rgb
f
475.125 203.736 mo
475.03 203.736 474.935 203.697 474.866 203.621 cv
474.734 203.478 474.743 203.254 474.887 203.123 cv
477.73 200.522 li
477.875 200.389 478.097 200.402 478.229 200.543 cv
478.36 200.687 478.35 200.91 478.207 201.041 cv
475.364 203.643 li
475.125 203.736 li
cp
f
478.109 203.564 mo
477.971 203.535 li
476.06 202.727 li
475.881 202.652 475.797 202.445 475.874 202.265 cv
475.949 202.086 476.156 202 476.335 202.078 cv
478.245 202.887 li
478.425 202.962 478.508 203.169 478.433 203.349 cv
478.375 203.483 478.245 203.564 478.109 203.564 cv
cp
f
474.634 199.745 mo
474.634 199.745 471.376 199.58 469.199 197.015 cv
467.023 194.449 465.93 191.771 465.93 191.771 cv
465.93 191.771 464.571 192.067 463.747 193.2 cv
463.142 194.034 462.442 195.238 462.442 195.238 cv
462.442 195.238 462.184 191.504 463.974 189.577 cv
465.765 187.652 467.409 188.208 467.409 188.208 cv
467.409 188.208 471.421 185.658 475.801 189.172 cv
480.181 192.686 478.542 199.519 478.542 199.519 cv
478.542 199.519 476.374 198.777 474.634 199.745 cv
cp
f
464.05 203.645 mo
463.9 203.645 463.76 203.548 463.713 203.397 cv
463.052 201.259 464.655 199.847 464.723 199.788 cv
464.87 199.66 465.093 199.679 465.219 199.824 cv
465.346 199.971 465.33 200.194 465.184 200.322 cv
465.13 200.368 463.865 201.499 464.387 203.188 cv
464.446 203.374 464.341 203.572 464.155 203.629 cv
464.05 203.645 li
cp
f
462.46 200.407 mo
462.408 200.404 li
462.217 200.375 462.083 200.197 462.113 200.003 cv
462.447 197.733 li
462.073 197.333 li
461.939 197.191 461.947 196.968 462.088 196.835 cv
462.231 196.7 462.454 196.708 462.587 196.851 cv
463.076 197.374 li
463.151 197.453 463.184 197.561 463.168 197.667 cv
462.809 200.107 li
462.783 200.281 462.633 200.407 462.46 200.407 cv
cp
f
467.8 200.876 mo
467.563 200.849 467.425 200.672 467.449 200.479 cv
467.749 198.142 li
467.271 197.547 li
467.15 197.395 467.175 197.173 467.325 197.051 cv
467.479 196.93 467.699 196.954 467.822 197.106 cv
468.392 197.818 li
468.451 197.893 468.479 197.989 468.467 198.083 cv
468.15 200.569 li
468.126 200.746 467.975 200.876 467.8 200.876 cv
cp
f
462.329 195.986 mo
462.166 195.986 462.021 195.872 461.985 195.707 cv
461.944 195.517 462.065 195.329 462.255 195.288 cv
463.834 194.947 li
464.031 194.908 464.212 195.029 464.254 195.218 cv
464.295 195.408 464.173 195.596 463.984 195.637 cv
462.405 195.978 li
462.329 195.986 li
cp
f
469.339 196.322 mo
469.262 196.314 li
466.238 195.636 li
466.048 195.594 465.929 195.406 465.971 195.215 cv
466.013 195.026 466.199 194.907 466.392 194.948 cv
469.416 195.626 li
469.606 195.668 469.726 195.857 469.683 196.047 cv
469.647 196.211 469.501 196.322 469.339 196.322 cv
cp
f
471.151 357.732 mo
471.151 359.085 471.606 360.635 472.537 361.025 cv
473.469 361.414 481.009 362.227 487.607 361.653 cv
493.923 361.101 495.234 360.635 495.699 360.061 cv
495.927 359.768 495.483 358.413 494.974 357.103 cv
494.887 356.897 li
494.627 356.237 494.357 355.597 494.161 355.142 cv
493.966 354.708 493.728 354.297 493.447 353.896 cv
492.764 352.953 491.409 351.003 491.063 349.996 cv
490.608 348.653 488.778 345.161 488.312 343.796 cv
487.846 342.453 486.708 342.171 486.708 342.171 cv
486.708 342.171 474.856 341.871 473.924 342.651 cv
473.003 343.42 472.537 349.812 472.537 350.777 cv
472.537 351.74 li
472.537 352.64 471.92 354.416 471.519 355.89 cv
471.41 356.258 471.324 356.605 471.259 356.919 cv
471.194 357.233 471.151 357.504 471.151 357.732 cv
cp
.639216 .482353 .564706 rgb
f
426.647 359.754 mo
427.513 360.112 464.38 361.119 465.236 359.754 cv
465.495 359.342 465.68 357.945 465.799 356.19 cv
465.906 354.736 465.975 353.032 466.02 351.435 cv
466.099 348.599 465.831 345.774 465.351 342.978 cv
465.319 342.79 465.297 342.621 465.289 342.482 cv
465.245 341.518 449.894 341.158 449.894 341.158 cv
437.014 351.315 li
437.014 351.315 433.851 350.751 430.395 351.315 cv
428.564 351.607 427.383 353.85 426.798 355.962 cv
426.278 357.836 426.235 359.58 426.647 359.754 cv
cp
f
426.647 359.754 mo
427.513 360.112 464.38 361.119 465.236 359.754 cv
465.495 359.342 465.68 357.945 465.799 356.19 cv
458.789 356.688 441.542 357.63 426.798 355.962 cv
426.278 357.836 426.235 359.58 426.647 359.754 cv
cp
.407843 .713726 .847059 rgb
f
471.151 357.732 mo
471.151 359.085 471.606 360.635 472.537 361.025 cv
473.469 361.414 481.009 362.227 487.607 361.653 cv
493.923 361.101 495.234 360.635 495.699 360.061 cv
495.927 359.768 495.483 358.413 494.974 357.103 cv
489.113 357.547 478.529 357.947 471.519 355.89 cv
471.41 356.258 471.324 356.605 471.259 356.919 cv
471.194 357.233 471.151 357.504 471.151 357.732 cv
cp
f
487.51 349.551 mo
487.42 349.539 li
487.368 349.526 482.315 348.184 479.796 348.617 cv
477.164 349.069 li
477.01 349.092 476.852 349.014 476.785 348.87 cv
476.718 348.727 476.755 348.556 476.876 348.452 cv
477.071 348.286 481.692 344.39 484.486 345.587 cv
484.664 345.664 484.747 345.871 484.671 346.05 cv
484.594 346.23 484.384 346.312 484.208 346.236 cv
482.552 345.526 479.943 347.082 478.459 348.131 cv
479.676 347.922 li
482.352 347.466 487.388 348.8 487.602 348.858 cv
487.789 348.908 487.901 349.102 487.851 349.289 cv
487.808 349.447 487.666 349.551 487.51 349.551 cv
cp
1 .698039 .333333 rgb
f
439.779 349.488 mo
439.6 349.488 439.446 349.353 439.427 349.171 cv
439.408 348.978 439.548 348.804 439.741 348.784 cv
445.646 348.177 li
443.787 345.99 li
443.662 345.842 443.679 345.619 443.828 345.493 cv
443.975 345.366 444.199 345.384 444.324 345.533 cv
446.616 348.231 li
446.7 348.33 446.723 348.469 446.675 348.591 cv
446.625 348.712 446.513 348.796 446.383 348.81 cv
439.814 349.486 li
439.779 349.488 li
cp
f
468.44 217.284 mo
466.457 217.284 465.146 216.603 465.121 216.589 cv
464.95 216.496 464.887 216.283 464.979 216.113 cv
465.069 215.941 465.283 215.875 465.454 215.968 cv
465.634 216.063 469.887 218.248 474.701 213.947 cv
474.844 213.818 475.071 213.83 475.199 213.976 cv
475.329 214.12 475.317 214.343 475.171 214.473 cv
472.676 216.702 470.271 217.284 468.44 217.284 cv
cp
1 1 1 rgb
f
484.53 262.898 mo
484.46 262.891 li
481.323 262.272 478.542 258.966 478.426 258.825 cv
478.301 258.676 478.322 258.453 478.471 258.329 cv
478.621 258.207 478.843 258.224 478.967 258.374 cv
478.995 258.406 481.707 261.628 484.597 262.199 cv
484.787 262.238 484.912 262.422 484.875 262.613 cv
484.842 262.781 484.694 262.898 484.53 262.898 cv
cp
.25098 .313726 .498039 rgb
f
223.046 188.859 mo
223.046 188.859 229.464 186.523 233.464 191.849 cv
237.464 197.174 236.994 220.157 236.994 220.157 cv
219.607 221.1 li
220.635 195.656 li
223.046 188.859 li
cp
0 0 0 rgb
f
206.567 255.934 mo
229.129 256.657 li
233.134 256.786 236.485 253.643 236.614 249.638 cv
237.596 219.01 li
237.725 215.004 234.582 211.653 230.577 211.525 cv
208.015 210.801 li
204.01 210.672 200.658 213.815 200.53 217.821 cv
199.548 248.448 li
199.419 252.453 202.562 255.805 206.567 255.934 cv
cp
.639216 .482353 .564706 rgb
f
184.4 194.254 mo
184.4 194.254 182.019 217.381 192.49 226.78 cv
206.676 239.514 217.88 225.527 217.88 225.527 cv
211.439 215.222 li
211.439 215.222 201.448 210.943 198.387 204.372 cv
195.327 197.801 196.545 193.216 196.545 193.216 cv
184.4 194.254 li
cp
.956863 .517647 .384314 rgb
f
194.303 197.81 mo
194.303 197.81 196.603 196.536 197.513 192.623 cv
198.131 189.967 197.058 184.563 195.725 183.971 cv
194.393 183.379 193.922 187.55 193.922 187.55 cv
193.922 187.55 193.902 180.824 192.488 178.976 cv
191.073 177.128 189.84 179.537 189.84 179.537 cv
189.84 179.537 189.697 176.863 187.968 176.135 cv
186.238 175.407 185.919 178.436 185.919 178.436 cv
185.919 178.436 184.612 175.772 183.096 177.812 cv
181.58 179.852 181.856 186.529 182.75 189.802 cv
183.643 193.074 184.4 194.254 184.4 194.254 cv
194.303 197.81 li
cp
f
193.389 185.759 mo
193.267 185.738 li
193.236 185.726 190.127 184.583 187.086 183.953 cv
186.895 183.914 186.772 183.727 186.812 183.537 cv
186.851 183.346 187.042 183.227 187.228 183.263 cv
190.323 183.904 193.48 185.065 193.511 185.075 cv
193.694 185.144 193.787 185.346 193.719 185.529 cv
193.667 185.671 193.532 185.759 193.389 185.759 cv
cp
0 0 0 rgb
f
191.236 194.314 mo
191.089 194.314 190.952 194.222 190.902 194.075 cv
189.818 190.91 193.525 187.438 193.683 187.291 cv
193.825 187.159 194.049 187.167 194.181 187.311 cv
194.313 187.453 194.304 187.677 194.161 187.809 cv
194.126 187.842 190.634 191.116 191.569 193.847 cv
191.632 194.031 191.534 194.232 191.35 194.294 cv
191.236 194.314 li
cp
f
200.183 205.447 mo
189.856 225.527 li
189.856 225.527 202.212 237.588 209.574 234.299 cv
216.937 231.009 214.791 213.026 214.791 213.026 cv
212.14 212.422 li
209.615 211.848 207.239 210.747 205.168 209.192 cv
200.183 205.447 li
cp
.572549 .705882 .917647 rgb
f
216.974 292.88 mo
216.974 292.88 213.735 304.135 221.304 318.43 cv
229.984 334.82 236 343.098 236 343.098 cv
250.33 339.135 li
250.33 339.135 237.397 305.397 237.173 291.738 cv
236.948 278.078 216.974 292.88 216.974 292.88 cv
cp
.956863 .517647 .384314 rgb
f
201.953 287.471 mo
201.953 287.471 201.292 302.207 203.283 318.43 cv
205.275 334.653 206.738 344.252 206.738 344.252 cv
221.584 344.3 li
221.584 344.3 220.286 308.858 222.706 295.422 cv
225.127 281.977 201.953 287.471 201.953 287.471 cv
cp
f
220.569 316.443 mo
220.454 316.443 220.341 316.386 220.274 316.282 cv
215.145 308.436 214.452 296.776 214.446 296.659 cv
214.435 296.465 214.584 296.299 214.778 296.288 cv
214.975 296.267 215.139 296.426 215.15 296.62 cv
215.156 296.736 215.84 308.211 220.864 315.898 cv
220.97 316.06 220.925 316.279 220.761 316.385 cv
220.569 316.443 li
cp
.917647 .462745 .360784 rgb
f
221.709 357.237 mo
222.772 357.16 223.589 356.209 223.564 355.071 cv
223.469 350.572 223.808 340.475 222.988 340.492 cv
221.941 340.515 211.49 343.607 211.49 343.607 cv
211.49 343.607 211.058 337.379 206.744 338.591 cv
203.434 339.521 199.661 343.568 198.085 345.4 cv
197.585 345.982 196.943 346.393 196.226 346.588 cv
193.142 347.429 184.666 350.155 184.642 354.735 cv
184.612 360.331 186.842 359.645 187.889 359.622 cv
188.787 359.603 214.457 357.758 221.709 357.237 cv
cp
.407843 .713726 .847059 rgb
f
254.823 346.188 mo
255.726 345.62 255.999 344.398 255.443 343.404 cv
253.246 339.477 248.802 330.405 248.085 330.806 cv
247.171 331.318 239.399 338.957 239.399 338.957 cv
239.399 338.957 236.091 333.662 232.852 336.759 cv
230.367 339.135 228.938 344.479 228.407 346.837 cv
228.24 347.586 227.866 348.251 227.324 348.76 cv
224.997 350.951 218.796 357.34 220.926 361.394 cv
223.529 366.349 225.175 364.695 226.088 364.183 cv
226.872 363.743 248.666 350.056 254.823 346.188 cv
cp
f
202.614 244.792 mo
202.614 244.792 193.84 294.512 194.702 295.576 cv
195.564 296.64 209.604 297.208 220.635 297.038 cv
231.665 296.869 241.709 294.416 242.432 293.99 cv
243.156 293.566 238.109 257.561 231.473 243.706 cv
225.643 231.533 202.614 244.792 202.614 244.792 cv
cp
.25098 .313726 .498039 rgb
f
213.6 213.031 mo
207.793 213.834 li
207.793 213.834 202.612 219.476 202.475 225.757 cv
202.339 232.037 201.186 247.895 201.186 247.895 cv
201.186 247.895 205.693 250.322 214.381 251.226 cv
223.068 252.13 233.464 248.619 233.464 248.619 cv
233.464 248.619 230.182 217.266 230.182 214.631 cv
230.182 212.852 213.6 213.031 213.6 213.031 cv
cp
.572549 .705882 .917647 rgb
f
221.939 206.482 mo
222.181 213.897 li
222.181 213.897 220.913 216.072 216.587 216.566 cv
213.365 216.934 212.287 215.308 212.287 215.308 cv
212.858 208.794 li
220.635 206.816 li
221.939 206.482 li
cp
.956863 .517647 .384314 rgb
f
220.635 206.816 mo
220.622 207.019 220.553 207.26 220.443 207.537 cv
218.904 211.296 214.394 212.242 212.533 212.47 cv
212.858 208.794 li
220.635 206.816 li
cp
0 0 0 rgb
f
210.654 191.947 mo
210.654 191.947 207.065 201.37 208.768 206.486 cv
210.47 211.601 215.155 210.557 217.933 209.418 cv
220.712 208.28 221.94 206.484 221.94 206.484 cv
221.94 206.484 224.624 207.251 226.272 204.711 cv
227.919 202.171 226.696 199.404 225.157 198.83 cv
223.619 198.257 221.879 199.432 221.879 199.432 cv
223.155 196.682 li
223.155 196.682 216.587 183.335 210.654 191.947 cv
cp
.956863 .517647 .384314 rgb
f
213.621 205.8 mo
213.278 205.8 213.056 205.723 213.033 205.714 cv
212.85 205.648 212.756 205.446 212.822 205.263 cv
212.887 205.081 213.089 204.99 213.27 205.05 cv
213.311 205.066 214.299 205.38 215.338 204.145 cv
215.464 203.996 215.686 203.977 215.835 204.103 cv
215.984 204.228 216.003 204.45 215.877 204.6 cv
215.033 205.601 214.172 205.8 213.621 205.8 cv
cp
0 0 0 rgb
f
222.37 203.422 mo
222.275 203.422 222.179 203.383 222.11 203.308 cv
221.978 203.164 221.989 202.941 222.132 202.81 cv
224.975 200.209 li
225.117 200.076 225.34 200.087 225.473 200.231 cv
225.604 200.374 225.594 200.598 225.45 200.729 cv
222.608 203.329 li
222.37 203.422 li
cp
f
225.353 203.25 mo
225.216 203.222 li
223.305 202.413 li
223.126 202.338 223.042 202.131 223.117 201.951 cv
223.194 201.774 223.401 201.687 223.579 201.765 cv
225.49 202.573 li
225.669 202.649 225.753 202.856 225.677 203.035 cv
225.62 203.169 225.49 203.25 225.353 203.25 cv
cp
f
221.879 199.432 mo
221.879 199.432 218.621 199.267 216.444 196.701 cv
214.268 194.136 213.175 191.457 213.175 191.457 cv
213.175 191.457 211.815 191.753 210.992 192.887 cv
210.386 193.722 209.686 194.924 209.686 194.924 cv
209.686 194.924 209.428 191.191 211.219 189.264 cv
213.009 187.338 214.654 187.895 214.654 187.895 cv
214.654 187.895 218.666 185.345 223.046 188.859 cv
227.425 192.372 225.786 199.206 225.786 199.206 cv
225.786 199.206 223.619 198.463 221.879 199.432 cv
cp
f
211.295 203.331 mo
211.145 203.331 211.005 203.235 210.958 203.083 cv
210.298 200.947 211.899 199.533 211.968 199.475 cv
212.116 199.347 212.337 199.364 212.464 199.511 cv
212.591 199.657 212.575 199.88 212.429 200.007 cv
212.375 200.055 211.11 201.187 211.632 202.874 cv
211.689 203.061 211.585 203.258 211.399 203.316 cv
211.295 203.331 li
cp
f
209.706 200.094 mo
209.655 200.09 li
209.462 200.062 209.329 199.883 209.357 199.69 cv
209.691 197.419 li
209.317 197.02 li
209.184 196.877 209.192 196.655 209.334 196.522 cv
209.475 196.386 209.698 196.395 209.832 196.537 cv
210.322 197.061 li
210.395 197.14 210.429 197.247 210.413 197.354 cv
210.054 199.793 li
210.029 199.968 209.878 200.094 209.706 200.094 cv
cp
f
215.045 200.563 mo
214.807 200.535 214.671 200.359 214.695 200.165 cv
214.993 197.829 li
214.516 197.233 li
214.394 197.081 214.419 196.86 214.571 196.738 cv
214.723 196.617 214.945 196.64 215.067 196.793 cv
215.637 197.506 li
215.697 197.58 215.723 197.676 215.711 197.771 cv
215.394 200.255 li
215.372 200.433 215.22 200.563 215.045 200.563 cv
cp
f
209.574 195.672 mo
209.412 195.672 209.265 195.559 209.23 195.394 cv
209.189 195.203 209.31 195.016 209.5 194.975 cv
211.079 194.634 li
211.269 194.598 211.457 194.714 211.498 194.905 cv
211.539 195.095 211.418 195.282 211.228 195.323 cv
209.649 195.664 li
209.574 195.672 li
cp
f
216.585 196.009 mo
216.507 196 li
213.483 195.322 li
213.293 195.281 213.174 195.092 213.217 194.902 cv
213.259 194.711 213.448 194.591 213.637 194.635 cv
216.661 195.313 li
216.851 195.355 216.971 195.543 216.928 195.734 cv
216.891 195.898 216.746 196.009 216.585 196.009 cv
cp
f
231.762 258.004 mo
227.215 258.004 225.771 254.199 225.756 254.156 cv
225.689 253.973 225.783 253.772 225.966 253.705 cv
226.15 253.641 226.35 253.732 226.418 253.914 cv
226.481 254.088 228.048 258.161 233.397 257.136 cv
233.59 257.093 233.773 257.224 233.81 257.415 cv
233.846 257.607 233.721 257.791 233.53 257.827 cv
232.895 257.949 232.306 258.004 231.762 258.004 cv
cp
1 1 1 rgb
f
200.418 235.317 mo
200.418 235.317 199.635 231.558 202.01 223.4 cv
203.893 216.932 208.468 211.167 208.468 211.167 cv
208.468 211.167 208.755 211.37 210.065 211.167 cv
211.676 210.918 212.533 211.432 212.533 211.432 cv
212.533 211.432 203.81 227.833 202.019 235.317 cv
201.827 236.121 200.418 235.317 200.418 235.317 cv
cp
.639216 .482353 .564706 rgb
f
233.51 241.411 mo
227.513 239.973 225.353 239.815 222.726 228.564 cv
220.995 221.151 222.312 211.551 222.312 211.551 cv
222.312 211.551 224.158 211.821 225.408 212.261 cv
226.658 212.7 226.658 212.7 226.658 212.7 cv
226.658 212.7 226.651 232.2 233.575 238.564 cv
236.818 241.544 235.844 241.972 233.51 241.411 cv
cp
f
229.32 249.478 mo
229.32 249.478 241.692 253.888 247.458 249.5 cv
257.769 241.653 242.502 228.185 242.502 228.185 cv
231.363 241.032 li
229.32 249.478 li
cp
.956863 .517647 .384314 rgb
f
235.386 239.84 mo
235.386 239.84 232.702 237.192 231.25 236.04 cv
229.798 234.888 222.753 235.856 222.753 235.856 cv
222.753 235.856 217.696 236.577 218.446 238.143 cv
219.196 239.708 221.426 239.633 221.919 240.171 cv
222.411 240.71 219.097 245.531 219.961 246.549 cv
221.347 248.184 227.468 250.019 230.793 249.364 cv
230.893 249.344 li
234.995 248.478 237.134 243.884 235.47 240.035 cv
235.386 239.84 li
cp
f
224.275 241.163 mo
224.183 241.151 li
221.826 240.511 li
221.638 240.46 221.528 240.267 221.578 240.078 cv
221.63 239.891 221.821 239.778 222.011 239.831 cv
224.367 240.471 li
224.555 240.522 224.666 240.715 224.615 240.904 cv
224.573 241.06 224.43 241.163 224.275 241.163 cv
cp
0 0 0 rgb
f
228.469 236.894 mo
228.347 236.871 li
225.691 235.884 li
225.508 235.817 225.415 235.614 225.483 235.431 cv
225.55 235.248 225.755 235.153 225.936 235.224 cv
228.592 236.211 li
228.775 236.279 228.867 236.482 228.8 236.664 cv
228.747 236.806 228.613 236.894 228.469 236.894 cv
cp
f
229.32 214.004 mo
229.32 214.004 236.211 215.658 240.973 221.93 cv
244.588 226.69 247.458 231.714 247.458 231.714 cv
234.139 239.105 li
232.002 237.105 li
229.32 214.004 li
cp
.572549 .705882 .917647 rgb
f
212.362 215.842 mo
211.844 216.691 211.271 217.959 211.488 218.6 cv
211.777 218.815 213.395 218.028 215.068 216.906 cv
213.708 216.739 212.81 216.19 212.362 215.842 cv
cp
216.572 216.923 mo
217.456 217.849 219.081 219.304 220.121 219.224 cv
220.908 219.149 221.494 216.821 221.737 214.831 cv
220.965 215.481 219.553 216.394 217.391 216.807 cv
217.107 216.862 216.833 216.9 216.572 216.923 cv
cp
220.031 219.933 mo
218.507 219.933 216.546 217.944 215.873 217.208 cv
214.797 217.963 212.293 219.61 211.287 219.282 cv
211.061 219.21 210.895 219.048 210.82 218.826 cv
210.379 217.522 211.83 215.352 211.997 215.109 cv
212.057 215.021 212.155 214.965 212.261 214.957 cv
212.365 214.944 212.472 214.989 212.545 215.068 cv
212.609 215.135 214.132 216.712 217.259 216.115 cv
220.449 215.504 221.889 213.698 221.903 213.681 cv
221.998 213.559 222.163 213.512 222.307 213.568 cv
222.452 213.623 222.544 213.767 222.533 213.921 cv
222.466 214.893 222.037 219.748 220.188 219.925 cv
220.031 219.933 li
cp
.639216 .482353 .564706 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2203.w037.n003.234B.p1.234-temp_01.eps)
%%CreationDate: 3/7/2022 2:34 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2M/o07Uera".M4b-"s0k0U0An-tA`%>`J*n*HV6j1AiREU<`CVT16Fh29d[%0bmEQAOieRtp]F_X!\%PonpB!5(623&'h
%5F40\R9;@0,NIF&Al3dPpO=tT05<RWk?O^Nm[H70l8db/D(;^M/5,S3-`=KjlBRg'hHALpDRZ+#YgY$ZlcjTc3E,hn1bp#d0g,gu
%n&'Ibq+%;Y%k=JV-bj78P\]rrgh`Sdh2IQH(hat0jYn3[71J1]K!.$]oj0N2VYX_Dm>RW\pka@5?Zs>)QNg0tl57poo0RIOb8H<>
%S,9]/*nNI/G0m?K)kZ:j1r&0DVn6@fO9a8P[6su=dDJX,4:6E-Y)F^V01?tpo,0BiOP+@Ldc"@>FenVYRefgol!=dSr`d=j-]24-
%K[3--bZN<>p3$aj(fJ/s16tXq%95^/ciG814@m]T??k&$#MkJ5CRTRpc7Bm&7W6C%;.61/(L/66gR_tf(+mkY)&_$]F-^]*)15A:
%q]$1HW.f^PB3p6W2/Fd0kM+hKg0[6Ea3et"W>c^Je't^p?9N,>C"0^NGn.`>+id'Y)V0V4Wf;$^!.g>4KYLB@]qBcnG):j@ocC':
%SFPTF2LB*&_9]@AM&Q!s[T[*LYIVuS?*n[Ejq2eV7aA5[.q@Z<N:&bq1rH^Fb./RANV[5_Wn,Q3)N),a`O&?E\^di'f,Dhj]&r0l
%gF$ajC.Rd/o6.7ik??KYGk-VOaE`W/+2-1FBcakAYS!S')[F?AIS3)GN@i]$hF[2&YS#A=Ns<!f1rIZIZj7SHTGnGEpM!___ETi1
%T3Yc$)Z;Hdr,j"WomQ`i(*fblinZH]e26^F2!&G^bgiPYj.Me"i1&c"R,aj,j-7_aUV;dE^5k$5rT!1WO(,ha@ebVk-rqmn=L![^
%`?LlfM^VLVj(Z'j3*a.%7Y,S_.`n>pa>+t(;kB^uo\;:&3o3[AGi:<5!Nuc5Gm:)6(M/+2r\EohF@^!$KtmBeV!o0pa^dul5RMuY
%GC0B-GbJ3,;],Un!B'dDR;s1LLe9dSR;&'^R4A-"We.o,+N'Pn8cLpJLf@4`q1iFp&V&2m&5k3KB8U['J7?;KU9mUR<!JBXMf1jW
%p],fohuU]%'EaBj/&W-FOi`k#T[/E1Gjl:m7AQ+jb1rbZ9O9P7K"W;BK9r9'cdHu)2CT:;6Q%!`nL+t0l@QQ/#*/J:@`%HH;<C:s
%j"JOT6)kuGH*i`FqP4Y\oSB%_VMY).#;7VQ9G&k>Lpf)91-V+Qkuf?o#9OO)_G>oI@T!0R]JLbWje!I(/6(SETtO-]1f<Cb_TMi-
%06O4>[!MW8/=N[>3Y5&Iej,i@\U'm;U6XW6Fu7g!C1'`_FE7'RPXNEKL)fk;%80],fD$HEQ)N3_5JrRQrHJ'-[M&W+^WSjADVG6X
%^WSjnQ1+Zqq<*%oh=KX_4nUJ#QUh!uq,\ucp\qf&U["\=JGSa*Dfo'opYY))(B7<R*]1fBTs&j)^<&HU1p!E_QV6s#H^;:4pW=eK
%AiT84H/#]SGEolYb%5eI2X0>XH%u)BJa+Qu_om-poY;uD;2JYW9b$)HJeOR-;ST;1[R"7L8rp*Q8*L+U;2i8Zq/RNf1mHs2\J_E-
%<g#+dd2R=^RPXj$:mESW!KQ%.Sje?+<7mP/m!Q@>=`Iqr=$u+^90<a_N<dd`e3I"U^*$gJ\O%I>d)T<r4E]&5nR=1P#,[EY0_L2E
%5h-)]@A$lUV5iWfUXH?='hr#iHh7Bi[8gBrGs>ZS*9?Y#ki[*JN'*3[W[MY^lL@OTafKP>@FEZr5AhBT4E'=e>B(Z<M.*mu*`92:
%O%8CMI8L112T(TrQVSfI.G_hMSn0UNBUAnH&ld$/PudTp,Neg7k*2tLoi>\IkA?.SaBq!_q*(P&33%<@@ooC*auk8UKrOM'%5$k#
%i1<WD*Aak&c"1,qo7:bEA*1a(i1IVrpkD;[ajd"3Vd(V_ETA9+1-As)^:f?JMHEFk9sTc3mtk/eMjgAY$A#kPg3KgAAH4Z"]`TK5
%'ER$qLGc9%(r$\@jU[G)VN$O(YmlSb0@a^W5jO.j'1BNZU^E'T%Ob`KQb"ur6?bc!5f0L2kTHC.,tJ`P]U35aE1S'Z+)F:XAK,n8
%rT(B!N^3t`N"kqOc9q\8;\oY!XW4$uOECkD6eF.AfT:EJKB?E?-5$::1]Cmq;\(dPJY/"W(Dbuh(Z_1#M\siXVRpJ0llstNj#@Ut
%TKLsEZt/c7dA3UL@PM;WUjl]+N.!6k#)U9]-_;qIY0%Cb[Lj%aR!5+6?8V3W9q`XPd7;+4oanB0KFUXY(/V"9U22iiik"c<)g=q?
%W(9('6@]tDXC\+,)'7j2rk*b8V;Fi'6tPoJlE3d.=Mgr8I@Ur>?+3ptIZ2f@)Z=qP8t3K;1^"TAer2*2nQ\H8@(EKA?"J]A@5]fN
%Y2bg1Mb$C`g3H1U;nR's)(:d]c]9U)<Z$c3X:g]l,%dBPplB&0G*5Z$jnZ)'0.K\K?mOG(o^K[K3?%Rjo?4&p-%.YfR<pMXY7ZB)
%9%4QV8!!X:b>\c,L*#P\4PUb0kp]U]nC5$7'!FE#ON]W</%l5P8=r4@7]KFJQRF`2aMj.e'N0'Q.$g\_KqHu;0lI=PM26oT"%>N&
%/L@D9X"55FI"NfolOQ*mN/?^bgYjeCY1/,[M5-C>b6;S3H.*?5UQ8%&1teO8OK%9FQ9db6esT2g0O4d+R+k8^PoM5gi<nun!;^GN
%ok<"**-ca<BcX!)@tb@+>l<[eX"!:^c9P:"<TBH9#d'7VU5Vj#mQqO>8J3XbdVOi(!2H%)LFE='Ol2,@"8Wl#3Q:ADMb?O]kYiW"
%=U<(>l',K.B4f\%&8=7`5,M:XME<6fGYLZiJa0KgMDn+TTaLJSpHSPfA9D4q^n%ulW5qGq.&f?'-b-2&j\+L9ii#E*9!s>pOa0@.
%fS]!?ST>TY2*-BC7SQEIF*U=h@[[o4#RLsg]rXo$:ZAncgTYG:bE)qbnL>I&.`hdmKLQ/&NR*bgG`(.i.uReCTddDio0$#!jp@[E
%U3K'1D[8.l#=lZ^%pR5pJ+R'-=G@]l"K_R7"3&5A%l9!2.TZK,;lg><aG@poE2#'9b-9\(rfAGd)K%*)qug)dAUYlKcPutOV.GY5
%&UP1:m_OG,j)K&N#_n_B`V_%N5'uBTe",k0NJH[Cm:o<4fi0ddVjs+:5Y%e'*\G]cfl4HN2k"qG`d'RR*AR\Aq5e,.-gLct"@f@B
%im0+$C`6'EL6=>eW"aKi_gE`;Y+\4ZA_:<=7pKX@J<X1%nJkcM!R/&"1]XgJE5:/6@bL#s@8W%I#`*/_$!e"lMKAp5M"W=2,GI,[
%?W]W^At8i9$:PeOYdaQ4@MCN.b?u2<So^)5di\[S0.IpPcd)I1!EC,":!k('O=5FV(JW;_&cSRE>o5m`lX1]dL9>V<R7/%-]HXgi
%'VT)p3P[E_]e^,gi,6EBa==L><;/(@W6!,L(D,^LRT/X$2>agE&Hp`3AfM8'E"nF&\%".;YnD-TK?%M3rn/uH1tX]?9JCTD*H]Xp
%MI(N>9>O;7j2?X(F%H8@&AVh&7M=NbMT9HE3[V%eZUCERc>+C7aHrZi[nYjE64`BHEY"Pl@9L+q+Niq&94bpp_rb)>?m1U_@k5T3
%3t!O$7CL6JPaIb\<9K<1CYc=R4`l"dpk3;`'&We]m9R,M^gN9`brdYR30rY]3*=T58-^^%eRF(=,Bo4r8mJ;pb\DZFpUkNqo+HE_
%*Wpg5Up)b%I<\B-T^DZrG=Dgs-f17A@#9L4`B5OpbQCX$AuhLLL1iC^]V=k^?k<oKk@/^5ED2lMXYTJV<\kr<PelK2%El'$'D8,Z
%;E3P<<YbL1((9S(jXtMu@f]KbN$7%d]6ZB6+\\p4/="D@"[Z_J_4+ogJ@iK?Suh$ibWLhnE^Ms^B,@LD/'7`PpjSLl("j,WqXc)(
%lP,5`hJ$@("g*a-Op\6Dj3f<q/`V7u'#h:kDb&J=n<lmo2t9f;+&ua<paRZlX<G$"bSS;PU7i*E:Qc':$ZlGu\@Umk]FGO4)&KBm
%!DuT&kY[(V,<o8UM]!C,?)!CmROmRLdMrrt&b#'?jl6rGA6B+4Qruje<&/Zr&DJnALr0U:P!f_BXU(gM.3aoMKHc#:,55n=$Q33S
%.%J,Z%fQ:+Iafm?>UY2'Cgh[*SGZjF#jOW//B)VQ^,CX(4ps:LStsOiY"LH=Z&c.L^(B@R?OtD;Yk#_fdo9usMhU#0W$=dN4N@cf
%;&CE"E-EU#`14h#T>PHl$=G%aj`P2NqFI;,KL9QrO>%JX8sHZW*/dH[/1VJA$.U<-?&2a62<1`nm4e&C%?%`(C_Wb^M3gs/,-&0O
%<@9$`&3eU3E0u651g!m^0;#u>a\0uPO[bCZ<E@)o?ZP\Tn+f0!a.e_KLOp,YAN1Iiod@,]CrnXd$;'c[m!K\nCQ'U;O;(thf)1Ur
%o\rXKP'3cA(AB1oWl0t:0GVI0JrX[d_63fUYkkrH!uu8YOW,%=K/5_o/04tarMTj:j:Hk%P+%W3'88W_o6h%ciRp6(N$"=h\gWFJ
%YDKnPZ)SL09Ai"c71cUM8kM:e0-aAVM0D`^XpNOBP_-VG<0(9*'hr(f-BtFSYpCeoNn_L"'h@;KU`I<rM0E*B[^'?_?=eR"59Loj
%&9CMKHh]bm13(L;H@j]hXY"J<NW9MJ/fE'jPDt*;k+s3?O;GrE@RE2%,dG*"^%t*W6Q^_0iqtu+ls1$JQbg_8aP`A71@G=D\4sW#
%UC^CR(u6k8Ash$l]!'+8"d*YCkpm>U+;r?0=[H"1R>1C+01K/kM9QHR)&LI*WK*=hK*pe.pchi"5lApnr>[U%^5Rue;SmK):)eV7
%EZF(bGYsh;7\&t#XFN^C&VVk%?&>TBqPV</Sce`1#<gFeXG=mZMYnrD7eFEWO-_Q=,qkmc-3L-&$?7G##0."(aPO30bOWi1IZFUt
%?hInA0,jqIUCu;iL<01!PeVmBA#URX<,bV="2%,j6I#"moVWMqLaTb^@G>1b`_bD<7N(Z`_nk-%]V&`!&qfc!82Q^BH?VL;P2>el
%MB^IQG!`13o#7?@hD#CQn9r3QYN*q8LJ-3fLrssFo^RSb,h".0*3Zr,(Lijl$G?^,3',:U-lNSlE&fRjn&[.;M*aRZVVq[r]EeaD
%i[2;\A5U:^_)CAf^XhH\W<ornEE"Q!?*]n1.pEm.U-AH-k.1]:PMh=U_.1XJd6N!PCbS2W_o@M@FY'6!WGuJ".B63RXKL@XU)(ks
%K_5tfT3E3XT"RFLLVZJ-);Z#fDU8\iHr0$BpgS^g]RDZA9abH5XhB8cK,uI[qn/^RWu*^0e0qQ<$WS.uf(&Xb;@,QoFFfQ1BCLh=
%YOaC:Ya8;o/RY#n&k__[P.Y=b8,eg2DE'@_=OF0V11OcjMtAiiM`%aEEW2dm+L(B%eKY0c8`?^5(gdOn]6*tC.HVhg91`,hm5R+;
%`V"Wg)L75jL>%+n;YnNu:c!!`<VgO3&K!hBfsm*7a9[/'3\o0a8(b$[8`M3/GF36;_#Xq4&W-p>l%:ZB8?b=8AIS<5#=`&F^cX#6
%I41Nt1DYiOWkhJ1bSIQd>ppcY'<]Ql#'7lHLDLPB0-HEZ4O:X43q'[!&]pco.SjY?+/,IL+M=WGUf9SFP8Yp@N.,/`;:@sMjG4!e
%X^`l"<b(:O%<Sl1:%fpeI`b<:<9?RAERZ@*b9,A51WkkN`KTBS(,AO,1@<54c*)F.VCk</-dR1AOKdS7d0;r`3n2`pL*q`,&!S>u
%;HT(OIN(2IrN".!H'&SgJr\Be,LHgF-`*&BfrDm/NeRR<-QJ3\gKAeJ#8Nb'1_'F]Zm1lm;_[02,ppr5DdWC0Oo$Z@(Zd(&-4.hA
%M66Dt6j\NGe2GMGl3M+ro`u(m2s:);*,k/^WDjj77Ei7e(A2E!E7Ls\MhhEHnfAAnBdB5?h\"<#cT70WljLsEE9>J@><-UI//ss&
%7NVpcMg/q[fU+==]H\#Vk2hc&U(u;i7d`]rf/aY<=`%-#nub.lRqF^aJ:r,<LYlu.lcir4[/YiPm=sG'l[P)`c[^Ym-<7!%OE1B9
%s4`cNhSFBK7h;6$S%[BVj/Ddgs-q25RtkEa5HJsrmFkoU27%H#NP<VLk4mFuB!34SW"&SEQcTE=f).B7QKpgubfE__b?q%=2"aN#
%;6t]%Da9trN?;TBfh+(PjjLNG>n7i>42VTg#1mWTkXe&2e8Gs'_sY-9D2.FQMl)24iA0TM^S4!Q;6$d<U8$JbXB'+)Kd"-8=_@Dh
%TNaEZY8qf7oN)Idp"FCIBV!X&R6nO;3Q^VFS+X:p9:j0[R!co7;"NsIC$6p7[73#iB6JX0DV4EUH.KiXYKZE+ciU^aEq]e0[adXV
%b7KLWm2QW3G$!t)6sp_B`O.>aM&q[U0=qsjREPFDHkc=M^pgNaRB1_eW-71_j_MV:803>Y)Y_Ra_e-U53U727!SIt:h--Wrmf)Qp
%_eXq!8Fao-K7si37(\j9p,_$l)2K0Rq(#+>D'/]&4RF9+Alo:f3nAkUCPLta50]3HcB'JHh_K]2)NOK)^-<V7J.u'_0eG"aX0QhA
%*q&G\0A#Jp*8"JQ5A-;HgUiI<c"8ioc_XeKkN[ZmcYFT(AENkRX#K8$,*B??47%)WU=DU\QuBHdo49C![<f5$2RnF&=^!%u&O44+
%mSCnNH8qhIb\*5bWQE0M@$)Ns]r0$N*)`RES4O%PqPT9a'I`0K)C/(pg@7`n"X[*_;5'0XR6OX.n`T+4BX1?u3;7e`7Rt*Xpt0<g
%g]gC.DSH"C<pcKS5Y74['f,TmK7(@T&fg,eUK":k^^#Q7VAo'-PDM<E^4$h-K2,NdLYmGeUQS)5Sh!#T66"Ndf'&ZA<P$#-0[3Kh
%(*42cNTP,f7aAmDW-,Ti:?&1fD4pO"OR)VoLHVrU.cL'a8ZcduMAmWT6J&!\%Qh@M)LWV@9IXe4NEO#2bh&o!E:5hC-,t?*b`@E*
%]?OZo&j@*Z3/%]QUeq/Pd4s>$!@EnA[_d2Q*^^96qF,>sWi7k1anJ*<(aEB@*%:&jkTn,fq+[Vl1\1AC/=")Ibf[kh]-Sfs`0Hh%
%EYDOBH<8C\\8kb*Kg.YrSm2Wn:-?)AjN/FM".J-DB!^'Vpi;]F1\'QR^>)/)-GJ9RQhuj>Ef7qCnE-f6jisWsaY!8Mda;TQ4Inh6
%,HU@*"P)WVPHClVos=O>#8DXp&#[mYQGO_$^-=ZD+-8$;._H8W]j[@EN327*6*Jb:"c^B<lu';gS:]RsBuG@@K^q88%Va.Al3Qd3
%FN`^q9<[L*;((^:Yo:W,X`#q3A%BbJYTf4S=5b5Vpu>nph_Lj;Ib)u$@oU!9nQ^saPtnN2'NDs*8rsOVJ`7?*n;kp]MX"5\fXgm6
%nmF<R6jeYnUjMd-?#2D[h4Tl7X,BtIL7abQ_::bSbslq&"T)3=eDXNj$f&cd<.UYR8V+i4GO?9,FN!r)"WDlMgr@uaef*B;FMXZ+
%^Mat$C8n?d]4!7MT%&X1U-em&N:,Kp`XRPsGB9,2[Rku`C>j8:n/t:/'Y;9'k%P`O3]0B^6Q.uo_fGe_IFJZ&mVFT/CL','I>=%Z
%d&qLecGFH;qM^\[\Uc&J'?,!-jdDN+(79;93KBjJI$7+i9n_IR$+^_WO$h.P=B[fN-2QGna)<!;,g5@P`G8?tA)-Y%fj2elYu>%O
%bN"-QO[C)ah+D6.2OjA+3t2-]YoS,Ao9f/TMKA(MTN^ZX@FqI9B`7&)P*M:6LTti_X0m88B)@(Z>i[_8p5A%QDmMBlmFDTH%SU:6
%h*O']DMbX1+M<0PBr-[UqA0Gp&RPL#GBt'G8ah8T8eEEl)kiN$R;lBfA"3_'V6N_6oO*'(,hU5TG_Oo5@/L;LgoXX?BtTe;;*6:h
%)&L7Jjqe`eNQ!VgBE$1/Nn^1&Ob+jL[-(abI,H:S.Q<Jj,=,cd`D0V,,\T$OqJKEugY:1nXBhb[.fAid2K*Moho.&iei'@.Vc=6W
%+b&<[,A<(5auKj.\J4q6j'c2i&Iu9VJ#3K)NK*qe1=:T>$Qo%mO4PW$+4L"&;8M!\_/Z`YM`;-XEKuWqh=<-4/T/0k89:/?/FWI,
%&WmtN;3qKT]:PUWJdW6u&U1t2fO$]pkK8jCd.LQe$rUUmPG;+1BVn?p9b\T_;F18Bi9)fU3k-0A5s+1SP`iLXC*'dPB5,fj\CdbL
%80M'GbqukSF+cNK@'+14l]J!mW6f37)^tjY6)E!klWoX*0HejXKh#aOVkD=DGauoO;WUB%8ipRM49^kIeJ`nD1C]3#U8,Tj-tW8@
%;6=/#Q_n"0Z"FY*C1jL]aMZmmJidp+gS-XK7(F$B>3.AJU81(e>f%:eSV_BBIr-j`ohgoX'SY9e(M/8OmaeG1]9J5:#+9I.4_((A
%E]4cS?-5T-[5`&R/kQJCAP@,AdW!e`(M/bfno&328M8/&1G8,_/kY5#kG%2?JR"Er'H@pIHJER=;UOL4MhJ^2Mc.)Y\L;0R)4+A'
%.sG^I0rH?5/T2ah7S1en^-"&KL=_(kj*0P'p^lGoNae4t\5W,<k1:)8Hj@d009-U'U]*k!JfU2IIdYnnhnT&cS<400S)#hUO_Zn<
%CX,>NV3ljk>argBM-Lu-\[L3=aM_>QQts06XG('1M,]s8[@9aqM6Srneg=:3,1Z+=<(lWb*K4BUqmK3jMCJ=u>I%bH!B=4O2d]&B
%A/V52K#od:/>E6;q/?2*OKE*\'M3:"et#ccEJ^ur_MUb>G4!V[^0M7u*fT%$j)*i<lc;$a2n*m4\@^jKoHlN+N;2P$1`'%`XpZ*^
%>*J8=XsVQ;Y7%<eWo6gW1&P+.#K/qZ%(`97M^_MHA>16BY8CG4\*:)^U"9X"VY:gOOL[`(qsEmS3L&:dr/EA=br!"95?.D234bm,
%cV=("j(":kT+7Fl@N,8`-HBt1r0?DIX4\ZF@&oXR=5_,2Ymd2t?a,/>*kQeY3VYg25u<LWE%IhNMD3]IYl0q7,uA8c2KT9GdW!\"
%#]Ghr6\f)p%cF"@M^TVsc#T0=_[G2+m`AVa9d>D5:rT7(C2X!p125h'Yk5p9R:+kl,rpu)&N:CLPEUHZPCA_ohoYld9sGVhruJqp
%K=?i,n,E=TjHhqTqnJ?nhoYldAH-jipOCj1_%*]CXe[dH-@<HOF*]0[^:,CJ2qddCMcf"MchCJ^JCJ#oh39j!&!S-'%S\)SHL2r_
%Mpe=W=T"I<T%blt;_VLbG')7"KZ.PU4LIWs_02NlW3B2&\O/.LB3;>rs0s,DHL:L'9*H(]\ApK2@co8sHBR+W#[&Va:;UP*0\O4:
%-ml^/3XM!E_ISiafeAn+jgZ=cN>8aW_\GMHG2-?u;/=b#mRfRBXu+m!A*?t_,^qY.TDcYXG>a*+_`E3=)/i-3*LXe;;W&8e<BKMh
%L]%M>J-:g'N]9^2Wj,@0%dS;6\LAhE1tIq[4dKof:SKAK3kEaRKbZ?OgNVuY"6oD=*.UTOCV^TgD\*So=ClTG>^?NSs(mh4F<^qc
%<@39`b;Jf8n1k<_9EHl2^rn"m1'tVk;q)@jOhcm4_JoEa&pTfI?7(5igD>)PSNV=DnpG=L!,5Lp4C]Bt\l",i&oX1C2t8C0qMf-=
%7k'iQQVF.=;-l/C#)Cr^fgM9]jgY2oM7`J^&bT=O4/`StK8u^)\[*)HUe`,GrKg3RO_=^%9."O.+`=o4SD;&)4-X6$AMQ/iEH201
%(b!BC])&mB3DOI"qKoPsgN;`jKZN6JV9/*tULM^P`pHFp[=d;!T\B<Rnfp#9m8SOl>GigGnd"O-;6#__5L,k[LE`e:AEZ;,d\!:E
%XY`#5ppF*SFM!m[Xd<A=USCT:`G0(AeW_8'gt)B=j7m!R!WEROn"qm[gF2Y4[rTKD-kd,.*'CSsh4D0K6dt8b&ZTX&e5@E/&uJ<O
%M@5FOSTH\[@gA%@%/b%RrjnALoDY[g;l)XWEhe\*9J0P`@rVoi'#th6T4[HM(u?9hA#-qL'$%MiT'j+jq+2Q9'$%M!PaTHE-?4u!
%M.?HBgeE$,h&o^deQqpqZs8J=3=^[:=DioOHXW\4``>0&IUl<0'IfN2hUtr+)uN6Lr]"&*<(Jm8]A6Z"1+Wnji/+2`?EKe+[t2u&
%6LLcmd/;HRS$b(UoMY-]bi7bTJl:\HkE_)3M%l)RZ,s:GK?RU;qe7>PjIW&<0UpiR1b'a2W80R/@pj>^d:&3t#AC]n1g6q?3\2W0
%4q/6C\)>u<a^%JJG$!+Aqq@_#(&6JJ[1@V,Z<tU-.%&-a^$U9bjEcnEoGP.(5ph02'SbJgpnrIQG:ME!%5O,XY?MQd:WI\>PO-gY
%6k4sBq>CgmQF*0*GBXa!,dU0&'GPGo@RHi9SWbaFgBg./mUbdE\M';0-kgOehaV;=btYj]M)RB`jsJs?W;1<^]t"i+bh`$U;VXVn
%VTrERbU1WjD0"e,@!:2@SX[-1'6e?Rc;!*)?[MAD/i[tHST<rBd:D7bh$02u($CR;9D>mJX<+j'2#?^Eqf?uKf.g1uE0CYI7XsJC
%jT534q&-]I^K4lb5N_$5M(uYE@YDhY*T?[,0$"l(r3&kMgg[*_DmkuClTsWS,pT'p/#^t/5F5;;X#o.0oe_4c<Gkc`a(X>'Fd*N2
%EEPbB0]#p7U9oT@BV!96Y)`@%U0IXb5TRT&Z$<`ggN`a)?KrU8gT:UX%"WuXULLSE\Hna4q^ACrC!dhM5&l.&2q+`J#;%hQr$1cH
%>gr:%7YP.5h_cDnrVFQ+We8<6m$U\$`N+rp,[TXagj4k6omjN8iXVok:>\s(LD+5h->Ug>arpJ[G1K<o580A''gB9B7W9a$mkUM-
%2&=g0kr*,qrm$)!&6N!hBe6BsM;<6Rm@G9qYj94g\0]]l$>VLClj_1hMcE6$?OEVONHY!@<jNCp#f1tTM,?)aMLM<t1pMmdq*9,R
%)BN[hk_;="5-Z7X&c@-=cm8Mb(.s/mMYqSKSp6D2-o<En8qTJLDE8fs5#;TEqK,i-!?C`/0CZT;)d9Ff[tEC2bC1Fr9$j_`:X6gV
%^K`HnasDJKqY'@aVibW0/rCR/"m/35ro]PV)T?aOQ"(^ngiheH?C=LZi^>G[b1",u\hT1(qlf8(EJu#9IVeM^)Eki*;2l)LId8E%
%OsBDcKrgK1GahstZSLf=I.#R(gg>DRcfAQ0;+^>bJ=9,NkJUK(R[`g"X^<p2WHRH^"LN/jWqD=Jrk%Mq%(REhrg6/@70Q3Lg!uSZ
%NN:Xam1p@Z9-<!?.mAF^ai.,[Ts;?WA+;0VP-LCko=O\)AGj.idn%j=qNoJZO)joSnKei-YiK[bX!'k?7bdfW\'.TFlUE05-5h!9
%E=L`MOeAWJWU6stViud+ELLk%<9i*Te9=Wl^,l\Vj]["a;:=2giGNV%L:Uk,SMW)NG*X!(rNstSJ^Pd/-KSR/Z87eUj=W/icHU$j
%]?Y$7-Yt\U2Uh-/0Ir)=3J:ZX*!tJ;#E@#+RU8t&Kfji@X(EoA1t`63I:h1Yrp_KM](*n;8a,3l+:G*[jm2SrL\#^Yas=sspS:pj
%V@hVQ8!%?RCV"\ng8N"UL;YbbTS(L$A"-Z\lWt>A]FZ.9)TaB,qnLAk5P*shG.gCq\+j$:BL)B.o.\B&g:bd'Ag:sla'h'9eZR=;
%YBuY!Vo><8Y8rO+<CQYNc2&(Om8Zn6H+Yu+af,:Q&qe*t%B'^R+#"Ni_KjF#d1-(^e+f4'n(3WXQY6,;G8E2iGA'.RC,Gs(n2Do@
%\W=Z>!K"51`&aC+-G3r7CM0bq(`1UU>PJkCdGVc`!?aJr-g+[ICQOgQF'N)H/cMCTN'@$*DV;1mpb%UW;%h0dTD8,C5(+[.+#F_#
%NQfGh>,M-\HFSUh5eU-20Ur^bQ;-qQO3'qcFoD5S#PG=U%0_m]_jcU4mc+ebd-7u!8k_#E1uA1bfc,>.^]3&kd&YM8:Yb9\#dmEe
%%M7eIdSf.Enc^UnI^o:Hm''V_;u^3&,b0JslTkuke?&;faF>TA?/ga0K;AhRhSIeE"ZLMLQVl8+Sr$,/L>?/d;m);g#ob-$[RoG4
%h99IV]OhY\bgK6'e5=W>CkT1TG(L3\Y1d5VJBUd@C"@WN.0!P+X^8Kel_^Vt@ed76XTsjG*XSmkG-f_7SaW=M&&[[YGgtQ1`U`i&
%Hd1.2LHE#s-2G'S4(f$oCCoS`Dr.R\19\QeWe;BMn@[U?%-fo_X&nc^EA:p-r(Ip`>q9S5k<3nAY#R9Kg0[]QNbt8/U2\KI*]AXo
%28bc/&[rjk__<f4"VPoTZ5&H):/.;Pl9Skpoq@@6\=Mf?\CIpYF*bQuTO-q4R&*u``hKn8-^ocj:p!2P/YZd`<Qk&j,n5$$c)uY,
%B%Jg6?FLfY7Pl^*@2[qkBe_AuI:?Jd2E?KCc?H#ACWj0(l:&i,o2[*uXV$Hrh2iNaq7#80Nqh=_:E.R$Bp7,tEP!*l#CW6r0B2\d
%0XDSpg!-U!CYdpQ<j-Wj%b;ZL1ZLbhl`D!\IKZ4t"=:^*X_`c0S1O$XIZW/]Wugc9=oGZG?"u8W=snA*$^?0p=,'g+kZh"^9,&Y9
%lEs*K+j&S'%6G@PK5n+g$m`BLCj?Mp-72ZJ0o3Bl]`8=Nf#&S<4_;rFR]T5:7%r<$2U@Oa,!"OuB"-B,d?Ji1DfH:qB'Vt>DRF9M
%e6H+!k@DeS=FUp)M%#&.fNp(Nq!mJ:-n`-gX9<[%l%.:)&poGETkj=;cEM=Y/fE;'c**CZom4OVqa=s5-9]&6!?cCfk^RK?jI94d
%,/ieH/Z`Q-]?OAgX\fQ-9ZYWbH'8qVZV4L!5rE@ROH9o2lha:(<pI(.XWeTZJ'of--;6Ie:b,\F's3[37'Y#kOqC<kb,%U$\C.S*
%1!P*$'P=8(;UWn(]V-KTgYa(N43d\t?A?!lI;O5.K1.m_gZTXT#hki7COK\BN!ItSRcDe;#/?2s<&L,(lQZ[7Y"ng:]_7dY*_B?'
%=#04$8+<b&Re$:W!`YJ1L<N">;c=g-/H./fih'#hPnAhJh1!mRe0'QFXc,*$*]YH1-rbL5d^d+i/DLR`D^P=HJ#(*tAT,NO^Qh6S
%3rp$O]N&-jkrJFo=?!kD-Q`<Bj1/Ae\T@D`m8rbc@@;6&[E@;;j,9e4kBta=j!@(_^@jeuO5^rpfRFhne$3qbUL0)58XSZ6@NJ*?
%oN!)JQoWt]okX*0p+V\hiKdm5(iIX'>jkk';Z0?R&#B4uoqP#1p2PlIFi[Dg3::#<g@=htNBESdQ#;RY_9u4><t!8ZUO##'$;u&V
%@N9#h2lMnMoa:uas5Uph8(#LZ4I7Iu5dY&Pc#ttG?4rgN/8[;WK?n[%Ym6sARJ^58N^j84WnPEO^Bq`mlbQcj#Rb)L!4=eRHD/nt
%?[?=,HhZZn8[T8Gh0>\?$M1D*SShcQRb(/u`5NSN,%>4S'gp^n)FK_IDQ0l)mQeS=[?EsG3=51.m7T.:0Jo0[?j(b.Mt72jpLE?B
%6AF(3HFrl`=PjVC7q"X#q/IX\ep:tcM>NfN\HpH\[_)1m7SBN0%h3,c%1Y%koUH<,+.SS/JQQpo7hiNCalL,)+Kq4lrVRXRSI]+7
%58-rbR[q2Zp:(79$S6B[=6Sh/].i*"lu`Ib?G$2:DbGN7[.LJGR,]6?H9Ku(3PW[T^3lb[`u`M03Hr2Be6\VF@!GD8S^Ud.OD&oc
%D6#7!BI$co%]aA+DML(3SZp3R+0hnIqaKH3Qd*FU`_eOUfJ9sSU5/Da=R2O^Loq9A),?K9*M8nb%^F:,4?CWA]b-ZK6d))*mF0@7
%ns@VJ@.V',8FhBlFZNS:T[U$d`.mZ4EgeM48&X35bi-lAWEoBUOSgo]CTF"!eFQ?iB3gB'Q)gGfTa)2"Xt/=F?J#Q[(9F1i+&-mV
%qO2FP"6F@Faa$s3hG3hq``5]XW6DOtH%emLO)"@R<_bO=e;bKa-/.hi9"aVaFtW)kgg7f^i.S,+KIDS27;O0-k;"B7p]u0D>aA-)
%OUar)n-ZHJS.=;_F2fp#Op*LE),s'KG/\j'Pf.%+q6]eQ$o3@Nn<G:/[T_4Go,\^\@^3AAB4OTb'<?#\BPe1)j!##agGq*6<KXUm
%[!UHlT#<a2flEa[@%7.En7C6!g8gbBN0M4bXnFP1$SpK&L?fe^1VENXigQ4W_ieMFg+_ANHc]91Gqm`MSO)fV)-gW3Y%T7t1n"_%
%0CfC8MDej(=,@,1fkXQiR+X].\W5Bik?m/*L#Ou@cabs:i<C>0\L=7A+uV:596m7;br+60r3$i5`*ejBKChYM8MO;k",b)V-lEM[
%Lc=ZD,@CWHlL"skUh'ZFbj7tj%c_Z$MZnqqZl#FcN=-6\=(.Xj[CEZa+'3G/Q`;l';/>T2dmF">a<A(#WG\i0Aj-KQHI.OH2)!"C
%e]Dr/!j]6e,dUa[:BnAqg5^YfeK1i*'!57L=#0l$gd,!$Q0XlsM1iB>RW)DmYMEBkYK_-C4k,E8q$q$\WMtU^[F/s$Y2Fu.7Q4DN
%?R)uU`o(ung5-fuo[[]mPSfDcAGBT[mT`3J6*'YsCN$HHi#&UIS[@KV+?2'<bOL5>;BnCMIA?0q]B<)?G'\q7lcN2mXnGVumo,[A
%09:E'-1"OAW'gOl>b7ut=X-$=O:HEh=sW.:ED7U^^7c4Dd>/XNNjTm4WFB)+?k\OmZSKi5`V*jag(5.VW`S3P6$l.L`u!IACju7b
%5Z7R/W1U,4!8=L*Y2W)(d;2gOfAK2oW--O)s)hU7SZA^2-*"X85#9N;2u-?a4<IQo]&TZ*p!Xq(,7t7r;_O>*hHVP[,.B_M>?kD(
%lk6ks<Bb1PPKd]@HiE`^_EmnoP:'sVC$UJf;@[<mNsiQi)q4-8b%<QdI]I$mXVX(FQFEH.rE=L,dpLt_qqanipA'%#YJ:(ZB'6pp
%ZIoKWVm>!dQW)D8B<SLVrRLp<h.2LXmFQ,7ICRnKf=eioq7'0AAmWrY.IVQ@=nl5k1jafUp9X_Dhrj7ArVQM8okS.+-,-POf7N7h
%4N5o(.D5DKZAbt%rgNRfRk=Ij2hf6njh:&"8+^Np0u!'Q2p^sUndk!."-f8.Gs6;\C!ro7S#F&)XEF6&n<JcDQZ>0G*W!"=o@%_7
%Ck'LW2u'toqXqu)3ID+rO)GhnPJ];.'l879Rq&)`$^?Q>T-+*pHuN7:X+u&U<;BCjQd;)c:EPsXV8_j"hY5;hH+!.WT_Y2V]R"g@
%q.&[Qrem2mX.K-@B8u*'Uun'H$i0&RM,@G42iQ1uO3?8/I=::^^Lg^Eg<Uc%AaS.'>C?Ie=NrH6Q;5_s/4;=gl?Hf*K7n0''F>kO
%ILooHl+K""cL_h5HJsC*W(uiKK^/M;?O2*aM[E63K1&oKoOMg:5@BhGVXSp+WFp\6bj!F]mm$1"GH+GO$`cqL(6<,]GPqE_6KuVV
%j42iF]*HXiT:E*=e)fl4BA_Uu$42aX2nK6B6d(<8W6Uu`c_!(UHf[cZ[4TFE<S9%V*ktf`=P[*2T7)2mE>M[-bF=N;Y?1PcYGK^7
%YHeO3\ntNn;WHkZIeVg-7^7,A`A%ntm*h/'.I90>=$I[i$dY+t^R[!j3a/cCZ]FsPF5tqU=mN`Q>!:@Vp@>ED:EL03^F^-8rRW,a
%CXoiie6J^HXDSg=p<95r/p32uI(Q\]0:_m2Yu%<(^SJTqS,(lHp10l$C)fC_lg;ZFB>sb'H#GDr<B==]A<mQA)c+`m<`/KBB'-k6
%e+<EFG+*felr<Ys[qrMFefs6n(UMem0=r(cPTncXK?mKLq9=-@ZO`B##L)O$>q2RLn(_Q'RkE#E4maocm:(M&=_I`d_kTXSH$2)-
%2>_YZ48lCjRD!5a*+ihg>/dh/[qr-tqod^bm+g(da6``hDDV1JeOhI+n9V*rICT;g5J-])oij=u\2^*d3j(WkC1l;)Z[0Y$ZfZB(
%?InJVEO,<)UR,-HiUiJ<Wun^ThQmYIl^+^ig#Y0G0A2TtT@1kGSpfp:T0.D0Q$p7Dpc//PTeBpab7@4uilC;9m-8Ea?FINFrE8j5
%9^>W#D6#ObIC7_NB@hd(KC%aLL&(*/XL"4@I@.3LGLnaSll5?JS*YUmgJmlPoAOHX_nk@HFS"bQ)`RZUFo>84l^n&/HaphsS#sD?
%h9-j>T<)[$RR&lZ3ifs8Sh7_WSo&B,SnGf>hL<do*uZf0Z>2aEC:[EtR$oU#cVD`U]R)HB:jf9;/Tta?:2(Z`b*8lDS5D4Dp:'.M
%;r6[8\Z(kU`i#d`pObt7ce@j&:DHZKG,NJi?<L3BT@`@,l^qL"9l3lhXJqcelc.GDmf)(mH]8s?PcmkW*UIAKV@LqNl_B_&A#f6W
%)E=4(I@b1jHY_iBHiK']4gj%Y2a(q>4dhnF*PS(NgiZpslfNP4g7C/<VS0=/1]?P'b0fjfSSoUI9:ITDVI/\)jluHIViRab5J=M&
%pV&dsS:3[cIt.=$hjTuD[Y+9qGeAA]rQTT[NOkNqlkE6m41"bCHW+-EO7(hR=?O=,nE'Jf4`0<2[sN;lc.P8[e%td*:L:H7pPL9q
%rk0+[Idu:7_HZoocGRrfHZ*uKcgQ9cg>BU\/5Lc.GI6o*jPK.Q:@DMiq`Hg$?0OMLDJ!M<D6D29o^73td5Q]tN76$)bWOULI54aJ
%Nco',T=d@Ufm*17IV.3V4e$^]eU9CJV1/8hVY[FWb^;MI\inM'Wgq=GX+<-Ts0VWK2E-!6R^LqMQ.b89rT!7N>(2LCR=4Mi^REu'
%GM8G?Rsk'Vp;?4ZLU2P4ZY#7cqr;LfoJSY_>F^1iJ%"rlnc!"-o^9H$s#G:Qjn6coqh8*Gli,VhDY=#&V^G:/^TGbgmXOJlCtq6q
%hCmYK>@0J%h`ZD]'[lLMPK2@egl_VScLIIe\]<U?mbDQ&jk\\raiM$+`pW3KVb]TiY55H35$'CNc<RjJC23`s+frm@'c4=Ah=^Fg
%o2!,CEq@VlQTF`m\^TjA]9gLGo3\!?=7`gIHg#)@Hel"Mb`ogp4NPcrS:9CD/q&6=oS%Gai.ZG0I.2Hj)*E0$%)4naX9Y@=SCTlR
%I*c^OHsE&25Q8<'Gg1kpPo!AS$`1&\dDG%`;LRNk`k1q20\)RoppT/C(:mF+/p6c)mU3WqcmZ)75('`ir:k6=;m&:=WcY*[^Aki_
%5-0,h=!+"ST"\L#C@%KD0$ZR^=EKlGo8EFhmr'"LeW6/Wqt;CYna!*^)iLW)SWh%LnHUYT;#%P_F(PsK\S!9AFH_'Z5PI(F^]*G'
%/pR'O7BZWq;.#c<Bg,^(gt=\mnuC14;R,uUbL4s^f3J1Ak2hpU@Rke0qt?@DD/M!+82K-sT5%0hTWGinDGP'Fa/-9!iG6on)Uu#U
%ZSo9fh<=^tr0%&(GQ(!;$a^BA:"(ul6bV.%)_\YoNLB7C]O<q:^L00<Y1AS6`@p\>G7S`?NG>uh)W0/En!ipFh1k/ro3]b:rUl/\
%m1s#sTDa,_b\ugfSi-1a9;?C+V/C:hHMkjT[9gRSR'PR3\C\.*p\-^La1U$/(JZ&oD?$_"ANqg`BC%QM>P!#LnQ<-45CDBM%iuFV
%3hH?DKi9TTm5fSU]*HViIBN!cpYX<.%mF-Vld&YUcu@=G]R&c/5;>phC:j;Wm8Tcq2R_IgO']J4H*<)/bPUd>A^d]nHM5UUhKif/
%7eg`Q0?ijnr7@tsO8Q3?4^.[<UPI#'C@>L_0:/TB,efj6?[a)g[$GKSO%\!Ib.UmLk)*/d?=#(GmWV_*8tX^:Wc)8$?g.dKgIKuQ
%[/K2knQYD.p.8i_;;ckkJ+W^'_q2qe:Yus15C$(rJ%QYh<$!.Jhg>%+p!Paj4FI..rT%t_nFMjg<tElR*.6B=$Tr.R>-h!@(Q51e
%T5:r#5M^(VDa+]R%nf^QXh]Fp[.Sh2=l)%)5MM`uaZcbsS[S+B0:u&3B(3'k?`h%,cG)MkH^+PR5<(+IIrtOhi4n]N'je;TG2Z*Q
%q/i=\Xt3C.`SBSXZ^<]&T+lL]h3Z*U_rponHgc:2P.S-T.D=NZj[u0&T&`PHY8b*S9=%E/Ws.t.r9BbIg&,UP_:e_VrO:ZFjcuYU
%^UtGU^*t.AFZ[pUbO^degPapTkA0[YkiV^(REEP@mgJaS(RkB(pnG.O5(2thAG+'&ZNp0`[>0+4Suh&:kJ+.4q,f)KIIj)??dAD)
%c'M5Cl%PJ9HRGFmT'V5.?Hm>8m(@ZBiQM3Nnud?QT!e"_SC`5)rqO:ERG%8hqtUK_-i5"#D9V>!rJ`246?-N(:!M>c<`mI]0"AqL
%RsAZ>j5sQmH?8]EdAPDnDPOkM<ViF->9Bbh&%B9VT&/?_:4h`t[ATXCgBZOfh:L?+8%mM\\N0>/bFb8tDI+D:3:f4Q9AA1G;tHKj
%ZgTJ/h)X5;o5]%(S:.a@Hthb_pWM-8CG.dBBjo?BHhqDoH[0LEn$m^dpuXkRJ,2muj/_9#+*O9iIad.X3Sh0Z4P'6c:7c:g+3gs;
%HTPTe[A]S(q;\5/Da/J&;fCD\:KH@500Xl4\$[p!o'Z9pU[ilmlTOujl1:C^pRaYghM5oD48Q1/ZMsL6hS\I;LU5P,ooJrHkJ>2?
%k4+e!eLu\R50Z<pA3UfAC*,Wf3c$tTSGetIV/AK#Cb?fYIe.l0rH!%`mXDDBBDTePp;>:EReu$f613!eeUt7ih*%^L4'D>>Dlr]H
%(*!,7f.S5XQ/LNQiMYVuZi.ALLM,AR6#UW;p#4'=p@dHoFas:mrSVXmib`l5WLM%J8,l\*^01oEcGS[\e^kP<>s6sB3$2<W2*9TB
%r1O\QM^pkZk)8\nUTM#oH:Ol'ccfnJ0\;>oG%V>G:HQhfM>=`fEjEB#[XV1>D7=<3VtlV3lSm!/CQ6S](oH2\mE4.lh+nDkhce'9
%O&,`-HM)BpP]onbhc`>EdHYMNrk>:cB2e9ESt%rj[!Qui`@/K;gn43,2cfD5T,Nt@m;_`kS*Mt>^+eG&:Ca!ZC)PaVFDH6ti+oC(
%OF9^VI.t?=Z+n%Z$`;W\1DdKljZ`.B%j&7,47b6urr7>nGChL<CeL;@F<N6P^+p]S:+A5QH>U,'S<"s?h;_a,9e0m^G'7g`p^qE9
%lJ5XE*p1d[')\:0o311]hWa/Pc!DUS8R_^9NRJ;rKI;BP0iC9rm0QM4DC%i,Xfi\\grHgK]uRD&AioV-[P0Gmm8Ea&3c]X;^h08'
%HED157C4<i],_lHC]13kog:,QpX?<\H*:L8gH[/B79SJs.h'@60.Ug/]0WJ4?F@](DcPfi`(\SXe_WmM#r=k/b]HXtN7nK\FM]YJ
%!pF1o3!gOl:@JAX$5scnFIqeeAE>Z^FRW*ZcCfXG,K..:RgqANIlgPHT])Nf?D^`#Wm+![XOcloLEVWu#IR$uerY3G">;p^:rdPX
%%AH.cgI+Do0N7$(W?>+MUu"le@&Eb!f.(ee5R3X"d"'^d-/ReQ2^U\greTVu)KkYM5G21-dqbK5JrSOs-B9K@/Q^Z6ehuDX.W'0>
%Pp^Tp;/UWf)`4Q?"]@/>qUPHG;;$!:l+RT;pM8_0.8'&^a636mRSiDsipKn<kP=_n=-\c*SgX;B<EQ1:[,_pI/\F+u*At7PCc!Xi
%mH.PR,3$`GU5S9&=-,l=T"q&b7T\gd8?qP/EEs:%^3%-Z#,dTeRL<A.g`QBn>3"m!L22O78s#-Z.e\)de04U#e(PXjCVOb:Zti3l
%aWEG$rJaJEEFKF:%&,N)MIb?]c1YjY!Ec<LS/??WT$f;r^=$m?#2St1B,HQgX"bV?b6:;_&?"/s<-a[UX\)!]*S'-POK8.ROU#)4
%5]hMeD`592b&,5nF8FWmDUs"uG$1/L"=:$o`B7MAM_p)-e#rSAK&_0[15)]Q]ra.A,ehRQBLp,.0<r#^8.8e0c4(QdobaR=/`C=.
%0VCh:,jF6u]./sB4<(3/Fm'#Y5I#NoY7$KJkNes\A4DYEj'e`lO3?096*"Gi&a.Ef\&liT_nMEmn>i[JmD,d@E09mZCBIYV>\T*h
%)C.e[GM+^4'QQ!hnKZQ:93e0T_WiJkQA;r9biH=c/<&f'H$(IdF][=&7?hlZ4NRWg`QJ"`WM.#mp("?$RuQhG&5+kkl<:TfM+P4G
%c[aG(2S2l8!L9;sm[a!q%N@^9SiFPZcXdP$@u#-(]=ZIDhfD%6HZJ*;_"g<fn/*4mKlX*McX"(F/&VlVH1KI:p7PQ4Y/+!tpnQ/4
%qDI5^I(^S,HkR`Md1oG^X*<tq[i*s,LEOP8'"?#gN?ae^l0;#.r,qssDKm&:[cr\Zkka9<rbmfij4?3@)]TWdZ!DN>(jDH$B;G/#
%Q'TdLG!O%(`!:uMci`(_a4CX3qr<2+fAlo(9YM6I<L>R*9fL=UQEtGKoc3g9pq"Qh1_T5BNP#0`hp;D/4N"P:Y[b54U[C$6I8Q\T
%;d5RRAeoO4c.St*B$L\Ipc6s"cNNo]3hFq0lC'`hp&mo+m::%bcM>1i!G(A0hfK1cjE/Z*W^b:T<)Co_q5-q!h8pP#B1l`P::"2[
%)EH-P4K<-.mPZ2HWC7AXg=O`>k3%-:Z+3#%cZu\T$Ilit>;Sm'Z92EC\jqC^BhXOUZU>7#%Em9>A=Ee'l8FVjo=.*0b4,o(3ScVf
%C!@iLF>SbK2#0&SO'u6J;&2?$13_7#d82/M&"!`>bKIiFjRaK(>^6kTHL454HP3^&jlI<>'\C6G6C_:oM?p!QZ2,DQGBl2%c#ZV*
%1:3RL%kUuoTon3&9DghPBWY-!dOU_f32mR(]b.#a_jYGN8S7>mA6<r>Q]9)9a<.^EE?=jB`>tIrTEii)bKG32EO4=^$gPX18UjX[
%4<Ji2?P]"&r)&BYOj`8urgi"]J#C`P6JT(*6MfRc9SAX%K#,k4+e?;;RU.r@j)9!uH/j1+dEu[))oL7LgI/KPVs>T`%F)J)?+o\W
%l>p`gS$_<\B?9*=EEVD7QU&2[aB(pkm5,&Gjcu9[,PT1:,$H?M2kPBi2UXNf;Vu/VmLmc8L%l^,CP6jSjl/OXjF#_P*7cc(Ba!3D
%CQ`Ma/QO\RnT1/X6GdI_<_.C$H2(.[EZC8/5"SKt$p]3,)I2p62s?/A-q7Y[9eUfNm]beNKH*QcccTr3'S:8d>h>m>4>Z0rSd9*5
%C6i`lcnu83V"-Q-oVcENi'1(rFGXKH"=#KdpeWDlMYlU5chW<,a<4%76eMNSHT#RD)BqanSVLciUbgAdk>VDV?.#*9l8`@$?HtH.
%qi9ppgm[DhK(N=iRc[g21`DKnRt,`_bk@kjRlJf>(f=)<8SJ69c]bm>J/dOZAWZ$&1Ri]r1alqP7+3_c8LWT^UlgKDSkCQ4,5#1]
%G[gA?#@f'VLRWi2I4kisiTFd:X'_R3k(!r@B'l40h@OT&"\a0$r/(_:K,=f72-e!3m&#-*pFr5.:Mdr0V[:0R]/ebi'VcS<b7dM(
%)pEoBNG8S>V@`o`HIRAf@%^8l=9d5'bY7A53//Z!9SSO@=\LNuKD>OkK8i4d*apUAp5/`bT7M`Lj['M&[`(r#lCK$$T],^4'_>!4
%,GPA'$Mnjd6Pu8sK2$r0%;%mB@`)_OofSRDf<T4$B$DSbA<^c_#$B!Bl./R3#WdnuE2d88b=X/":_e%VSheNSl,h@M/)(+qH+XP*
%NSD%S6AI@d!Sc(IXFDY\'P!uRiB'lCJ6fiZN'M1"@U:7OAK(pu+=<ic2If+a&$ZFb:[DBf%GMW&Vi*Bn;NMr[Oq39PaU!^)bY\H,
%YU0CX4O*"tR\M@$RV$0-N+4PpbYL=#81M[mL8IBa4aJfT!ATtP80XI>U5Z*Ce<D"3gD,BhdpY-Yp,<+^32XR>O"jU!9E[>F+>,=R
%jCA_FBp"8P$`QT?+pff9eFI95Sgbf,INQXD4?_"f&6`ELYtP=@rHN=oSgcG1ZER`@geD*g[+o@4bk-p!fHdqJWCI$,[q(%&T!C1D
%=Vr=s0S`a\9FSE_1q',XF*66uV*Q<Vc)`Fgal84,Wr"DM,m>I2FNmWtMUnOf$murTfddDAH(l6Pb>?GNT.iZ7D-ILXX[_:8Nm0p9
%m]b_K5kFL?%C!ChH<=^Ccl5,'b<[nnOc$S<;aC]:r".>F>g.>8.NfBF2>8lN"EAQALCP#X'I*k7@Ynn,5G9P%m^o1r%Jgl@1G)=8
%7L/2r[KLrN1b@N=`4>pV8Jt7e8cj=U,QtK!T^Yt35RlN^SNpX_+K"JE'j].IdCZQ'BUY$K8Tl'6b$WKhA@%X7j>7,T(eXC^c)NdA
%*sd\])SSJ(mIc:-$)"8s-c53=WL8dLBHb8.!TP&hUB%GEC.Y13;cK%pZSYW*l%=*^UWF'7c=CWXEl&R'aO`:>P`)Z%MW";23_46;
%!H$*>@M\8F$NlZ?<b*EnNZSeJZXoqC"SqR)qEWq;P"B_[SjfRZ+,!'65?dtqc,l-FBeX[4lFLc170!ZN`4%j`d,MOoe^$jQA\B^S
%h27L4fpa<UCc6ok3[3G";Knooc!V<b7:mr`=n`B1/mMJC6*s/4ZX$MVd59FmLnf4o+QWhGjHm1qe<U;KS4;X$R]mp!Pbjjt+<Y2f
%gC,6A9nqlU&d5HObc+-%h%LXs0XjHIEb&2g@_?r?+3RV`NLU>]aXKTAQ!rrAca<+#[UNQ=R+LjB[94!o@VFFWpX&T!-,iEL#hq>M
%Xrt:r=*14ga:MAJ;H(PNnIWKe8jg4V(Y,;.Lc[l5=#qUWi9^<AlS4]=m]6[[>?;*M'5D<cGoi-E6lK6E3gPL)9aUVeUaEk"f#?i"
%S(dqn?*[`U0SH:g:^p*CRq%NcLD`KFZ>Q*$(-)_jk"BsDUZoo$6s:0+F]p^X"F`mdNJ+;bYs+(fW'o*NP<BNp$B6C_G$kUA#nU^d
%0k`I%2d+Mt+nn,73[>HZ+R719IPmTsVBURce!9^#P@KGi&Wr]"(("\d"7ntPb/`:NKImW5Nf672$ZkTHY%RF*NIuq\Z"<o.S+m/G
%7Z*J.=qdZbTH^.?-pWfFB`Z<HYcIlR4U!%;.Z9(TXOd_MT0*bP[L'\X/8,#BcTuV5bqf$oq]N05,m#).edJ.X3c$Ds$B7@<31.:u
%Gc>JhAlMiQU^N;P-LhT<SUc*.0Gq`j;Lf1`(ebKGj)U6s=LTXT.HjICYb2fZ.1(<@"pA'b>4O#a)V7e^c]Nf+9727@'E0_;/6u0f
%AN<W&#YP^r1R-Cre?rZlbD^adRS=87-rQ/?lU5k)QI\_Pn/4O5VcMjL@71/)fRHe_bRg`[eRq9lKS'brk?>=ZeMX/&B10GE]&HoB
%5RgL[C\]a+L(C2B`#Zr/RQA>R.,G_q:K6;A"=7F&;G\1qN'NECjbQ">3FIXH@uEVgXjO)I(rq/iqQ[Q'@1(IeE2#K"RD(0_'<rIY
%l9hl@C:l/=&JGb$dh!'F(hOWaW,;sFA4-4@4L$1Z:g=OR>i?S.A-cQ.[]="sCpLRJDAa$l/\"kq9T'g1*#QWXQ*i,pCs.cLfSZZg
%:iD;\C[6k^lq&/!P28ITEBRHK"D,al5R`[fX8-mck^CrZFN+kD4.9O4YnY%,pCku"^48n#nj-=I'bgph856=Hh%5;Z[c.S5M*Rj[
%Fe3ZZ2pebq\EnO8TQk-TfAgG?WON\/-aC6>B?EQjYb,Do/(T;XL\7kG'iL%SS3XMKEh:lD]?:2BSsgrDMd\UQC,hZ<'6\sBaAlL)
%/"'m]b/qSj0SS+%4F"Zc6aku$bl\7.V+;9<giTsTeW,hs:K#DVm/_3!I&?^s8US^c,&p5u8TBr'=<%->r]04j:5l)+Z2U`rE/C>@
%7kpQ'%M<IeJs%?i-(k7kSur2Gp;-g7lq#(7jDcERLUl%@*F13?7nElEM?.8Q[P&cP1!HT!"=I:efj$'@P/O[F#jW]&@ju]"=f*:k
%,c0QM%0-b@_o"AV6Su$Km?00nD5G05LmXppl<q)eU%HHkSOZK,57DU&TCf,&q@j?l#V1+7PGr(A2D[0\HNI>.Y9)MPfd:iYG`[I.
%N`reB[';<oV\U>)4I8JfJ]P`pOVf!p:)uu7<MfA+nAOXTU-P[.G"ij1Nb(^uN>XAL6^)4.+NXjE_LdCi,_-;)'m(RJ\5^,24C'OA
%5W(nDoO7T8+%cTLOL<N=mR7$MT$ltsTo;ZOabD2(;)4Up,FtJulPKtY$c58nf'kOSU""stki2u&9PR!N9@j@.g3p,#":$O2(dUID
%<0i<X^3P_`dcs[HPPJ=AGei?2f&IK@SAI0++m-t0!MYhn"jStnGSS^C!pNkknIbTe=Fs$S,7_8R]&HPlQ45HY=dlXI4G5g7A6QQR
%D-^:]J8tc%:n9^e/kG!V((^joFK2rf<L@_]MJBd0D6%]koV!__"sE94!*:mE!)ZZgF(3jp1;+*>aKV>mBHX/Y%gJ5sliLA2^=n"U
%U,Bmc,lWVpSb07k,_4uI?-guao[$;YNj7ipg[D5+fNKO3n'?fX6"<bYb>rcAB[!i4O;O[M&(['gU/7.RNeX=-:&LtEZYeeZn-/)l
%&r8.U:CC<,<WmGSIt\T(RSWJgi^I8/^8f?j(QbXH.Kic)hi&aWkg0s%MNKX2,*Ek(5F0UX`;#VOUTZr^EJb$9!#"3@5YN!+.0aQ!
%5Wo8rO\U!DM!hJu-]kO<`rt:ZjX`Z-P;"q)/dtbs(2r2'+Of6SKJ$*A5S+nTkH`IDi;-R`A4LcVTfZ,0RRg9h>8WY_Ll;n:=Amlp
%6:k9<Su!Pfmn#3)R:ZGeOhjKY1URLg3<g:A7<T?#"L!?S2+Kp]ZPV0b4;Qd-+L!!lOKY(P?YW<%\miFYJ`8[e?'bYLJ8,?/0Z[Wp
%MEN"=bH^HN;@dqJD!5$S0Oi%RkGimg_3n?bE&aH64pY;.b.+lB'r.R-e(fc<D"a&edQt<Fj1`j:1s'4M=+\ROPlYg?lJtCUH3jM(
%kp%=JUbW1rD2\.=PVR>T?]U@a//\jA5B!UU-:3P]QdQ_!#'lM4)WYPRWj2FNN)YXdGV&H#jSEOBKH+)lQT9W@ZM^XRa%L+F&1d="
%AlM^I'$W172dYX[n2QgBSsk!E.eD30orrnq*Ym6D\Y\G,fFXUTnr^$EU,XTrga0gH:0?`[aH]3$N=@nd9ao>;!7]P%V@h=3VoBi6
%nTA$7?l6%^MKalI2R3^Th*RDZcQ:k4>tE8<M^^p"5bV.kb_iHW7murP#Qo,s%j!D`aEuOA9Y?;)f=F4-M3+EA#jA@AIEk4`La3U:
%K^7qQp=&#O/%+U+9&0;)-W+PDIg3I9hV_:t@n/Y\qf,n/;k-J2[4e(!c6/3\Rgd_)@=WVY2ICk8XBa^L'!8AMYTq=lM+"\g#T($h
%+qj1]VNp+r[.i+:(X+,ELuJn@1719fEo9)lWl'.*Ch;'W]\A6_@aYo=%:;d\a6#pMcJ)K>AEF^U4+oZC?jnZ#H7TDF*Pi/h[Y`BK
%V"HZni5(5"d,7L3n3uDAbVY=/PE!qMccmo#'BO$#(7o4HPdapX]gLg/#1IQ7_C*mr1L"P6Pd$Q<N^i+"3$tT?F#&SFd@%2"T[p?c
%aeR!]Y2B\1XRXTe-&^`N-&tY'e!VcW]<fG$1l)_^asqJk30--7rV_]u2AN!oBNIWs&5YcO7GT+S%_MTX"D*'g7imiX8HK[o<U9rA
%P1W&K`oEGg@i?iPB3Vt.bh:L*AuMAVJ]sI'1&?"K6I:#V>@L]T#+(AK<0sE&50?/Pq9l_Y\'MKgD!SZqbjHVmo^ahKY+eVi<eUD-
%MhAFnK3.m9mJK9?c-H=R84c-h%[kRDB\:Mii#na50WB07-6#]o!ui0_1bCaH(fa2(JXe&;8J5Q4pq4ZkKb4Rc.=hIS^3.gBQ5gL@
%Yo@.+5qF9A_H^^oJR2ReH;ek&OKFSr!=]:j2!=#='f"74!tEBH5;,C$51E$8IS0WhOs.lqFAAP%&>6t+lIa%_-%j"p0VS]n-/H_l
%I)Y-MHX03F-*p\KH8^."KF&X^88PqX@L\QuBD[h_8&E<3**1@[!sI"h:1D."ePET-OC&06Nt!co29k:5;&pFO)?oSV>7>Ui9f@T:
%JOi6U[.7#G=E$)uEW^SGQF@5Y:,=X;8erI6S=V[j35!=ZK4%YKEgo2D^-AC+*0p6\iG]"iK(4R(Or%t>L1VViaHp1P_r4@qK`rcQ
%'OmOVrYRN&&h-.J[,oDLEo]/UC[@n'Pi:\)+8UX\ELq8RB"BU0Lidt"mgutCbcPsU$Z%@eD-Jc3ps;bMF,Zg$6aHt)PX(%V,/=["
%LO'i6/#OCaK`A$$i^d9RAY0tcf7T(Ek\>1%6+RD_&CgHM>IC/_*I?C7idqB/dgjg6'Z:+*WL\DHem^$G2U)M![BBlV/D-U,!3X5a
%KDBY`499_s5\CO6bC73dPZfMKF%rGef`JG:DlO3Gh=FWn[YrsK-e_u/aL/6=\U@Dak'AM?6Vu2PN^+n?_a,-0V-AGt02UiSW8</6
%aVia)iGDWO`Jt"NcNHjME>)/4\`G7?V\<MY6\nBE3o0o\W%"XE>U6P+\-.s(H'.7u0MO_6L<U[5mmW]sS:Re0:EW73=%6(CFmR<@
%*[$'GXBBZ%DM``Y/7)?eJARc\84S>)($+M)anB/)"+F0kC!%1?[4U&tP.WQ#,aACQ*F4s$<RcriJl`?K?GQSkX2Xtj5h8;MNq^L4
%202VM(A:#O:'oEN]2?dnaZ7+$*+97=;j-paW<n:hP*!n$:J^^r!+_tD$Kq@"h3[Al<$U=/b.pTGHYPd8Tt6s=koE+uEagBEc;QfG
%Z>U)3ji:RZL<[ogojmNJ#;<_#OCR"$9g&\`HFs?t$1lrD%egd'B^)[YQuaH)5uslB_4)sNBB`JM'Vl;EX\\pI`ZEf(.fLh]gI9[]
%<(_dA%>ZXkIFunDR`I?S`rKdfbcjRD9nL#*c*O4Gc(!*O8Kt-9'Q]1[@E]O.8mPA#-)?gk4LN77`P+N$4stM/aM[4hG,PfMH2UE)
%h1/B+d'o`;ABe(SZ3cYK`a"gJ0_3#D7DW>BeGqO0PN\TR``m^8:?[4B9XnS%Eh^k*B:=8<?P)/6Lp7&X7sh4J!]AU9NIZQCS2(80
%j6P\QBTB,cfq(gbZ/KA"]'u^f^+BJ!p_YGo=Pa5a8?oA9l*egM[Uhu^%-]s%m"pd\;m7U@RO'@8.Y*ainr^"c$%sNF3rBsbSKC*s
%99^cF+PXss"6:nmj-nDb/Y3AC+o@bLiX;2369a::b$\Ta=UOG(NW>6\7A-BC*7sp0.H/'W:oR6@b-21el>50a"$j>[E3a;JBLfQC
%@3n8eG1pOb)XM[ZfNRBgg`._O6R^]6AjjR:\PE3_'E\oW*)(J2:`5qp3Bm4^pog;aKR?*j-,:/C@Cn@N!b<5o>&4HU"Yg/<7VQ]Z
%ckDcUOb&hJZEcno8s`]idNtrLr)m+-<D\7aJ*R1/>Y,T*:cQlI1H:-,fl%:>U)8oc9ItpuZ,h)7>*B@Vh3JLJmT+O37*(+r=B)WD
%ME]%04b@GB\QOcBj8`k$7fSa4)VGZU<1l`uPjj\dn)>i?mr[2%YX0V%(D&itWIhapeZ6,%`;JTM5p)4o[)P,p]K9g&C)]JPq`)&U
%D2H&Yod-\NY]6C(*@aD[5Y`CEOJ?U=2?^&tJ7O/L`1EGZjoD@@=lB&G0Nd1HdoBE&a2DJg_q%d1#:X$-L6(DunJ(37IZI*S9?`<,
%gZN0`E'jR>1.o2SmHY>L90Tqa;YVIZ6SpYYcfUH'Ur#N!FT&osWg(3]W0@kF=)+*_^pbV--n>IpI-daG&`r$T"=bOma^u*7*fDHM
%"F]PO+[V/eoGN7_!J#9WA&QEG*/Rl=@^%Rd-RX`YW[(C]@4ajsoj!&M,dF*%WQ"]'N#S-N"]**&j[kOJ'fb`P4ZH;ko9k>jT&ml"
%k>Zr#58^g\KI*H$$O@<^LN27i6mA=Zn:tUFajDI/\m7>5ML:j@VPpbZXW`f4q5CZ6/@"l178Di46;,DD@7q>dCZ'ofOquq4@60Qg
%DINo-aGg\GfJMQ'l2YQD',_EX'8$;VDI`Ft5oQO6eO<MQ7GMgT/J??'Uu&W&B&kbV3r]i*p_0+8QF_h7RG,".p^XpnfU\+VHUp\M
%jZoN!A1g&o8LB;95nGn,#e=B5_snI^/fWS*35XgVc?l@MEfUkiS?JS)fFC35P0<B05fbR^-"c0m\"]8Z\&ETRK#4T3E0&'Qg*<QX
%E.G_jehI!FjM:!m^N0snq^LJ)9?[Sq+NWu+$:8'e'Z=u!d_JO780.C:fX_.YR;b>0FlS8a%F%`r(V:5DfRgnmc>]I'Gpqn$(5/q?
%i3JOS$,jGSVC1WF"<q.tOXEFJfPm9*o3ekHU;QA-;Zo*oRQ=\H'C:(i$eVdP/fgNMF8FNSGJ,Ei29<JK,F7kg_+Lpk"--Ck=Ylp*
%QdT82227Rt:Y#aiGO2XRjS=+:JH./sQO(_V_m:$_l!49d+[^f#Q.,t(Qr-kR"(N"2UUpM/Q801,/aCp&n[G5pb]7;]kI`^LXYaSi
%i)GDCF2T(<rK]KX+kaaGP_r(qJ<r^'Mr?'\-m*sb4e)=6<[sH!,9M`F7f,S-;S?b"U_f!2lrF%iJST"^n\CGE1WR:A%F/\q@<XNE
%_(f?>KQ/,%rCh_GB7\'!JE2A)UVTIZi%+R74imFqV?0NbCN_P6VODoDqGL%qU\SBml'd3c6nfKfnCdq3F(:t@Oq[pSOdc`?c%ej"
%+<MbWn%f6n\U@T!7DZn3%5iVTBO;RSCIYYQHYOsApkgLlljLno/SL^W;k9ijeC#SI=b\E)7gpEae_lspN4.Q$EeZWn-Ro7eNFs_G
%DR84)-q'Apnte_m>G.MFX-9[d=h]cW(^NlO9!84P!-C6=KO"V?#W62>%%HM6bYg<0K+(r0E7C9[QT\;B*R06K1;k'\E1TbV1D!9N
%bQoUM%tGqIQO@Qn]S-t1)AK)1%g&fYF5oG0R.'fI+(RhiO9cg-q7+[7<Acao#'Vl.HRPjO\t5;89;XZd*lA9nE=UA#)+\3NkYS[Q
%RL>>R+Z)@eLFL\(hDFcQJSr1+8k&**Qn;`WM':3#)AG_4H6,>Cq"XnYM8FeCdq2!/KPYo"RMg`;a"KIm0-JN":1'B;A;W(*%q#-m
%\u&)SEY6u?_da2]6Y&.9D?P/D8"-t(Au5nS1EZ=a*:(T:#!=S<=5dM=G@m6N@+;47UTP"G`%F0OX/j]sYRa]5TaZ1lFQ9AJ+.Qjg
%[<7amDajm^A1;OG5-#/meb/\SKBL03KCP3GA?S(dRTtlKE[%[N.qFY';DCFZ76o<;6f6=G[E&Y5$u&A6Y\8#HM9-CJ#*]iAJ`M2l
%@cf::nNcS&%_.,KY[o![n1>(,DVkOt+i%lN9o7ooQ?4Hd]Ym-:-^kUcQZ/W>*<uei<)krLSfo:d!RfJKC>Js[PU(8]lfUrQ=fnpn
%%65JMDT"Jki;SA2fF+1AB*r;rSHEu@<I1<RW@_*TkLP-]]g)gO.dA3,M)TDpFl8QbN6.R!#%q]p*sp[KO[%/^<VZD*c77m3ICV.d
%0:-0I&ogB2DKt-q.h'XCp]:O<Vse16HlUP"eoV%4Z#OL"p2%#l7!1Z';M$P]i*BSOK#Ngb0@hs""iB415]G$R2J6`XbFq^JL@V`?
%fF`rC+<S#PZN*f>ESFI=Eg?IGB*2RMGR/]51re0n7m<sJ6`/c#m2>!86gn9k<W-^ZSf<'(P.G^'ZeU?IAE?6FL@B@+b],fZ!JoN6
%@>e_oS*dZGWb[eX4T[UR#]fg)WIZgPI)/lnYbHrlb7@[NR-HZ%bbHhH2#sjDf2<E7W.\_uXRi#6+&2JuGBpo-&&:+/n5251?,ef)
%`Fn[f?/<`aEfM+]kVM>C+-%].:`^^,k!SC1):]t0;I)f..>S0Ps1TJqk:@N^&r;P3gN)MKn["?P@&WsuQrblmHqdB++=0q)H>Z,d
%9gu%dr*[@2#uHXX76m?gJuMs*%+CK\/?o`"PsqN_,,sDKU-nW.EcJldQ3\H935'jXUuAk.bc%,TG*_<lN<#Jp<;-e<fVJefiU(2'
%[5rsEWFJ!k1uZ[5Hl1%heg8]a&6iEViC*R#I*UFZ9"LHA*K$PAWutf21!].ZnMO-hHsQiQcZ7nERcbB%6f#5e>`+/Y+q";JXt9Yp
%h3JO&AF2XVBmfXT/l(na-29I^la`a,M^%rWGVbXIP$HQQOH5"QU,04gELq^f6kIsN)(k2<!YD9C=OF5m*k!&"D-A.2I,@g5f#2rE
%RYl/`G@I]5(*d@@W%lqpB?F:.E8Cs\aOFsH4\P?cp]_;W!UA/TN_!:;2@:$8\dFfNfklg$Im)\QKuAEZ/h(eip(j:hfBb\_=!V-W
%!Jmj5KfhaD).KOcC7lPeh,uhM4L9dr,6jLHVQbdCWEW[k>a))<_WM4,'A0HAJS_:TFVS]ooArI,E[sdoGTa2HrGfR/b*L_)1j,(K
%b83Bn6GC%2`H,!F$3N05Y.bcb8?"+-Cu'&q(_V?h$9Jm?VQ2/b$KK3He]o)E'2ooSD7ZM1jUd=TVq=#S!NJpO'^+Cf].Q?94?4PC
%$A=H[nf`#0#R//Qj-/<aXsRDo"TK78\7HRt^/G%HMqb\@:-uJ-Nf5_EKlmR[]lPBZAomO1'1m_AqWF:-f<ZXE5?HZ<LG\KV2)I]@
%@N\%&3*,5(-2RrJ6f#;iVs^;f:\^k287\`3lf2/#+e#0^L.'(>F=6epGfhIHRu''kq<enR!4`f!g!,C)]"A-g'r,#56SU5UmB4%F
%M4%(`0GqK7.rC4s!]82*kE$=:0D.jSM(j,.kfB&+.8c\tN#_K!Ki-r,$SJ.hVksqM",71^eFd6*$U1Ih-g,]8%0+a&V^m[sj1cja
%e0ZP<n\U13q*Z.2g4DaAYsf$:MSs_PfFjuMWX4:3(A8B"fYN*+CdFCUXq!*'%d3?_8N2AB;G[um)$IbaODahJ8EaI?4qpfCebL2>
%`OY([&AWKNo3I7?iEH1j%L\s599%T_&Y$Mq<\Er+Y9k@&o8l5_JL;G1:pC&fp2Oc8"#,+baG&;oJ+`2aUnoX2T3h*blOmde%<6&V
%fD1Z;\fY0Y1ZU'Gm(cSWU3[lHg&KCTg[*Rt,hJJ\TQf<j&9&!Us.`_LpWaBf%<XVV2,mKm#Y7Q(P)97s^AV8J*]nQ5A29R@LPMtj
%WBlZ)4!HfB_qiS^Q7_uE=-'/u7ODcC8E@BSlBL]bfmW]5FF>_S_YCfu<-jhl2S!6WI2LJh3S^JljpcI<T1nAk9Yt[R`cXK4fL;F7
%iTj>"^9ab;m@+pioX#5\\VDED?A&!SR)oeL\=tq`AjLPpW7EBkHZ\g$g_lT%F>9YEE/1aMV?)\'i$Snb<V,3=Jm'">Ppj+dNXJH)
%;>f,-ANK*ik0;kAE!^HB>1?,HWr(I\atlZf/pdrGD<ns&1tNlR^,8"HgZ[^JH1=A83h]`UM,#1Ti=UTLOfBO`,P,t$4tNMPHW)4k
%k!/-81(=:SD&r`fYo/P@1*D-_pX,JDqs)mIE//icU@1EPCF_T_OU"VYfgb$;P=^>&BGu2tD`k7YH!n?[KH[XT_L_s8!^=h9qTm\>
%J_$@=Z'1ku%*]?K-,;@@GkH[#0([Y=de&WNOMOaQ??9WK4ZAf_@EES#oc5<[]eGknOUbnu-eihaXC$ld_A^>XhXK(\9S9Br08$3G
%QRJk)Z585&,/4e:h/'@C`O+u,"j-%IM'OjMhe+D_gtN&_nS[T(MfA<m9:oHrIt5l0-1`$IS1tTW;G5R&Fi3Vf-P440P(KLD"mo()
%+HU\Z5M3P,4T^.V_7Tt-GC2Xe$i_g19&9e$<#5aQH'@GZ0`@J&6Tku&=;LPm]Qk*@E)j0,k5D-;K@j"kS1oQInK@_?3MjLr3D[#5
%5[(uXY<\#kHIKL6kq.`Rg8@]mDB1SD+*?%c/q*>$%I\6"@tA]?XZMT<g%7sMJFfIiXqc(F$@2U'?GjEs66R0Hosq9F0r1<G@pFb1
%BQjMMY;SFK8,&ILBumWdAP<pM8.b;N+58]C5?*;P+5>2k7]Y36P1R'q-nSjhA$!6/dK6h$AUo$WI45'cnQpL:UY^ALYX?S4bTp?P
%;?\*f%63nm.jcRqJ!Ub9&0g'STNJ,b'K>Zk+!$kqMS><hB/`[pO<Snho[>@IdI]\OD6EZm%2ps),Kp>&c=kJ+1'-JCfA:VbFK;_1
%M.CeB&Z4B[2jhF?0Fn3PQ[beqhS./fc5#rFhh$:TE-a)E*E\4+U"/)dLm*p4ZH>*5RG`\"F43C?@;T9O-#0bOjAo-,Q8:]U4:@F2
%>[-6=9LlD/RNZkldA\)N;7fAYQKi&@;'6K"f#YCR"*]s5$6*5!53gO+Nn&U,-#)"rCOa+pD-sr(D\FM^p.g/uqaU`78%LDTj%kTG
%O1-,AeE163P0X&7f-O#%+f^P1F+#[?3abf-&EKF:Cd"1rW_=4`2k:JiMOV5^X#k*>n*&^4^b'LY[j]<k_9$?tEH6,s1<^-$=VEbt
%8AXL$]T9q5'5@n&Yc?K,HUIV\gp!XI!>pY!qKqc95h4kU*@42g@;8S-"#HQ@ZNX@bY+=\0`Rb4^HV?!d7X6*JeU1[lV8R9`6ojm+
%Lp;f7,gAW?:iY;AQqI$.N!9D,+6C4VSMjH1,I@8`X(Tpt`*f/"X#J?J;EF1<SDP$J@P"CsheUqDf%$:(+BcZM'H7_Y)"N9tHcH&l
%A.<i08i<2IaL`3Q)FiF9<A8mN_nl'Sh=&o0#\1]mrWO)83C6'?^05B3q[IW::D[eQ5>/,tlV>/4MRO[CoY#ipTQ0CJM_M(MU)[0O
%KY=KK>8s;tD8&'(*TbO>4^UjEnmSSDVV5;!6X#[dl[cupYZI_:PiqPO*,.(F2C33Jb)E==/GiS?Sl=acZ;X&>__7h^MJ;?e8u\eE
%jP<YVctWB-[%;R/0RXPX9)Ie1=fm9[[.(-*<1[3=nN-$j)WU8+j?-:LU^Pn&X83[B0kN)(]LK\:B0R5u-O9XIp>`F@.7WM7S^V'@
%_ipmLD$fb^%%lXF/W=a].i9sM0B\r>Np;qC>c[%S:9k+f#%G_P8tQ$((Mf;<BJg-3N],KncpgS%\h6uu%^O7n2:ZYCSR=pj4iO-M
%$/V3pA#iLKL'XmS4d_2lrn6K5fjp$1f-ukk8#`n"BaH]^:OhP!^2gu4nhnJ"$Z^^D7a\-`4PZfm?4&)ge5",Pm5&T8q0/"Rl.f;j
%4]iYPp3VpGT$:Z"`3=,LlI35B#eX?+TemSVO]s.oq6R$*_'Z'OA$]^hUleTeb):d'>6TfO87rQ:h8:8&nT7kJ=X_EN"+]If!QkcG
%ad]u_\#G?HRhoY+SHD2mVLGr,9I+N^EIo:T5[/ZWp8r/Vh\OFj8CAPCCT'>@F5$*6RVe(BAY*I_#"`/?e8?/3Yo:^r-Ma$u@';/8
%hiudKa5?Y?FaB/oY<,uuF2+n5RNS"ms6q25H?;G:?5!;F`jpjqKcg0?4s9'6't#HMo?6)$-&2EP(?q78iAL>)^nQ@jKcum^I8CP*
%k*oL(Vrf=k,V:\-m$bZe5+^hps2.M(.nd".:FSY'nEjsKI5W%P*R%'IY*X&'\N.?\'km+(aqK4+@VM!hMf+4L-!R.tl>/h@!`1Q%
%)Ug5O92!`$m%Y'DO5De5-3Om5(-c&laKG>&4NU9p^?onGES=PiPX5=X2/CmdIX"c5@2`>e)UQPMeS-`*KQ0*.goWlaMT;R4:[dd[
%S)n7A@f'J_;.:VFk_IK'VIL8s/R!:Fejba,(A'F%%nH"\*lJmlcs%`VSK5V.D(3C2Q+-mUiL%<f7m%j#7sVdCgr=g8pElM+qakde
%GR\@F`!Yf!dNb+G;LZuW]-ga4$_+&THIp!Hn,u[uBN5NL,qG7ZXng4fg\6$+XFHVO`ucjO,q@)aM7$\&].c_9"`-YX.<L.3MK3o9
%E":](_[gGR$7W<@e+s5"R'SN=mrh"`U$KQ'ei];_FK6`XG!&!16X4qOgdY)CY]"a_WZSsc%dj;/^]1eCrElb/6He6(Z/S^adr5,V
%p1JXB-i`AErTjL]pO>2)X*snigC\i4ANUcQ4b!42[&^-G*4[-&m8Z0m//NPZoS;&+4MUYDs4;c#o7-c6K/Oe$FH7M-?;#J_[Jb1A
%EWc<u<tuC^\BgR%l+19p(Tj;Gcc5:6e;`LYUhVZ,OI6ii4J=GG.<Sdgaq4&RB8TNerA^"l`A2iaR[]C$`u1^A6R1dP\Ch&=%p`8.
%5\ShdQT<kPHL7?J1H-LuhU/ckT&7`[p;j<66'Dt=p\a'sc'GB?n\.1G0h1EK5AY@8q]('H\Z+h=Wos95o\8]B>/k^j79)uOapeB2
%d3q,;Q4Z:@@)WPOOAYtLTW4f(BaZaeY#6e?"p%kh66Oq@+SNlb):7i_E#`R`e]K,n)7fo$Qq!:[:9P6X6OTZdW6"8<[^b@m+;'Dc
%8Z7r+U=@keA;p(h;6dRf]S2fuh-D;,TD)Omo/)*ndCcY^M%F@lL:j!nqXZ^2WS1?Q1ap&FZ3Efk45%HV&5Q[JWt(X\JPLNWi@H#.
%Is9C?XHMO0#UU$W<n<btK+8B&a\SM&KEpVs(P@m0B4?<>*h^YZ]/C)?J>NjQI.q'ka[D^jEA#+iAK6qVj,#!XU*5)d5k;:heBB$g
%.b!A;kCuX$-?dN?Gu6GDrl]O48gEJ)=^Mn^4/?pG>-k&i(2-7XQ24t^[r'Sc6PO^^4UEk_a&CO9%--/<h`\AjUE(0ChqN+Z?9=4+
%c7s"5\i/tH_^r.d5_89(#8GhBMkYS<nZoNP2+sGVrZ7I75c3`K<7'G(.T:Z4*,(O93@up$V/M.kVd+L@(H@I:B!>*n`WqZdpOZ'^
%fj[4</dg*&jpQ:bBmHJ-Ce5"#lZUK0o!p&GTuT'$'c)13Wjo,W_BloPF@s,Bmh44]q-=I/G,dZ''U=l^"[1m'WsYO3^U+YriJ6nd
%r+C*QJ82i>Y83,&Y'73'\KM<8dZk[]F6DkuG`!L^,rpj7%#E<jYK$-JE1aJD]_X^"C7E*'3WTfed>(14J7W_qZeRD!39:Zba(6_C
%<'DI=RNbEL(s6(Qa_;(,ijm7a<M44>0gQQ6S+;T(,'JqKq=%+[26[dkisbgYZMP",d&_25+k>;ZB18LJD&c\bWM)CWZL4r>?,=h`
%a56<$)Nm>73e7-Z@VNn.9Zgd!5Y;.qoe26f?YrDU00)ZdE\+h(O9&4OU*EaZ&g:,#F]>7SgrKkTGUE8#OOH],eQTu_6]-ZV)7g$W
%fZ[SI\pYZbUoN]mM"o3GOrt,^>!ABd2_o/H[pPi2@jbibqCmn9*,2k]Pe=oRli!fDpT@%:Vq;Y<)O<_.1XXK1[@I=FAQ6T#s1B8p
%#MDdJO)iH\)4/'+9I&bM(FYZt`eR%hiCR5/)h15Y("UJo3G#:*_b.I4!&p&d,^g0Ya>ADRkm[ARCH%rkKkA9IUsVJo=r>u<3Ft-K
%Rt!e3#7KJ`3DZs"hRJnYDIboa5Cg.7'RYJV\2mbb6X:Pn.mS,<ip]<C'S?@UFdNn6PD'tI#-WAN+NAH.Yg.pbQmo8%W[A.hlHL_]
%cfSA>lP]$t=lg?]C&973PB50`SLn]%/^0UrZKf]5g/8(t0EXJB:\3&M[mj%_X5L:hG&`U%"rG7-/ZWJ8@8MP%)G(Fe]A,(ej8_U\
%B>%qq_m]b'6F:CcEZ7T==N,r\]IO`.paoW;PKZ<:WIfZXoQFKrrtO?(CT33[+eKA0ZkXN/]OVkgdlN@')!b=Wd9>@V&.QnN=<eht
%,(>E./)5\aj_0fW,$$WgHZ^hVLu"*mM2[-^+m(NX(f9mb+`SOs[5nk4SD"IGW9?RSO%PkG(AfHFZGpu<l,U&$B<O0n^$^glgs4Fu
%4k\6s9a*UP)u2hGGpg^'S,>*>*-;sCBE4.E9@V0fXXV`?DZsDo'JT?B!n6V?'<ONYW$0_"79*,t@-'1LX/C-HY!EXO2SH^?V4Zi/
%C>BA+U5"c!o$Ka!o::7kV)>G\2+9fdo2nDl1<#hu3YulQ!`2JO`[j.4\C"\87g-P]n"GGH7@sYH?*"n/fLA'56_4!I.I]rf)hD_W
%a&TG1p;pDF-@pJUW'16UM<ma@rFppZflJ"R88;\C;-A:d#Uike[iEHB)sp"ECK*D4[sK8?5RHO$'9>8hJhg*nC>O-jJ>7$cOlR21
%C-t4C&5?I)AdJrh[ab^g1GkjW$W;c/U(UN*m3qoQ?WSQE>\/c>]65/rrPZlMo8D7jD.aS`8e[%6n0^Bh&mBZ\&lfsPZmUqpWi<5*
%2beaRcn%W<V+M?E_80XZ&1#JrkWm53Eg'\66K,k_3!tR*c-dJGV3:A3P)HYAKt[Uh:3:L,Wg)%<'Bb!.4$mV@Wo09fIhgTHU]U[T
%JeM.:_Q353Oq`'./ZJuFpIk6i"Y$DB%:tH:o2'<72A`d[rp5qQOAi8PfW=@n$D@PM.XPs5abqam]4f4b'*_9e+$BZ+2Y4g"#IM-%
%l)\*8*h&^u31ibap5rf+\)1YLO=-$Vg9?p%,##Y]rCFZ_a6ha.W;jtcK-sQdm0X1=Il&i-EH-V6Ua\E(Or7Io*Y;huK4&t<a$T*`
%SKfB1P*0[^HntJn17=/<2@IV2<'1Il-WNd]LO&i!h$`=O5`mQ_9M>Kj^C?!qKp!`@/cV0g>Ff,!<JD*+!@<JqF7AIC!-qIlP;qIr
%?9g&q(7JYc=.F.TT.R7gYp_,.KGeanS;2OfA`(CXW:)2)q`9a3j3*]eF11r82NS'u[?2K.+%UJp42?gO/sU!sbNRli@@a&6;+H=@
%05)Qi)NOH0[kpM5=k:gee-#PdDW-0')sRT+2[VCR"FX8_ABhDq-r2A.HpN%?$rc9e+UU=)nr2U_+6frsl/)n(P!5S<ij?BG"L_]t
%1W`c.Dn#'a@X.gua*F,trGK.@2PVgi1OAhd7Q[;h(2&;*#5SDS5hkWecsr_%[l]?0o%`PnhJKnDBo96$-0&L2ad3a7.Ns%f47EXf
%k,%d<$^s(P@K,%hTdWs[GF(f>0Dn@jIE-oYG).@ho3@,LDGk$7c9#W+Y6ffdLA(8&p]TAT'j2d!)83LX^f:1(J]^WcD!R$*m(eXp
%5e+4c7:7c^6Hf\XiGuOu"GsLLbB"3XC*4#Yma7>M:Cg5P&ku;q1c>k$Nrs#-qL=k[8#=.sk8\u5_6sd$/t-aBF5BsBU?!"[HZ,-K
%F&4.Ar6pW&=A^A3I"UKVS03V?d9"R#=pD"cn_N;EjOZ?QdcIGIqJb!%NT+UaNBNn2.TOH*Y&e_N\q8!mo<QXX'J^2>ReKm^C+#2,
%E-]NRj%&t3].TR?`t53.!BMC1.hG1t5]:e[JV>-uJ$=K)k!48IcrI!@H9KUYWEduP3`,aW4Xf$j8,<@Z7f%f+OZqUh)!]:cYD2me
%j(YH]iYoG%TMWep:"s"u=CI,X+io4LbR&ruQ-H(P7T&M?3r=0?AY<u<lamZ!qYmj8`fRgCqj1a2*+scVfumm3D8q9HF+-3A0.gds
%^ocZc&+n_=^m<,jT_Q(.5GL9@OP^p:%J0g(22u`V3Sf]L'fg31kAKL0>W-p&BZn0>,'pOZ?d*P*V!j67R4>aGIeKVrT!Ah:oZg95
%f"%G_]N](T1(K(S;k9TtS2>PGY4H:TGJ5)+ZY9R=rEP-7?anG14%$+ia+4:@O5Y?''scS7"ffi1Hhj-odP9()9YP6ajMXf(]P#j@
%d]#s(r#<?H3u?A3B)Y8Za\B8Q-kOlg6cHA!4ZD\YWYWYNG&X(KQWWe@3qWEOM%9A9Pgn!WH;cYSiu-IqDTj!k<hF<nmrmGA00Z8H
%G]Y^J*-)a)NY]9YihR\3;bnP0#3Eor3e7G6Uo0VXpSZ0V"X/T1R\%q.VCBcFGK69,g,"W,`rck5_msUhHM;*2n"0(J/isL%:uU*#
%OBS.\2GH1"d(#6S^&10%KHqQNjB#W_S;*QWFWW'CG2s;b9f?K.;B_`n'*9iAX6?*>M=`<qIXlNF%^Wo3mXOlMV&`WCGI702mk)U[
%Ec*6]9>S2`47Q;@=O5>:pMnh+2[\_$+e3M$KhD2i/LHg>*.@<I%t6V1nt5pS_gh]mYlnE"]t@et*k2'fIm!<58!#RT21,2lgM:,(
%5-Yhu5C/j'W1p)'PQ&FYs5Q?DrEoTrTDnXnrp;B=ooK-?r0kD#5Q8FtqN(Ngr:e)F5@+%[s7)G*s-NBhs7^0;+moa<f73_]a+(i'
%nn%MW]-on`&3^'e!CsNW@B.Y"Oo1C9KU5s9U,Pk$(n:<KZ.Z<\ZM]WA5O410r6::InTU23I;&B@@.tnconA=,35^U2$X:MIZYQn%
%?d%1%?#9B/>):1g8^*QJI6=;!lk?U9ar,oeRH<kTbCN.&$%]XM6rQ+]2"=#:V=ej^<b<hS?_4fjX/1,pGE93./)04*]XW+4lXnke
%`Db#B]jacpH+1%?_h,1+%Q'%6[il@acNl"Q7WQ.2--^_L>IVDtje30s^M]X<h?-]%;[5oYJe]k%*cVYV[[^31oD*;'@ZU0(1G%i>
%3gW71d]6-%bCY=_)c,[gTg;h.#Kf&HL_FTM9J'R:c"bSP^K7@YS*/N`.s>r^Y!_Z]gZ[j$%j1#3j,Sn"6b>3ge=1m#S\Nr)IIgtc
%?cOp.m&__@:T)rAXdB9Z7`-Xt-ZmUWL-?VT"edbq[,>i4JGRk(,(r"4)nZDZT]rPo]\JMA+/7tsa):+Y\V2!8(T>2\(Q^K8C";3t
%Pu]si'Kt-&bRI`!oAXu+J=2)PbPh19hKID4?5bR_#r)>*hDg4-F+,gW$1d)niT9E(Y>>M=8uFgApO\n>pB'cf^"hligZ+FZTfj<<
%)Ht;<WK@&Z;GTdQ!V3?*Ai_(H2b[KV!lFebmVmXZ_XJUC_=mhgTtT]cml.V_CZM>.g%=\h@!EUO,M]4e/0R`;7d766N16]5cKPb"
%.pm*#5,65!B2?!h-W0'=dpjE/l=S*)*c(D3rj9/**%;[dKm\pbDKdelJ/+XfV)g&2I1DKSc#\LcO>^<c_mE1A_kj4@PYUXk'j<Yl
%M$eu<Al[LaTq<Jb#I:n.:FLUQF`P.M/Xi?[RMj.U&*Up1Ka3Du\QFI4"dD]U=()m-p&YY#4$Aa;QrOeW;X=SQVQ4goqfpB?:ATu$
%*pR?/Q><H67L1&DJpP^E6JbN,G/ODGANLfFCE01E@NQt^d8UE3X$>l_U6(,:!.6WX)*3i@"l5r!h!Hkca(*GjH*m''RSn>C2/%V5
%h1uY!LWcq`O@0q+WMYYh\iLf,_!nt8m^1mKGg4u<qO[T9H@`6HbS=Tl\5dC+CU1o1W/p<F2c9)C?K'8C9EFR;eIQeeJVF%iSG.U^
%$5$5@$*8)>3^Zd"?!@[i.-_\,[IA2u#[DGQKpTh@EZPUDmN-*5pK7g[_IG'tCf)IA\Dehm7#lk=Rl;aBfEqpl5eb7BOk`RC7`)Ch
%V^J^9;Ual2aN?ha\NJ9%pXbCGoZg8F[4eK$LW0ef&SL=UP\X5m52XZCl]Fs<?%WJteg(uDOP;qL4UC@8W@-&9?-fh2+FP+c;G\LM
%64sIpC_/Kqg<'21:U`[e1M@?n'-2@Jh)Ipn%'ANu*[oD#qJgi")7hZd)HE!I\+B??Uf2a"FOl:7UF)q*YLd3)(?id+KN3#u2hl3P
%gcu5s%WXmVE_W5`(o5N*\Pjd<Jl30#o,N%*eM%6s"A1o?!m2*dLu84>g!.#.e_8KSm"K>'iqMhb'<iO`XcWJN_J:$@CHd=#pH%GA
%5cMA4Uf61L$;jN<lhh,-Rqf)G\(]@g/l-TMrH7-?]ee1'-m#<4Q`(sGH,MSIRrXLgalhFSHTfe+h\&_3/`G),<Jp\1<$=8i;_UO7
%3GO7,S[XCm=/..**,<n$[UnGR)7n#BK^^K1*(t6R58ms#f-julQ4fb;d"*.`cjGO5\)U:AI\W_<6u#+Yj5cp/<Ig=>17]fS]a`4n
%#?=F)<1o#Z!R&jNETAD#5PiOs?P*uZBCPKGJdnpG/Aa/<eO#[W^s*W9n11MSOq]:;G83qpacO@^E6,6JDD]f""*_&9HSp:Rka#tf
%3kLi;e)@EOhZFG7)SU0hrp3+V^@UVZAD+A'-Y/+HpMC4sAs,3</RmC5FerNBc1h.;c3hQ#LmSem(PoOWDdG$dFN_NhJ%jYf"r=C4
%qWAg1CbMAFd);_@ad8&VSAM@LWD3d>PuCtRZ/Q(T..sg?KOuHNL<*E[^6i/%JcMZ5E'gC4S*IW76c^Bg/6GDP*;OPk[U\*pAE5$4
%ku'WRWkiqjrrq*cdHrQb2u<Llh/@L_`mG#M4np7W=o5!!-7'Md4NsfFcM1HPAbBT`^S3.B2n[P=K<,Z':&@gVpCE:iIR?UF6";0^
%^A'ln6.T`3gE.;D4i\)JJT^t4D9dY#0)>`Q2`e+bcH2@V=3TJcm]J[?#C'lh$^M-4+Ga$r-6"^F!FFFJK3`\ONPrR&SVH7&S=f#l
%qs26^H=pnLVql>QC:%hFp5gfgBZpeU2P9F"YBA;?hp]qJP(2id8F3;%.R(I>8(+O?*Rm6ipGgEe8EElmUk-[M!LTN7Rgp6J2XaC-
%VJDUTG-*k78I%XgYaC8Zqb_W%qm@oMbRYpU=rRJkl>nB#5j<Dd8I8lMR1l`,RD8Lko$NW/_m=C3M6J3/d^g<`]pbn-*(%g69rbY9
%p?Y3+PTV;a66%I(q%4r`N;DKccj<\=N[TE#eFgq4fHoRpRj)MVd]1.alU@/B1B\GN9kMlC<nJ<&<s;1;=rn#T,L'A>6s<[5qdtr(
%`YY7WS^W%P>(8c`8+te/lZs]AIZAuh=\Xb@Q(eNo%Ye[9CdOtEG+_+WDBOj'O_@lUeBG[nlC'a`H&4UF"ZrZ6<XDFB8Zk#Y:_m+;
%]a\S1TOK&Y8nk)5`#!WT$^J@-:i#35C*jRkkN[:9#\q]_c+suoH!9&MS>(<s6A)OT9MQHnD?iHr<:O)XW?:J);sOOV.$FY15a<B1
%``d'JJ0=E*e5dBf/^]8)oYT.s^$*Er[MR&^:&n;=6=!5+$;paK3JTS_#r7ikMPf;0_(KSA%n^_>^T7?idqCo^p?-\aqG8mK>gFij
%`-^0;o$AP6BV_n#k)'*g.WoqATb@=KMWghFe4fZTi_<LZ[`BqSO,(rGBNa[B/WVHfSM\GpQ@erYAJlps[`Y$1&`JDMR[ljI_N]ut
%m/B!*ARa&*Wf`64AtV>g@R-17eTR!N<?,:C3"Ce.+<*Y?s8K:c5O%)$/Z;Xqlu2"DH0Gfu44_%iAAr*N9[fIe=@`jCj>FF"`6'pE
%34'%uqc`KPNBe@MHYkg^W:pgtGZKV5e=GLJ-o7r#0ueib1Q5tcO:BI$>YNC2T;,"u,UsZF5M!6Yic(pd+eFrCiHb2G+%c3%SQSs@
%@T4lG$M@qakhr*>@N#u(TkVi?F"J8Gcr5t2BH)&e&1.8fbeL:4XVDl\[=VOtgOXRB>=4CaPBV&3e^LsGZFrr4$^+IZ_pZZRP$^9U
%;!WI!)H6Ts;>T"lOI%8#J!_haa8*m7HY]cSipPtHM;(1>IEY`m/1G]eRdGa=-uRB>$Il?oI"2Kg.33FGlX[,8Y)$gaP"Lna>U]S=
%#6sbY\libXokGpZ,V%qi'/1YjA#<%??53dR&h4'"LE0DE)[Oqdp0Y49\NulU6C>?Z(dpVp>OR.jHokW7MCsSD<ME$dakI53h&rjc
%CJZ=ug1QW$HZF3[NS2^eID:tHJZTnkJa*FVW@Nfpqn]Ec1&9W4)F""#Yf=0[VXCU-++gro_8smc]q:CG\oVt\FiDE*)nFA]_ng^S
%lHe1Y?`BpCW@9.D'Z!cL)qCq3/PH,DPK@1@+_qY[6bVrB2g4SXCV:0$.?ha9?,JGH<2(b>*1HJ3Q;s/cIpEhdfmc<,Z-Z*]`ogQq
%2PlqT.eg04k9.l5=>/1__R:NkMePM3-7#[KF[RdS)gb"nVdL-sdjeQbo$3lB2W'iM'[&#iqqK$q+Ceu>h]h>FR"c^-XGJF`dg7#f
%B!r2TG@oAn5E6BSXi[-pCT$NNH:`"8WALXO9`uqIeB,UM%WkO=-C\15ecS:@W&Ts71U-D/2j56hdH!UG&AjZ\VNtnRX<kjKL8/JH
%!5JM925CMi9tCD)=G_CQ\%DJ0rNf<OUVK5Ym(O[+UaCMZ+celI`?n05d_smHr54*i.._i.>CW3225I)G7Bbt!,6lE8Vu?N*K5Z!s
%T-Rn8%<(n(Lr#Na"jO\%11K_^*HAa<>4on%0"DH/'RW3Os,I,4^Xkja]tPeRn+C:?P+#[c[CQJkJ<D=N&;ICH't[;lT!$O%%T`A5
%m*)95W2P+.J!0.+*nD0e/&@rc<!\P+=d!XJ-A.4L9/X,V;YI>9YimtO!\+I)6+0?[/k^M-@KW]S]/2bFA[I4\F^A9BM!S]^DtCB=
%rCo[!rpnFJ*[860S7$t;-jCig<N>G7*I+'.@;"8)@qjS?YcgZT*>e8q)'ejWCK[sT+F2_;(c\$lHug9%PNe0Mrkc0C:EbHQrJ)-^
%N'&.ceoKc:qm65r`"D\+`1M+[Y;TBS,lQ0]n0lZu)VU[[Aj"N>YAd^`1'Ye"k/;&>8&jt$C=lZ:aQB93E795WZo^8C>!\D&,oKNm
%c:K9,l$Xle?)'VlqbML!)1^9u[:gi0oZ><pN0cm,[!__mhto*!eL2o8Cg9HoWe!ChGe@K<ASJ/9;jBen`&CdVVNlU(lHh(tYaM"3
%#@t"SW`4d^U6<X2aUH2c-8^i/OsV_?#QU??5OFk&OPQ<sRPPq4I;8Q$TTmE.UQr;>(S`HJ,Wj\4C/'P<'g>bm6BQA*PU^k:B2PLC
%(QpcPfS.$(Feuj]>>dS_1!4?lahI2jU]ANEC"`SY"ScNhE$.<UI@_^P,B[Pp!or)]^&"N[q@E'e]jt`MYb/l]>5c;jCYt.e7*H=e
%[%!e!!d,+X"drIBd'.998_V'nrt)Z:-M"OkVs6`*W#)#2)38HBkd=Si]48.`bOT=h3O0N>G#Ua7"pjKUMi3s'E-*49+\6$iTZ/%T
%CNFJd;4.rA9hG>G_Q3dD8h5LTjT)Rq>;"SMpSF&92AE;PDm>=m_qq,O-ikTaH0^#9a*ujoL\FH&,MRZY>M,e8DhdI9/sFnV9Q@+O
%F2FGl*G%!;pncdd,e1/KD0cGF6$2+Cane3RVX;-^K*/EM:;KJ^6\8:V'pUhX`'[u6RA:X`U;nLJ,@sU%29#G[oVS0T`\61,S`eb9
%;2X&ZLXCp$V'D\=g%[T8'TK!rKT`V`dn*:UO(0u1HcXf`kn;eiW3YhXa[R"#m&S0BJ7k)QAjN&BHQhI@rY))7"<)98-r:KdLtN*!
%9a$nL7HYQ(&?+TKYjeB\l'>4'^BsSqB!k]C<c0e9*2-VQ7=0<l\^tpIc=?TMAP*'D;BL#3K3itl9C\JUNpkQQ>G7j?oWHO%"KIfR
%fg[2X4TfD1VC!VPg06/5l7:GQ%f9Q#[`br"2BO$OE<T?h.rAV$\[#Ub2b#N7<@*>`_3.PsUMJOu7Q"ktl.8[$:;1S*;KcP@'@jMD
%(4WbX25YU:$4pO>p\S0o7h<*E%4Y6:\AqRP12D9a<EC4;js-2PQ8Id*%DJr54'Wl#U0\IPdtU5YV''iI0uCo:b6aX1An\]u1mL"j
%N`N0(!0&I`,0#T/)j.3dYL]8"LX0YX)#hG.0qYd'Qf?Up>XqV-%P?/N+p9oP'LOrUgT;W1]C4Q39m`;nH\Zhjc0f8#9Q`[8]/A9&
%3>/Iaf(cnho[\/_^AY:<Xg>XIVrThH7X>tc<'dWoF"J9K&ubN_cn[2#gt6)bmc?@o:^:0YO2r4X]Ap1iZU(<?k`3@oP,11!9tLiV
%EcDq0F4jX7f^6i?ID"uDDWQ4$[(WPa8ldtBcI(>#>#>,h0')!+CV?,F0Va%IF?rI0.F[QA#YiQ\O4bTHeTILurUPcKg[GQ.FZ9DR
%&BIE,KF5l65c%H+AU%#$\H](]f?!3P:XB.j'W?u%$Xc_G__a<1&4]L[4#P^^pJf<KMoTEqf]=a7[#_iQc5DmlOnUE23`giPqe&pY
%X9R3[CebEi=UE2Z[`bLZp-pL6R$3."/qYK"O!;WP]V5"0mV@_$eV(5<';YB^oRlhV<gFkB%eU-k.K6oP,k$@XL-=?:SboI:IkX-+
%5BA9_[?">AeNWi_dWVmT.UZSP%rI[P+2X2sLGn4AOBAHeN.jl]:pFj*PcT+IAp^"2A8RMb3,mC*h7VIsb]k3jjmp<"a,#n9O(2mj
%UHi^,5Jp8\`G2XiIBoYn/+@GKfWb50`mFonVegJN`K$F7=KANMaDnKO7\o'5V>Ol+/_YlHD*@S]YT;t3M*S%%f#P&!D(YY+`h6V5
%5u&=/qY\1f]S*)>>@:RWM/ai_kjpq1E^n<7B9"rHK7q>]SfV4.k*S"sGai,Vc5s=]L2DP5!=#n"VEM@qOBA]+_b2";2Ct8G`M#Pf
%/>-hB#_(=+%'<@4e@;2(iW1XWCbMKh:S#+P(Wd6i@3=1H_kes+IojjW<]-FW95a8\*PN3^[ACKZ;LP658!F"!2M[hD<R4Q6EhuW]
%Jt`":nq;"sC-a.HNaBI@T!t?Rfog+3[SbcH7micr@G.UC.ET4&SUqcg$E%UmRRm8k1M@!%,%]s&LS;6.gdN0DAJFjkU?5t1[?;J@
%7oiu<b=9\u@nkj8H6`4O4PAj,_e.JR=KgPA@C!$.[W.p33esC&mV&ha88'l!7Z>gBCRWFub`b<n/lr8j3#l4bE%:9<\h;](F4l(D
%5;mJmbIiTHPVh)qd.QTbk6#sSN#o1F:oj@VnaLq5'7fQKA?$*&R[@$f6Rm`6@!$H>;Aqu$C')io4k0fL9mYegWmH;u+M3Jc^[Y]t
%S\,LV"UN7OW<Z9ZVcO5U;Mt@XRtiaVN=C>J:/7E'I@7:d+9S_B[upo?nK8N@*\tmsep@]=<r?YFTrkY*E/kEj:XAgogo!T9F5Y9n
%Bos_2PHccERU3R=R3/k<<NdXEOr!0[**Ho;3"aW>rG&[DP/;;oe68H5>5'm;^g;R'1!Jt"?-GPLq(;CD#3uGXX'V6E99X05TP8&2
%U=+4nj&;jQH.=D8`-L:L?iKsdl[OAIrCjrofKN($JNs!6hmP>aLX2$,["5fB!g>+Qf"J7^itUMTMV2T3R)tmWPG?D`C9k8X02SJf
%N\,1FCmBJB=La:>*U1q5pE;#.=GPCYMe4H@)9=3%l0g_^@Cdgl4EG@>3^gg?U#sg:5L([t>t'7:_)cYWNC/@U]?:nJBVtrIl?XG&
%6WH$\C5\mKD#))8bL8eb3"]BL7enb&,'-l]bBY?WG'>:B!BgqeXsm+#>jLeOW\MX[JuO(O,GY("^qlN8,L;ONPPtp[CoCHUi*6hs
%,u5W^_=ApDFHc*GFq;DaVoeb(;iQm%%3j[gI@Cq9#hdkKCT4S[\`s@%Y+Wd@db'gn$L.1c,C2NNi]9d8lB,_/FoBQQ#2ZBR_i$U9
%&(F_[W70p=9JqJ=S'I0s]N]"MnBK(^W>@^;ct)aKC)Ne!PG_%"7rl,_J)7k*A5r@YSRQK.r`(G`)g5G&3rVtS2@sn;+\6PiUi'XN
%$tRY.p;Apf1<Ejpnu2(2Xa/J#0)XW9^U5d6=+V=pb.Aod+]lkLB3.B4_U)+aUi)mNG5$kA0@kQ,Fe8/BGZ'[nrm<WO-$2Dof(_^=
%ITqRCBtc,c7q,h&9/&Mq/Q;B$Y\HCB+Y]100WV[G"^hrgTM_+NF@IR!^gDHNl)>[L3[&W_O^9u:jIP4KPhZ*7rY+cZEUsY"igm-0
%2i4Y!D.<(<R+%#D2RZEhM75&ddI7?hZE)gCL):7%/`bi!/p&Qio,MfDChY0:B2_&7EHHQGRep#7nXHsL3DJ*f:D=B;lQ@VFnuC;2
%[WDfspL57]-Z5&o[8#9)`kHaj3K4p`P/U,bU-Rbb)MorG+<\jDCW%?tjsUYm;YEpD$dXuG5rI:b>4X[0'\!pSmjRj+ZcDr?KPn*k
%C:EJ4l6ULO@8OkIYSlCj_=.6:#%q"Fm4DIq78=bV]$15<R>1!i=56U>p*/g:>2<;h36X\t#Z]=5PN[m30SB5k*;JAR+1`&3bC9<2
%M8OX<]"U,"artm(Z;5)FE&LG6V#AC`*)$^)qGFM'a>tCP<AM]#"fb=TB-`ma5it4IdUssiq:]jk<N0'1T1oL+rRt.+#<B7>s-5,G
%cXdJIqPYm*FD#8b9m`kt%/[bZT0<XZE@AmXj,tTDHnk"se!"GRa_JCkYC8EeliF6[JNpSui#0cCWU6rP_/iOl'ra^TfS;CXJ(Rs9
%](O=]Be4(G*f"i%\dPY1KW9-UAf1mTPWdi*pib^5g=53:pHk9/L:X&E2q-R9g%?V^Bq:fnHg>QMBUfN(>8s7l'4o<en+OH(mT?3K
%#'=LVQNZK+3oG5!L\;l*O2CtZl&].t^4NHC/V[kHCNd>Fc<YDD=3m1bGV_h5EG@oI,]*5LC/0r@!]qST<s720L%Mb(XD&mhYn`sW
%-_:[&Y=PM8U,c$r'I[PCDD;I-^tDd]M@.VQCFqodar>9LB03NP+D6]JNUP/p?41EhC[1>m=8<o-R=BH*[U:cL*,-%EX`G:nqIghU
%F1D&c-ojdoO[FbQ1UG.W5Pd^O7O?dCTdktr#dU=2ooiJIaO<K-hVjd)q%EI2/e6F76nEAgU-gr.:nO=VB&1K<gaD1%)l''p>dGQN
%`<&IAPU="V:=CCkf:(:qIs,i[Bi]8a]F*6$C+4AP.LH*c<6%GhK-/D&SS*L(+A3bC66NmEg70!opKt5pb;'a73rZr$faNi.rl<nf
%FP,D+FANsKYLRhfAu"W#b@h!p8*NVPL9OqNNat*B6cpB,>%?tdQs!!u*,p<'N^Q^8C7HNU.g[6TouRiUd)!=D8/46%OWG_]qqetQ
%4e(XD$(eYbM>FWahk@:o1472i8$CJ:@neuCl=I;uVOaCc*G+(%&-'rhHcuG6@cDWk`,ais,s"-0$Gd]q;Tr,'4'#UgZOuc&/-;Z'
%H1Z3PffB=:OTfb3<IYFUiP?()X"SKsOSrA?1j\Z[-5't9%]tI3HgWHagf2EN@9Z]uT(P;t?7o)(:MCclD#"o"3[?*o;?':Y/`.>o
%BbSY,E)!Ss2!k=Dcg7"LeG!Hg[bp0q)j[XqL*SQ7l-HSTr?s@tj]X'5;-LYL/t/QqDb'"_9B%$gLAoAk!p9^8NXGYR6d+!B\5>QS
%^][R-E^=tcEM@jZ<gEaqH4*Q.GT[He+?J'bO\No4%HFrT<D<m:er.nLa"#A+EF3JRWH>8]NFlYLrE9g]Aa<(<.Aeq!E]'hA?hb3V
%=iS5V8o'):)3S)F\tPii+>"@Y7cP12BZNN'^9:IV/+gH\Aa5P&:?mm;je`0IWnp'ZpR[7`^[ACmqsI?W,![X)He%Ws7d.LT<b2Vb
%dtc]MA_KIq6%OoUP%V'R[EKYLj;"Zlq8#1Ki^?q!>LTuQ82eD2C.7s"C(Z`+4l:j"WNn?-H=9r>k3T'MN-"B?1OM/.ZK%KhSsH>g
%$W5qpi\"u9FCpnsVY%X)VE21E:2etG+[`C6.]m'kqb8/\b<l'*j<]&lebqbhZXM3jZC$-.T!M?R/1I&>A9X1Q&fP;+2+6cic?&Nn
%X=BZg[YOKmd]fbkS,4pY*e"&$,)>"/cUDsr4:^Q([:iN#EN]4)+j^11W#Lnuea_KKXaQ,N(&$';$P5lfcU,!,G*F(]F'JpLapT2q
%KeRHeLC%!np<B"1/6Q@A-"%"$2p#ZRdjTK%Z+)ZK!4<qZVUaUFY#F+gCp]F3c#jeo[\g%`:FMG]<Gt[DR4?J_URZTJ6reZa@iG^A
%AsfkUZn[74lGJIPlf@1pGj-=aE*V6pYV`IQJt`).l.4!6AV!!R[q#3oVXg&;7a85lb^nJR&LE?k>3rlh+W<:T*OV>aWtAcE:H($d
%"HFPUhP<;PQ/D8*%g0CDBh9\k^=2"qR:c5IFPsiLb1"0;cH47QJ!DqbO5nE9>;XSl*EeekJWP,HH:^;8V83ji$hV*P!Jbgh!J=9G
%#CEH[hB&NO'qP8W/OJc@LEJlD,UfRen(kA4De^OW%j[e8&SA4f0QOWY#A>ipE,coC>Wodb_:n@g9Z-KMON0cM*[i!#^Cn>jl*]kS
%GF(2ZJ"1&X<_"5d`7(P4&RtBt@S5qiTaB%9SoBM+-;emFGLJ`ir=R$hc.a&B>MZsXP>9ZcPjc!)^H\,feNW3VSJFn]<KkGdIiB+M
%2-/TH4,T!B:A8,'S.=P'h)CQIP;ZcEO:"i%F*qjR'_>g4GW!"GF$7D<3e\$qLVMjZ2:J;22g7q)2#DIeVFWT=KA.M[pqE>_s3R0s
%4LdEI-5t\ULobf5eBbM*Pr$5ooeW2Nb;nnInjDlH#G(^<n;tge^3;!ADbn>u#/r2QFWBIMau"/kcJcN!gdn*HM31C_c8!8ukcVuU
%/JmrIMn<-D/fsbkM4eB3:gDU9DLOsk\pEt^2pWTL_<AdFBdC2\LPJ#Xa7,A,'HNu[;>IW">G;@).4uauB:G2u:,;K.hT6"o+4>>@
%Njus25No-QIJRd;lcVap<Q\r5akFtm[0EmK%^3jiZKc2CJ;YpD/QeX@!3U`e[On%@n]Otq]*TQr1fp_hX]o#Y+:oj<[@g39jY>UU
%p.=TH9'PQI&lj`H7TEsaZ5r$k_kX<k(D45FLhnq>Pp3MBM7%U<9!F=YIo:*n8OH`?JdB]E/&j4!?.Q2kX$,A$/kr3"QDkSPd&j<#
%8-UfLj3J5g;78YVm4qUCT#kMo"8PO_<j/4*Sdeu;#.5-p9J%%aPOKts)^\U`4N1pte4!pUBe_"(0m6]2YFhi!jBPb2O=3[Tr(EhX
%gihIOqpFj]EJ0\=MqTZ471grJqIKu%=%F=5Zi'`:W/8<:KJ++#p_ag,Sj,!6Y<*72k_l8lrp[ercQ:b,i/#US0:#JFXud0E33Qi^
%n#13tRo(Ee5QUVdJ%V:CLJO0BRD-E^Y>^Lm5)8C9-A:BD*N[]-Uf@Y^Atq+`]ccaY&m0JrnagLRm]m;0@V97K,`AID4TP_VF?b"L
%bDa,OaQI3H,i7MdG1k3(d*9T')UoOiXrLWG'ml=$>,@TZc;.e+_M]:I1PF-!-gblX7^jr^7AY:AC.atZcn$nr.a';:TX8>KM"Z?s
%Z8\UJbDX)Ohq&!G.d#A*F_H+#OF<$iGM=nq%;a!PN>m.%N0(m`Y$k[&<9M0+mZW>VE=KDA7`\\AL$<68"Of.%OB.m)'WNB@=KLoc
%KD*nN4tiO+KI)lRNqum(I\rPZ):Z(W`QVd;8>E]IHR3G)a_G[P0\dT5A?J`!GYE1E)7RiU8[V]j;t>1sPf$=.e(BAMYQe-lVkgGU
%D43dY3H!N!(7(ZkDP2iZJL/JShTopA`U?tE8DncaNX,,0;*+L[<[J:h[EBgaDB3lq%k8Y7jKF9_0o7<=5pH!/$\P8hXC&*;e4[1m
%>^W_QP,2?TW+4f;GILlR2(bLDn`tMC6#N&FKF1F)/%p4r+&dGG^k'*h2,-Z@`UsUJMTd3-;-5VuW&CcE.B"kMbUG4]060ls$k-*g
%[+:u,`/1&n;fF"llHcCMq,C''<eR`38V@MaeaVRo80Sd!/4>bD06j^]B2u)'`,1&LUk1#\"_;#TnGU:2(g['?%sG:Rc%d)]De*fb
%Z4HEP4V)l/Xkb>J!3:;cLBX/2=pHJikQ'l53O?I$jYB*l/e:.7EAn^7P;B*m?m4fJ]>s:,,uh(2Oi[lVYITn/h&V9'Le>mpC7WaG
%\Rlsn[K0;$(XT:*Rf::gmZ;[W-mL8[r2=dWB;gQ`DNi]sQnA#_Fep#ANK`V-n5[uK5>GKf9cs84@ik:"Rubq6`TO">^aS"=euarT
%qD)WV:F)Gq/\+M".>a(Bm"Mt7`3Ri)9;/#a^=LWa(TZP0J.nIf@e`[K@Gq(>p:;<IqMU5"AQ<+X<f&'FeNp`e2pb^&Q\`rnOg!LC
%a^%2[/'S^%BM-YD%E/!BmnWeV<p#!!o<cN:(5iFE7j";l9+&^\[n>lg<dQZ;o!HC_H=S.A@s(J<+jT)JG*p5br'XrlVL-(DZaINs
%59a/?Sq2iAAAFC_Hlueg4dcG)Pj0bnNOAphZZ1\$88V,rq.a61&.Z%_(Xm85BL.mIV27!k?e8d=gBLbsT;:JFNXgCcj:MsNB8n<M
%Bpr/S@sTduE_&K4IAMZaONEfC8k/>F1M,D"jNE6TbmQaOU;VX_!j(%#h,^7t8>JL]W8Y6jSbcNLo;!ZQRq#2p@b"+Q@t;efg+)A,
%&j`m]`s:FJ4W&*#l#Cp85*:.'hrI9dXaHEr$Ij.k+3'trVST#8lJ$-l0;.>'Bn`K?H/3'lf]+YqHICoSFK_L2TUc)EfY$4P388o&
%5-fN07=t%kc5=7[Qo[aO40,Fm6oH/a)I[!BpX'U:'Pi]O/d_)'U39MAgMITIg;i9VOk.4Z+!0f2]47H3rJV<-#)h$SU4]<Q^X8n/
%eW#76eS9/qWjD([f"fMQ&GWj?.oq'9Q(-`ZlRrBa;Js4]c")M;=@(]_-ZC9!2LU%WfqMKtaS$aW_pj%'KWR9Zo`U@u]ee$8.T&I%
%1iABrI$`6Qf%lVumUNL[ALl,&1Pu]3XMtU8U]B.G6nTG-.]P:@COA,epdPTFa9:h^^jK.>B%grlo/jhm=FZCo'PGppb@/_8FtV`j
%L)F_eKG:ocC:(S6>^hX:(g@Yb\s]uU=O^c-mMY02&$UNIrLf2=okHU,8*K>AM.">j2IMXh5OOp^P@pYBCa]HuLXH@3'Cp5c19cXX
%fq#[AM@N3WA`n("k>q8'+dr!@V!OP'CPU!FP)98bo>A.m4[h(DS4tOd=;k1<E?W6c,&-o+2MPXkp5r/*PkTMrbXU&^H<Y.+1/A;k
%@9`2.]7E[p71THI^$O4[f)Dn?Y.O;MB<@)@,g0Q(>s-$8lR,NQaQUfTc>9N6V#s"-$g.b#\<]\SV+J*=(WLI-e'p[1L>>/ON\Rm-
%aiCo%T,ugFHl<9=pP2boc_c4D/J@aV0T-lh7.2pV>.SPMW]!51rSU5)VYMpN[\E3s`='WcqSnCG@%GA(d`g=6F5;PrOudm!J!%rj
%`ZgVlSa&D[7R!s311@V+fsQ&q7ab)%$>RR*PSGp`1R&A+_#1[0e:`NB*\]>.gLi[%jS/NC(-K@>bEkMhCU]0pO[WVVOi5(XIGn/2
%2lYnt=?[?/S-u(PdheC`(!?V\`g:!AcV2ctJ-%b=T'$H#@Tq\i#tE])Ll>M]1tJ[tmH31gg;rH!cH?Ha<&kO=<"+VNh+,FYHdaM`
%_\.>t,:\G7VCT)"gVO""k@AF'Ra"92H$dm+1;IGPR[`V"^6%gu:/1'D]EYEZF4RJ%@CH]VW[MIe[:\sP+L_We/89(#r#?.4qHD-`
%Q_g4_rY</Z%dOg!:0r$[.KMU%V9n>iJltdMk;)t-Fh"j%S.u+2Q28%>K-rbK/]OE9fK/sJ/+L'uC#l83ju!q_)]2gjPD#FJlHm?d
%lEi8#"3B12;/BZMNGOlQWe<QEAZS[9\?H_D7$`ip..Fp93@$>bZ?o%c<EH)#P$gsh@n:>ko!?^q-UUB\'p'P2aOhf0%6M<LICCPA
%"mbnq]k/uWqYF'iCRJe&1;14!RDHPII(>P.^t1k_^EF+=1<cCZB@>V)p*j"6<9];bNe/Q7iZ-sYrM4.,N,!r/#^tSW:RC\Efr<q`
%G,'gc6sS;%q/\8N-!eqSn3jl<MhYVn[m!#7FAF6oU%jdDHWC$FVe>MB@seCUkafR-Z^X-TQZHcm3Hj>`5uTij2ki&;[+34X?5K0_
%3Aoe!,q%(QGJoaQOs8gG2!Yoq9"+,DXGYfg^`,fK6!^)8l``:[TXHml467U[6pi)fcs-iQf`jf(]1,@@G'YHuW66d3%>pDN+>HBS
%WT(3koT.)X>ShRJT9>^L2*%rN<G.CYn^;*W3f@]-WJK^J=D]jmWKt]S$80<1Wq%Yjo=</e6^\oTX?JP:FU5`F*0sCH>E)t6'bZe%
%]s\a*oQIGp.,ZV;q2KZ/`^RqVm.*DWhW-:(g$HFNbB1k1Zr+mbjO>oU=hK1<[24`(*?VULELGM>DR=TkJ;6%p9La8#.U1).aRN//
%5X_je>H#'^;l.-:Nl@#49/3g69u?U[aW<19F.-We%&ppMF(JEp`7-3`X9P5/PH/Fc;Hm,P0FCrm57LMD7[GU77),EU&JQWp&>GNq
%QT5laA]5@(RoVk4CK52HX+tZpYGm0T@"DU[@@1$XP\,)ie&ed[Z(n)E4]#oZ.4.EhLcC\Q*R)@SJUWbtM\Ku0G5gs7K"^!\97E$d
%&Y4N>$8`H^//4tm5&7ocgT%ZTM[$dO8h;9`Gq%?9qkOui?+1$-a:2a<1e#u$?pcPn-F&MKV]keoET+FH"t/]W't:$-4a9TBgmb%W
%K1HG=^mCino=X%n+LC['f$5TCcpWU&])AImj>+Ln),%C:ZoBe]/o=F(<N+?Uie6XH0?Ua\@'ZDuT\/Y_@V"fRTf?#9!JN15]Q,%A
%q+fkq-'F9sl08r%Xkl4//n34R]-_^!$C`Ms0NGS&&i$Dqg"p[WJVeXJ-On`Srfc3$M4p0&e5;<3Du+ELT;I8h*jO#1^Y_f`/Ve>%
%dE)FtOsp2U1M??NXsXd@[FHeDV9H1^,ZR@G1$IrYEjgX5OOiI`ZOEQO8Sc%:(P?Ala<jF"as/5`?q.+uaW&>&_AjE*U@f&Cag0)p
%/r,q.=mglWA"$K-H0HRtOp8B'?$DTLTg[GXeqfX@QV<@,jY^6$je.9Z=^G")TAC%PLdW@eEk;[C(*OljHfpenEJp\sm,50s[j&kl
%NuneK>C0X8T?Q`lW2>"XR"kg?2n4rk%,s\P&gSjN;&l0B<[I@H;b=V$bR.h,LEqt$Es9pl=/5[G8.l[7,W`(o"W86o3gt]e+P-=.
%AlF01O9C]#1)0c1BU4t-QP7>Sk9S2:-QOJEe"C$fe=B![!a4*:S?is-6eoeO?L:G0gJ5an40VHoogn'6hKdJ)cP`T]T3Y7UBKL.d
%.6K&#G>/pN"Q%>GZkQZ/ll&R9N(cllhWl"^./bXUQLl"GR4)V*Ge87>PLc8=fN9)>:_rc1(%d9gel?RKJ`9R-#g,!B:>E'\VE'Sj
%&%mZ@F,!lEW1e^*k<ktQ#KA2"bKLM1#sa)Y[%u0@QB?a\Nub\A)6i>&M2$X"Z%B)l(-@\_[SOZbr5&Lq2pUWGPq3C\m%%n!/(T`4
%+#*%P@)rZfiE,3`_*0'F?]&&8UYe^FRD17uD@ZWQX%h?Yf:!uQerY&.82i0QYeRSS9%Ga:<I-qL;knRO#?IUI!h`tMh*<=V@m@&#
%d*11f#H:J^bYV"ppc#68Ss01.q@BDm/T,l78?$6C6b\o)ZPlQ$pIpA:FT6BKMfVLT^K:_8Nq.:VZuEA,Vj:4./fVKWlU3BL:=:2(
%8SJ^iI-hlo<qXU\'nSE)M0X+>l.gYocP7OHmACC65KefAi.RKZ7tJL6cu0JB]!]252&]$68@_e-7[Bl(W,t[155sKYT-\-.9<,e\
%!g2T8FNcI^#A*JiH(8p]<OKEK7P(=1c&pL"C&0))M/UMSWH<#i60=]RJ^b\3r+mB"5pW%4[kchM^'S;9Z/<EjV'pJMms6I%ATI>^
%;LafDl(f1tXua3;PV#TN\K+=e?eoni8Md"gZ.>Nu0a_,0VfAi+d6sk#';WmA9AN'&V%Gs,'!p^KA7ctN,>!%E?VrZq@/n%:CIs*D
%Rti3fN<b77`7_//S,#cmqlfuK3T3ai?)<8F;4&*O3P^Y=PruFe>G[0_G(3ok2G8B"m+O4@1I`1iMRIO_%L>C9<"F*JK^H@BK.iD1
%h<T+q'mfHTJ>g)-Y0Hj#q7c5L-3"O8*ml0R63>"p"-!JhFrFZq4)X%H#s2oN&u6Vk97;A%<d9'L2R7,YiEEV`+Kl(.V\:`/]<g&i
%.DaDPoVp*-Y2o%rh5=6jXB3Kn=?OKc\.LM^WFH17jQ-7fCd\Xp3Jbh5,_82^7n\s)1aYXV5No]4/B6@[5N#V_:(H*=D=1+FLQF9M
%otcSF#C3O_b]i3lC)06LN0;uT<p@l=:0JQVMGAU=_;qKoLH7C_X%B-dZ!Bk.cF#-AmqM=)oHt09U34t?^LG-HC_g<\9J+&f9%I:,
%leFAL*VeD!igV-`@rjC=%X1i#'$4JGk6=5:\gR\giZ)DJ3FHDc0G\1/8].N2r-oUL$M@2Y\g!s-2gKBeb\\.cjadI_;\#Tu8(Ob:
%\s7u96%W5H$d?mp_B3H7Nlc\p<K@HPB;fQ56AC1>:Sa[mp:Q+-/]h)P0IG1(VO`UV38#XsI_=+;=R[1IULYqV8Ga<9jJZd.PouX"
%J<X`UY79#(6EGg[As"[jrI6t(V[\@\mMt)Xe4l[^4Rdeu<PuTX;X"SW@GEQo[.l_Hb(s3N1)lG&!q0Z@8&)U_MFBKAS'LC9%r^3A
%pFX"t2_m"L&U7k6p>R7Q>'2M8]7`$tRq*J@*[^,!XaNbEq=(p"jt`'c&tJJ'+Yo%9`nZU.HV+BV=6IS2@<<L5W=EQKNoll'Rtc>C
%XqC!*/Dc&]GdI<WXE=8id#[_Fck?)XUeqBMl]X?Y]?.MNC./Mm.`>GD1JVc.%9RJ!AJp&$E$7*>KL@_K8ffF\URMb\d+@2?CG8P/
%U-_l&#*En!ABW]R-toh<m,lgTKjZ5cFRTF,$AFa`ZWO*H0Y>,\5#LTCJ0JQ_2WMQ8o4L[Xh(t,"Ib8enN_G:@,&-UPAMYXS:*\UV
%?[X)lCOP]b'l@]!n=YIq]njn/Rr:gW-!RCl%o+u%.@^r#og?.RoRaIhBj2>@ZF3aiG]8EEP'[9Z\EL*\,FT?8R1X[dE:/mt\PfgB
%J[?WM)'ibecf\"3.T?[UFp=&33JI5/A4IbR`[CRgbAjLEPCmk_T/@@9!R_%FJ:`n%q,O`u@A-Uu(c2n&5eG*$=OauS`f?2nCu-CF
%T.3.5Ks%IR?WFbd4M/3m+6hfuq7BttIHPE(eXKYFd<O`>RSdESJnB(``K:"\k!1f9pQM^@7BCK/M[Z%a1M[RI?$oU?Qs-S_U`YHk
%g9R#D^e7\=`L">*50MG\qig#Tn9ro%,2?i!r$"A=Kc:\k^0Vs\)pf(Rf.Zfmp^FHAIEfD`@W0#%6m?DpdPj`?Tf[TSE_r'];mL,V
%-o4fPUJPOD<iLkYB+(S\ONa>L^EQ3m8\rSZ_+U^rW?bi%-ejh_34#g(KqA<TiAq\cAN_StX6%sh$YdZDq/!3t,"5&%`cSas<4/RW
%Me&n=DkJPF0jKk%O%8(%ammMGR4>DgjaJF4#^(!iF:7oo\ek6?aZjL.-HWf]'HqTS*?9r[K-<EXLuQ![!APZ[.o"8(/_A+jq,Pmn
%(PmPR#jkJl01EF3^,/=.*Rj?\U0&)KP03iR5;0+UraMe!eWbZr/1.j8Ni7IS:P^(FFiK,d&f%Fk3%p0&fpKT\C!fsgIcVoeS7JYs
%$`Ye:cc`&L8ZM?Vk]Y@L.MOZKa0ig,2_#oX5*.2S\0Q(`37W:7(]R2X[Wr6tqUDQ.Oo@_+j8l+Nc@Wsb1_F,S_2ZP)e>A8Y;:%*e
%)"H]mmdEZcqruHC`b\s'b`<@i@e,A&WDSd&kbFp8n.M1+bu"((5n,0^T5DhT6f&jF3+_oX55:WY"DA1AcCP!n*([i4BY_4.8H'Vi
%Iimj1[d<:\UA'!tX8WPTN_XeQ\m)p=1I?Uc#$K]2I(X]+]-F?Ul+E*4G8H4>Fg$'En*$$,3pOsmg8sN#s!Z]d#PL2s%cWHTdMZ-m
%.u,T]l-4`JpJcoc`@Eh!CU18XW/@DY'i3SMi0O'L'CC4Gg#Jos9UPS)CtUZIjK7QfdF,N3XGgc<`V`'Fjh8>tN.!nmQi<O3CVk%[
%8X3[`ZHE`(`@Gfj=6@[pJeWs^_9*X5PpdO\Ut+BhB3k8sQNuqZS*3J]kI%J3/C'^*9DEI^ZE+Xm0N'1P844U6MnK?qD0q=@,eS6'
%;PMj(\FM=#J3m'S1fYd.pqHm,g5utspY&MJRU=l^$jt:u/D2I`V5jCHHj@\>(n4-f,u\[+jO]1#l*'Ljs#.d)MogIlDNLP$)!<G9
%@LbX7?o>2F-X(TBB;PIH<`YK9i]!A[lORuN^a7<aL6s>FWcR&\dYgmQ\\G&8O1ZlJP#44Iq@'A5Y%)5D4Tp2]Q_dr9/k$kBLOW<U
%5)Fs0?]%&)ck2&-O4$_mZP7i+JLY$>s'$oJBVM[6lR`9g?@Ku:'M+HgS"h/Qg%LO1V+qA35cgqPVo'I\__NDkMuhZamGO-(rk>oV
%`R;e_=[rN=>q]*sZBaT#;jW*K0bPc67iZ(N:qmCdV-X;>@FH6k<Th#EoY+]&J-JCo?[I<N22ds[[opigSrIX@RMd#k;C$CH02^B3
%.o+h>2T:LL`".c'Vi9+q`)<,UA4,VarRpo9'_0"jY!\6GVf:'@YS]f"?&<DHG9lk63)15+'c+##15KrHai:6G,*GnOQ_FH#lT?Wk
%oMu)m>RqUd-aZY(SR1[=$Fj1fMpd'F81\6EqPH7!#uqn<Gub.K=[jO%<J5J[1d;YTl"W>(W"X<EmqoMTO,qI0k/]96fs]bUIE2Nd
%F,ZJ@\i[2Z?HZ,V;2r/8^C&n-!%mfaTn\4U-<6ZnJ8jLOb!R>8TR*=^:4_>3+VE/Jk#nuL5a2G<=cWuuP=nLjO>Yk!<[lAb80@j,
%qoFQUToqV))1ijJ_?1hH\0fBmV`sd^-&h"p-"tiZQ?bn2@%S5Kc`I'&RIl&=rEhm7q6N1WY)=A3$05io?uFltjk_2eMG0LtLPOMe
%FD)jTFn]S8^SV[p=rOTu=PcX`l31g$lN@T`5S!#"#)f/Fgi?YenY@rY3@%H+U"WI;ebW(IdW/K%V>k+fdo>Hu(/MrE,i&`SN(CG9
%XeqM+6o7Y1VdLp"pq,r8D;rl",-RA-,g"a0$-ecPWj,];]&o/H'ih7BHV\t)$LG4d'8L**)`A2nC[o`6/[DO7J[UU%N1">Y+h[-k
%HE?!UJt$K0HAEn<4XNZtAl7uf8?<>qZ(SC'LQjqi*6EfZH<^D['+R#3-t+!.?/Kr'%A#>A>,=E>2C'eUPe6!r>t8G-"\jtJ8%sG,
%0)O=N3+?u0Mq\-*Mp.BjrKU36oAu++rL.9K+8o?UA:@H;V);=uajJNkKIWJR5_7p2Y)sneT-2`_l_aLK_'\F5qi8e44kB?*6V'cE
%;)6_AqGaL!7^Zi0q]0$q[_fGW%3L'39ng*5#VO)a[f^-#k2J&:<"mb5HTkX:O)$\"!#Dmq&StUlNf%T_[+.XeF.N#0.p8]ablJ@-
%Ul[2D)YA0>;HkdZ\VJS_;5RgHlaM2QXRi4N-R,:2Irk1Q]D]S@]X:s!&&`"i1LMIAo?kp&M1-BY'S97d7+qf"'"ROH9Ql$p+&miD
%d1r)2cKm>3*](A@M&AUS\eIpZ4G7M!Z#i!3(j,G4?V?1lABU=4;RT7pT^&6oeL80#D8VCQ>F:7IqC\@E[t>NFW4#qJgP2M0<Z8,7
%e%9"ll$op16hB3_RHapo$Eh#+6(bmeYgFb?69l3%>)8akSL'=1$?R.WI=?e%<j3MGnitd74`?1aL2<H@=ZBBUL(@,8Z:MmCcrsFr
%WV^0`Ai@=64@>AhJDN"]+3_I^@GR:H7B7oJSId\tGG2%O"giFjJ$eJ^o%`I=St(#]?[jTDj=0L:XdcI.LGg<#8NC/NeP2sUrH.@3
%-pcQi*e;Q\*p7]5JZ:51<,XLQ1&RaZfAG>jWQG;^dh)cqWb?=HE/WO*\)K/,;R4jOlo5(-9Mr3o<khue(8F>Hqjs":HkYS!FY`s(
%g-UD5Tlh#s[R".Q283hY.Tsn3f$VKPfDR8mTH<SS!S"N4lMb,dB(DS+l9V&Vq63GiFB]C\:[^e@04I77=g;Vrl[QsX'bp?o[`^&N
%"q\5o&orSJN[EB:K&iTLUMfHD8UTc==bbZb4nuaL9jV*b8^]M3F.@]c@J`V[k$KlN_L&o'Ke7a$)1Xe=o@CtS%@!BO\7MHm*+VNB
%KEnH_^0?ff6nHik<P>VX?eohhgJ><@#n`>\)HO1GBZMP4AF3>8,+VMAY:AT>Jr/[r(fO@p5a=>5l7l_!Fb,!AMG*\#Qd"S8eM]mR
%jJ7$l#RL#ekgjiIe`@K,cCGJ(M6+.D:dc:SWXUuY_-62K:+@G/kG1tKFee$6lPVl'`/=IjX8X@m*`!5Z\EmBBad&3sN(,t)lVQHN
%9UoY+VT43PrNhP#)['>&EdQ1'%gM7bkAKoC4IR)_n3[iOK2PIC=b>129ep672i[hH'R_Yh,XZR&XN>o>F48\ndho#qDYE.$X+f61
%c1YjB^1s+%lPr;\Q\^=;\2LK#:iSQfFVNjOc6E4M3Rl)u8BK8VeVIEfX0d+&&2&W0CM'dS@eTbs.IO3O92GGS)Z.r(S#\3AjuC`P
%6]5uqA1u,?3`I9iCR%u$7kcW#dEHGro=D,ebC\Sfo)g=pKXj>9g9fLG*V2J7W0%7$bG/aXAaE(UBR=Rc@*5;>F3/.++++lC^\lk,
%6J^>&21Gp`-Zbr66cF;S0QSEbAUX>o4#LQH)o=A;@Q%BBJD'[[J2RW'C6#TrfUUoa`LYNk"1\h"J$oCr2&X6,j;qj?PMg]slY'LG
%6o^S)#/8+qbgD`_#Vm[#O6hm%<@$<Z^g4!@pNgo$%mP!aWD],*SVO+_l&$n/lZU9WXjt-!YZYKu`l<,FP1bH!)laJWKansl3-&Zh
%Dr''4FN:c%[ed]f7gR4#DZVgPUn@%0:.`:u0uFiZS$_9!d4WcdOf4[#7@^C38CD!g;`gHE/>/8ujk(EKqt8$cnmqIY$aVN(QP#BB
%27N.H7a%1C%Y>BV:BMo6:/u5QTfau49=@p!gj5u4TXD.<fJ?\nB$6YA32ppY[rJm#-3'[2&$SS`]jF[SG.YIaU7UU!FRJc2ZR1p^
%k@^qm9ZTmr:U:U\aGh3IVK`7$NuL1"%rn<rfQpSX^8;$lC9*rL@nrdCn's.[--Z8/^QCNAmJI>M`3V<YXVS-JH[1@:J?])AcOWM*
%_5Np111UU]iQn^\;VL3P1OF\#MC*t1X:GbJY^@]*ZZ3$EYZ$jkSg=S2a2mD382^WLYY*hW`f%T@c[HG<D9Fl7B=u(p>*\=8Tq4+u
%(0VqShm2MY*QqBD[8AJ@:N[fF?<qg:4"7IXp-ddYPc#q_>Orq3jWM07M,]i1CdS"M-Z,)M_>U-'H;;!C[G`hDs7"TOakFeDVmqR:
%*[mY5*U8/SePM>EF:&R\9,<hu3+SVB?ApVN:Na*HimZL#b@8h/bHW3")8a;7G7.$?0:J.TYsme1H#In]<m,a)-\1+V:q,YU#,++h
%)Y?Cc<<qL(4V0ud;T!tIbms.pOC5C!+/_i@"^sr`,28%:iNL:j.#E%g"VTN.Q,?7C#*m](b-_&X:P09[)SNKE>[s^QnW+gnP5kJ!
%\f/9FfHdYe=$Y,8q,e8NU5p"fQg\=L4Cptm^Yj!.q6g^RHS%bq%[/@i?V2s"1nmX[KPoJn+1"h,94$qmiXe4"OX*l(fL25q:r^8d
%*V46q,%uNX;NqoZ>])?*oI`5ZA9Z"AW#4:-4%jNb[HMKr'4D:pl1<l_.P.q1_e,8e;qE;$=K05e-0`?#?-qN'*_f?UCK79!jI?L>
%ku&,k[nA`S9,EdqXt6uAFR,,aGEY9$Y:hI"2IAo@MPq8:cU-3a3uP.N=^C(,hs!u!d-'!G>0`n:WqHa0V*F1d9XX96eo=+mh+U[1
%k_DUWV1q@nCIa"l.fPa!>eB-ep^;6@^]r68bE;%>Ik]/qX:WY+[E.$bI6\:M9tsF5-Z=%!aH5OI]+ZeG!<H1<l]SaYN.J#$iN-eN
%3"I[/<\se=*^[9SDBc#"nMRt<2nf%rg;H^K(@.9U5X`<7%\t2XhA`lTHLf"ZOGcWok17#*r1!SlCU3`+e:$u$[G?+'S!'Q=,KodU
%asK[V;O9Nh7?/#Lp/iic1b:R:PB1%gUk6(eQ@tjl&'<RlM\]EFg*#9(#E?+TXU7;]0M8]'_YGQhPTjrl@m<%$=cdpB+9R:FLeiAI
%J1k\->*ADlO:%=&.-!.9_\^5\daDn[(l%LCA_Sfl9=Nf;chC!"&d;e_.jRsn0%rpXA'YeFLs?k1kJHi,^asd&YT@'L*382OghGD2
%F)984&iUoWYj.O67+'hj1E']@bu%8-&UiBL$Op\o;$;sNX\nfF!XhT#^1rNL`d2Qq?j`3*64QP&mnSfUaHs1-R`<]ijRI$(X&CF=
%q6X\07pbAjoV**]'?c&t5:jAgXoCcGP$'>?L0`,'3AQK:7:`3/dK?<W2D_7^V:,5`<2`_Vc$3YS=]tPT`mah"HSOR&NPo`-'Jf*M
%eUBC`$#6Le,Ae'XoZ(?\l($d<EE/QI13qI&SDQKX2,?!!Xtg)oN(';O2Gb+%JoUaTIF;sGNB$((\:0-qT<20mN"#.NO`")YU%a:r
%[d3hu`=!mIR$7%#4hX*#=6dW>fI2$@m\r4?`RN#T%k/ptgNL56j3WSIQ937#!)peX+Dhgk.iJ>2a;OR"I'@BFl7Kcc7f=(J&+P[)
%U`]W@FF\"8!g(C;_;NQo!MX;Es888bhs_gS8LhM7][<cY!Ed"sQThT;3"t3hqVdYFO>ram-PKmG&-%*H!7)m?^LT:]BWG-lCss/i
%8;XA:(:b6-n#eb$PMN0".oF$m$?sBN.i1`+c.a?+BJ>S@q^YY1^;51SrfH,NjA2o2d"eZfDtMlrr*dlj6KJ<:3M.@5Jp(on\?itJ
%Du'?!<3LOmaR4jSqXFgJ%6+m%p\qQ>r7VU/O541^SbfO%2o$pX^GK4;jFsS?`7%ZN47!1;XFV8j))m7/WU0nt.mAXTWhN.=/;0`5
%HT.=+9CuN8#*<G#H$D6/?>7,7)lW&U\2kR6T_$jpJtC9m(\B[+>TRpU%5+bCT+*D)5Fi6c]8^*FS.1:9Q!)CFK+i>f)k>:(g#.PO
%ZbblLa4]CJ++Ne9J6ajV0q7phDX_F#piSLiWQtcWD$TX`Q.;8$7*lR.S5]V1O.H)^3@!J#/!+GQ^M$_ljLp:/0t=%bbH4Y2Y*N:b
%Co&fsr#\(/5m`-Pg8mD,/$,).!-:Hrr6'M:4JYUDCVID;Ag8D#g:^AXm52qc+)!r)/`_2'`Yn?eaBNbZ]A`M9W5%<U+m3_*5qi5q
%4$khIfWQ=Sf8f?98,2q@JC)t*cNdDX,(o>sh@[?<m/"#Si>q\BTc:IWU[IR]-A8g)D#2SdBD)k!pTC4B9&K0jNKVH6p9EWZ-A8Qu
%cY1f"[8)_7d"eZVDq)6!<>[h`Q?5ts0@.._V?p_(6#ZJq6WEMuH,T-(8,D][h[cZt0qU@6IdIBTp4H`LJP?/M#%."P?1/$.@Nfsn
%N6q_e%453j;'O+D:"p=*2gXrZh%J#J'n<`l>!PsUs*+O?SGQ'VG*EndS+M12W=]s0]@/PkMYb6S3Sp,4ICO%e7ciEf=Ru9s5clO3
%F?egp=^sYJV%2p:h`jO%Ju<8JDKqrnJ+1.%oXOPZD")3npq?BQP.kTOs*T/Z.OOQQS@p&-N&L\1ZU(ZR&ZfPXSI&Es>9W<'7t\gI
%TEml;S9WEZCe#=K_=?5`e<&WLHU$pW,rD/q4qN4Ph0ukl0$r9WFJ)_'U'l:WMiNQtgdO_KY5C^YbKp/3;J\[8B7CMj]BS5prh:'J
%neYTYZbP^WDL^'q+W#XU9gAX8HU>$JaKIbcf:MKtI.0gZd?g`R?^nfd@Y,s+:F^U)44!jDFIR^`V/:*Lq43hD>KAdj%,2YWE@Xag
%:_f;@qi2ILG1#_2&!=l)#qL:2*;OR0DF_*`__nkA3a*dR@lO$m>XN7b8#\H4%DRCKl4)&MnU>_Y(OtopiE$0@3BP(o?#%,tKVs$I
%rhi$gUE=\MGi$L_VhBe@kjou(UcVE%jC`!?Z&7pVl\07,afGE&DbB\p=KhLs'JI.sS">]Lg[kKlACCuo\>I:K/mQl#-!+@#UX`FN
%;_?F!<7>`B=D+Yu!F8Ps0Beg=H:FH?\t<tNRbm\p&&&PsQSO"Y%fYTc#1$NRIPFQHHD]r-]LBqW:0pAP,o/Zd7Ztm^:$7>3'J:uV
%nIeDW6^L@7"[,;;c_*dkO(V]Aa[]jD,0<?mc]Mb'd[fVB8k*]o.4+]o-!rr"P^EO.U#[`R6HPR,>[kf6^%d6K#Y7Pb%OGh<D$WB"
%L@EAdo^YiLo3=^K81=:&#D9DWZE`487jseM7-X"":pS6U[e"Eg]H6&E9"on;;"=cQKp#6i%OGJRE=!p5NO]BB*t>sl,u^R+3d$cc
%nlj[i[^ntl&*+EqhUkgJq#l!\q7-GNN-s*,5PR-eg>MakK(_.4%t(:-_65Q`+2&2tia@;hA>g#+##o^eq*E5T;I#od*TMBaL/j$l
%@Koo\&MlD?VjP:8C,(@i6]RPMV)@G/_568VTL#CmAUAV2)GjU&;BV=!_&9fe%5-j)BQ-F(BQ/7<&N%#^`uf\)p_?9tgY<Hk"V"cZ
%1jIm1i/\?dS>o5q8Ms+bp204[Z4Tf6[88Pl'[OHrqdk1WOsCn+eS/u:<+Dq)rMrN49sobSD!G.L-JP=1<<X,$ZDYufNd7,le&l[3
%-`bD*,E6tH:iY;U;(qgMU=pD:hoBh.<;-aZN'nO5C"6%<CKVn0XE%`J1$,o8@aprA8D8/_+\6*tjjd9jh.3n[1gGiRR?g'NLc[gT
%+a<cRA,_3P!`:E^$q"AQTYpKN10e)/\J?[qUgC>F*"/3hV"H!r>-i"rES0Uq9%l.$A"s0<9,bb^:$\UK4&3f>)Q#.Y#l.GemiQ@R
%Mj=(:7*'DsaS%6="JJO8oel,1(m/(Vg?0O12%?TL,hHb([%&^lF4p78_E@D':Y@[VO/Vq:'>1@'lM%K:-<i-;@9WVs6aHNAib^l3
%+K:9:^7]0=B;">565MTtfK<NL;k(0sYpuY>8d/H1NQkt=.WY?6:\EXZ=e>bYIA!nf.'"G"NtC6`*77o^P4m*>5)"^eV3@'D]%]p(
%m9E^Lqcp$Fo)`&P%Q2Y@bBFcXD)CA[*Ri4iEXc=Il!"s,3'F"8T&DD=--QaqdBMUT/9V^dYYj.8`KdC<0l56=`D#e?h(<HWXQlhN
%WN%*DJe[Sn2QNn_'t'O@]K3VGbhD-QAf]F/a8)AsVlQg;clTQ/!Z0NO1o2d*%Bm0T7>\0p0;`M7a.S]HF?i%0XDCf$mZlr#r<^%"
%c6ik`/W3c;I#<2<3QG#VAYH/hnQOP;^NjAuP6m;O1T&@;R-A85+tNAneguALja53s=`QJ7*GaIlY]4hV7nCXR]5G`S>?fQoRU2iE
%r53>f.!F1=b%oLF.t-bhUGgYl6`%\U=1jZe,e9YJ$%%Ag<3e$_Qf:5GV>*UR)QaoEYqhi4d2u[F#,0H'BF-/,F46SmV4h!A\uFR2
%1:pR2)[Z`ur8Z"%;MQ_AI;@h$<G\=)nut]k3oA+k6H##L@UN";;e,4BAGd)Qc_4OI_l=YI(3^aPI-+C*:_`VY<Pt1r!i(q$(j<5B
%<%b2Gf'KgB-K`;hs(P7t3a0-2._S9^r\lM-Uku??Q*h?mp2cW=P4u0-.j(\ml)r;C6e^Re]IIs*?G.J@C;-rq6a'f-AfA:_J<qAB
%"d<on63VNH,Kq1@YeZ4k43HN8me'DSQcGJ(Dn*BdQg7R=ph?"pMUhaeG-bBZf+PI*/h!Knm#>^&qWs8Q**!YeDnD6'X2YT$WTI,D
%4OQ**?O7.I]_GE@0AcR3<:'qBVXdd,bOEp;fc;flDoRE-.9kXg:%*I4?[%Om9o_1cT6#=VVBj$$?!TI]FKhi%+&6N-44o;dY+";A
%Jr8jD"6Id/BW-O[V9)=gX3>1[MWLMZ]iV[H6!A+"0M^Hn8C'Dno5?JM3BEt#]P9h,;JY:HV,C);OO\Uk"KMS2hQ5O_<N>AEU%:BO
%<'NkjbRHe<59l+Im*[U7Z;8`1@)a$e0IkUC"cCa0%W,''S='f1-(8Yc3hoE)jH)pEg(=nXJm?=*Pj(,CW`&n.eM(#/[MadDnIJBB
%F')AP=5_Q>9cFuk[)Ub37:A_QWdB'B<=eru,t!;a_babA<O#q8H_"N/]fj.m",#b%JZ@.u8o1MH"9+g+.!jjm$b4FZfi<mq\6GfP
%>cI0E:Yj+hWs3J6cD@e$I65L"L&);Xl59hKC<I?*D8+fmGdH.Rq/Z3^CgM&Q=#/a<0>iB]Ab&:6FUI<66!>YM5A>D;5^G/ND,j<Q
%l<5!GAjt^/l?qK3\k%FA<q8-aP-h&d*F/G9ntqN#]qIU4Z]MMaodf-7BASmfo(qij=IZ\3=;>6Mdn!IQcV2Rk9WYqM@PO*i8C:'d
%6q#t"q=Z1/,_ta*l'8hQ-$o>m+$TGbWWK%";mZ&:pP(<d4h:5\.HdG5.dsM.h':bM7tkA2_p'jRgok0A/6R,n*XNhB.OP)'Z'b%)
%=:?kR<u$U<rX6D#&ju0rlHK9iTc!I?(Zd?cU^7m:#5'P(/d7?[drLq]$cW%Wc1C][:Zi\:C.)fr?E1#n$`0q'QRW^r67Wm3PfTZi
%lu+nc[>0i'iIO`\?M5eh)<kG#U.;Z7At1f['l+^%87Cs]<kPuA3;E,Y:/"CM7Vk;n'N8S"!_p.@qar<=OI%QqWd)@L\GE,gR*k9.
%q8lu9T2IeJ&$JE&l8iY\N@:!66%ck0Ic+=4X82j(hQh&M'm"@<WZsPmK?nAL#J-OKs6.r#TB`iAGZF`iRr3Rq0d>.E;qu&W0UE)S
%+(QUg?S=kE4irTc,55'11dVYVgD>]d`.s8YKVNV8Kj9rm;nNOMU@Q1$ogJkWbC3QZ(?L4=JJGAfbSt:s08OkKTI.Q_8Bu[`N,?j+
%)5lkJ-(.'Tib%s)WHEhZerptP'_3;W=9V=)>EGZ>Hn"M*H2f6VqDTJ0Qgd@hZ\hcjcE<pZ[O%_Q#)(i#C!$+X'J(3Q:Sq'.Cl8+#
%q4_jXUikbo7*je%lL$*qg,EC9)V/^gU%Q:Ak(!fdM\(R<BNLlOL3&a&4%DnJ>PJ5kQO<DbAe;deT.b!@VjjDtGXGKYI$j$KUV#We
%"(WI8_S%K>Y,iu$e@.L4)I,XJ]&h%ZaQg/CR6O:e^G>BRXCf"`XLocHgPWQr(MZ`G=k)8bhIg<hUY%t>kH(Cm63VBIX$48<CaCBH
%dH4l,!tie(7dgdDQgi^jS"3p%7Po68WoiG$=k5=%S+A%0[L+?Doc(6(<K$a%5X#",r+)Mil2K(Sr16RClc85_KD(9o]9>9eFJAY3
%bN]GI(#m*``^o2dLT`mWc^8L9>&uQ;rko5ZdB(IRXGU3]K_`UW0<B`2.9\cZrS"."[*)`pOYu?t>"Nc&R8leDDeAAEH:l@N`Bi(C
%cdnU!ZB(-MhR>05krTC%bB4QNY1&mP;2TX8q,S5We*#JA[,9UJ;!7>/3cr\#U,Hj"T,ffo>KQggGQ!Qfac#th2([OG@e2E`KR]cG
%7<I1TX"CMg4]J0YZ'@47#>@]8r\de!o/N;,SV=4`+Dl4HXZkNVk1Z]mE\h.hA.e#eS,LeCm]AoI<QG&PX]TlL<N:gm-oZ'ap\d.f
%XXTSnpN'?4YB;EMF52_S.*m%PVW'Ogdc^HZq6(l0IS'(f'b&uo]=qb?J3'783iP]OSSt2&RaA`"T[h21YO9^8RGQfo4+<?rXaF6*
%b.Ds?^ib3N$:UuloE%F/#63E2T0*C^iq@AA.WNs4HqNq.:QXd@N*@p*^$T\V8_oj9QfmeaG(%DL/Z`7+QF5,]JE/d!Xm8oLlT:c*
%:A];shji8d3(l@t[5#'_iMEPl%H>d;g&n:VLjL1A,*q0jTsYF,+Y[%OVP21hHH/,g0fqBA6&P2"AN[IJCV\uedCU\+2)[C["/#ec
%'X7\f&_AVpdB[5F']EU(qIJbqQ'4*iioIUgq`\@MKYH8U]Ykf)2JTIE5AjP92IC;<Lo!rp3N@UXk+"D1't&!'\,C"-l;\7gp"j[f
%+/j<%?.VEe0h>7ZA"GO=j*LE8J4Q@;6An=RaGq/uC-ad'1bG2Vjb"^k</=;Pj024/\`ZjF%s,^"&GNd7i!$mY7ed>"!2mlJAaETC
%\%p^EVNJEf>W_GL5Z4RVYUbqmrFG)Ud^,^"c^C&-rUV]k_:8?ulUOLbq-E=DD%<MO[S=5&iT9$aqhTS,%9>rh0-q)Ur8d-,pUG!f
%/fVjOE=GJQ1LSIm//m4/OiMB"^#m1XDsHL@pIh\Rq]a47Ii6)qpXUkA#+iKoJ6h<%4o1@j(*fa%b#+_]om3qSs3qD2*LW/=<gun_
%AgZV#-MjH"9TjRg_BjQ^,K3b,)6P'.i]gmP'+'7&SY?p5*aE%5VpKI?X#JZb<@3o%S+F@Vh5hq9,d[6q+POp(7PXX*KJd=?eCAuT
%DFVGjjL7qh]@tR<L9cO9L#)+-5fZ_M'0(:t/Lfmu$\IA-DHgY3(YS/Zj3W@"7KhuDd5V)c/&F4W%rEu+5&O=<s6,s'XQ>*BEkWqu
%F/Xf"Tf"Ciblt__-%hp0l]\8MnA9u+GoU\'peCp/cnkpNX_C_6'`_0[/Ie'68Jq/IL/YXNXkd$2Bj;,j>ZgInm991OfPB>].qsF6
%d6Rhq>)QuP5.,-]'n]";-[+6A5]ba3)/Ks(mA#UFI<FADDb_,!MRnLi3lNB#;Y4_s)[5MP3b>b%eQbp,#s$YHWTWZ0^eXXu/]iIo
%P@&(S=pf/eh'oYJhtnS=03qlP2WNS?:,)$Vk$No`8n!^^TUpRV7)74*Kata%io4tALY8J'qt^fM;<7i/Il+I]gSS?OV1TiFk,VF6
%e1L75YbfC@Nk4K&s1c5tfs)b`Y'U9I#B$m\TZ3OXV-T5b!sItE^!Oo8cjeZY8hsQSNW+:^1ITfp5pX'FFLPK2O\qN"1ZM4bS2g'(
%K6F-Ufb;SG$WP*YKXjTs,R>PRc>ATZ%:/.9@#a,,B/_Xd;MR`'1T#$!/mp7T+%>M>;]DGe'N,Y=g$/K(l#K&:NIKQ1fTVa*9h9:%
%-1N-KeD9`--p@H&pRXNU8U?E%V@.HMGb!;M;(WAM3:;'K4el^tiKKU6S9`:n95#,1C@?JDXiF%^rO%pnfLD(OfPI)QVLPk8ek=E+
%9ml`3BM=E+PXkaKpC?07@;HL3NI/!6O+@B_qRM=*ne)Z>JhTU#76AH@7grWQ.G>EOYgmu7QQu<C:^<HEfR3$c@c1kAd8YR7jTAsd
%F,![k7FQe&-:lF?%_YQU\NKf/CO*U)"&u(b/CuA^EQY,[B57AgOJ'X,26f%5P4E<1KA`H)ARb8)W5VcM<TQG#OtFDN_OcM'MX7.n
%dB1H!nO%BS3UVkOkaX=\To!`.S2)=m\<sR9_Nu=k7)K/iC^-f1V<GVLM%S3CQ3i#<7,MsLim<fUi=LQG!Tm`lTkQma/B-'0e=MM(
%KrC<2Hh/uTZ@@uR4G<aAJO!"]FRZVKG59HVU.M(Yp*k-SV5SIRp*XU)1--KsjBm=KTL"bUk#W.T(rBcJed!?DXYG>,8`FD,^I:9E
%&`o0<>5Ke"3<gqLKG#"k(,@taeb0*\j'm+^oPDBFgMqGk)e=@hZ'0L(Q-F,NWTrZN&.C'*E+s9.1tW#7.]oUcj+oUJ7\\ltopfcX
%H`)do;EX$aY8+q^DhIN@l5(QJ`d2miC_[X`U/N>]m>^BPCKP)3hu!ZhDeG1B'@.;;HgbL3$8b'VHTY$%%)+Kp4C[bQMI71K`;1@O
%b``Q!E[gqSUh&9VmdiZB,":,P[-Q/B&FLJ\,q7"8cbUqZR<&-<22undXL211)ZX0"Anh(g2a$t>WT%"Znq$c(2h)]C3fcR/`D0QM
%+l,dNZ&r?Z84N'>],A4C7"#LT>T,6dLU>8"3RUO7'LAp2SK&aJm',-+07M&u!gIndCE2rkRR3JZ84j@\jTS9s,,*G`VKq"_G.QTD
%!"1qXk7Fri`a"_%iKc)M+9eFYq[F^&)maFMhmVk-Yt`'R"^5+YCWtt(`IJ8*>h5d*<B(]r.j]JCDH;nY?>klp.G_uhn_Z+pT[PH_
%DKGY=./rc3r6S_AT;aUH&XhT[(Ehi,7S$WHNlqV-/I<8Q@8SL9eE5fj88H'k5%"I=:LP:1K+J1Q5%fOj.tq/r".APnlWQhk6*BiN
%AkL?LpUYG$]!W1mBg)>B_$r[mN<0E2E!'<][O;[iS;77Fiuo9C7&W]2_:2a<5!NQ2qI@h]k-9NA>ceaNq7-%/H#+gtebHD`6?TtJ
%dqdX28)9AH-"YG5V*>ifRiN!2;lkk%p'Z/_M#48jeK,NNn[$R.b18I/(5\nW2'A`W[^_Z)4%.*)j%u+9j.:GbHHb>:&*2K`i'$%+
%2Q==Z_jT@$)O/:Gr-c#Qn*Rc0*F&bpmM_495Q2Utk9O60_/$,Tj7ahKi&4#DG8<I98:ej6D00Rr@B#9$MeYO(G1#3'F"3pn&P$Vg
%7E_6])#U-0__JaJ!)sF9d;gOeO]!j4X+0*Is&W+`Y?S%:>h5W(!RqZ7qY/.@kMrbZ@?d`B-[$%s<#HiUd"m@jII<BJbmN<ZW\>ig
%b`p,G8*bl3h2:c]MOjHWm([UH5s7^LIp5Yum1D]hc=S%2[Emb&,IsOrgpcjL<EXhJk^BYbnm"-JQ?&<W<BNBfKlf21Ol]%$BJXi!
%X*-4&"LThPDKnJB#&lA?.ql:M!CaddGQCcap\fj8k:f`)Z-9Fr-1=A>M,FRGP6)^!*0tPq&I+b?'S/h>bKtPRZH>0sHQalLJbYoF
%<Y0"V.'(5,c5M\->U-VdC[r:Rd7IS7qDgY`2Fn&.4`$l;!e,=B;WqYbXr9Bl5qZsBYQlt#Vo`:B`/;$TLPSOA9j$T@&X@0e=[^R@
%_^m@I`Y#Zt\(,U/?YP$ak#N!*%]o=f."'Va;?oU`0PpM`XWPL*r'Y2O%h-p1'r_pU4GTRV-nj.L[ZJ<q<N?meZ("(^/+4%G&Q)_Y
%G6N^co1ZCHLheNZ3_M4k*<m@dI-4Dg%-Jql1-S](<M2i"/B"U2'u3i"g^0(&pr1gj2P4JIFbtoC`EY&h5F57$kD_!a7?K.'#a@,O
%X<\9DBQ-Lua3m#jW\*hU>?Ng[jtPu&0D5Y_##qe2<OtVG3M)4.d1u?UV8Q@`>'6n@-Nj#+iBnd.p^#NNHc4<[*gprB3mGdEE'ts8
%BrjAP^1nePoM.oXX`KT3^gj95l2r@JrZH)a)PEmHf/r@@]281@QKl(XAZK3_:KppPh1_eDhO^X^N"@l.m>d!:N<kn#(nB!/+AE*l
%W\:18$;m&nOMOTA(%rrVI/<HsPrVqY+JU!dd"3k"ogE"[eG@lDa-Th?);9l'im;.3n0b"GV.EpoN!A=.c94Qtd<F:tO,)Dq-SHa:
%hb$M2*MjEL2>FbrP=9,;+YjCUU0?r$m2\;<BFMqY%nBS*$AU#YIBk)OL9#XjAB<_+Yb!]=QjdVH4dXInTL6SiU-`=0"U.W)!FU8=
%j^I4?$qg!+ZR/00daf)>^AaRJH<B"HK^*#68$KCR?MtjDFjl#\!OdqH_;;&._sp$=WS//pQ>8hD\b/5cbe]?m#G[O(&4=mV(\OKq
%IZCcbD2<^J=q7f=%6B&BrPBU+rdelAaoD_udcR%gg+Fnkn^,CYPa]IENHOOqD'cF)Pe\5sbgYMjrf[g1k8%@Ho7P(TcPIpO`j\Wl
%//1M@dMLRT^:R'k0%43Ni-(]+q]j/YZ$aUk;0(J+ZZj?:Z]$#^2dOUdPbZm7eQ[8R%PU\(=V*LWWmT89a+Gk'Wo6!oS.-r[D-1&=
%\2\!kj\!$4cjj9=SKZs>kl?En*'5k<F0TEGFe.W,qKd3HG(VF68me=h,>u9hEHrM+>>-c9ZCm^,HXida7QrqEda<_53[[Z5-5GB/
%;eN[G;iSkkFi>1*$_f[N<>pBOJY2YL2&8@H)]T:ji#hUjCk,hVRtioFZKA&/9)"VYGT,#"r#%p_NZh#7d@<AJB.`LDTj,XE15DK!
%VJfI/4GO@-R?Mon1<N<T>%D'^Y`tOX9=%0LEYIYuU?hO&r8bhA)4AqHQ/QKcGin;Xq7;rY+Bh5.T$qlY?=]&`4N"(("X@pOBl2Wk
%EYF%T,#:,,,u';rNpP#52Q(juB<;:U3uFe3+")4\9\&!r0O&[\7ca*d^&Gj1Jkc`O939:c8=f4#'Sd\fgUoX1-8n_Y>*r>r,[pU:
%`CQ+%68\>:Us7Mc\io5<elJnRE]m5UVY+<Me701Q#1:%e7,cNLk!hsC0;uB,,\>*;2Qd%(c929BiP[.A?pJ8Tj021dkq#(DJe</P
%#=O=)Gg1UMkfsf*kkkM+7)2:iK/IS.*HQ#gNI?slf.X*&9<A/"MC1To"CD,9a5!SW91^"H!7oj8nA0oLf$g&GP7)G8g3;!(?Ma6+
%a)]_D9m'&fmtXRjDS7OLb%)DE[[RGJ=lt=P!+7s)^+bam&#(s5.^@L.1?&OCgfhbfP6Y4HBN#2&J.Ka4d"4'D-'XKm/Bq\"?`FuA
%NAKb,g3TLEf3b!n#\,V%Wik)9dM2.:.=lqgr@"[srM-n1d>G^V,3fTE;%3OA.RHL!>KaGsX^A#KDRkb[lf4pm3GX4NQ(Q$'mO_BM
%+R(VDgr8upi%X4\/iL5]de:2qA9*q[SU8C:+[l_M<MaD4#p:f#qoZuuk8YnMeWLY7ng-J1\+N-j:R(^lEI/U>H\I>3&D1AhY5i=s
%LqJ3g*C02sn&9b3W8sO_a%^Z4\i:7^BHck&+$s]&R[Ndn-d0:4%ioW$+Ln5;Zn@bU01FPF0h@C;=RKf*TX<_POUs,4:_72K2g?jM
%81JrAL&E&/*\.Yq\S/@W=>+uLQh76Oe?f._EnTY#fUAYipZAQ41qR.`mQ@*AjsqVD](T#p=oAY(8'L.P$?g5XC1fQrO^KHo@o5L6
%KF#9$QC(ScP0+^K`fAZ$C+rp!"p@dL4e(&B]"G6aI)3=TLrceFK"Y[<`L14/1c57m(a--sX^u5BR2uu`!-D=H^1OsL.d(%e,0Zb*
%!PH;&--W&M1]2G(+/Ho%!g6@u`u?6bII@<EiP"AFAi:USBq%E6CI/J^ZM,RUi2k%^`s4%1#F_^4*i'`EDWgCI>Kr+BE?8ae:QX,W
%&b5g^1uYJj@.[Onf"_G_:3]_kPaDX/[(BEk9,F1L!OqQC<HVEs0.aI@n]H@rU1&fSptTt`^W3"`-N,5C:V_[h`rL7FZpJ2XFrcj=
%%(P'pG'IC;*.,1Sd'>0t/J"]'QL?,17?tXB9*u*H*pViD,j3*4k6@J)dq]<<;?^N>8bJ`SKlhD6!T9H-9I(AMK1m9+-i/EOcS;]H
%N?(b=Fr-9;&TY[/d9[G?]_IRSi\Kh$e@?aO^a1:U?Bie]>Y7kmAT@+2>?g)\"Sfd^GmtI#RX&"%aCqsk=NfJY(Lff7qUVQt"6a3Q
%;>2]caQ:eXi%7$;%A[`0,nM]]'fim/gd+f*5!oOAb?gPA?[N;Fbi:mCMF8":+_h-P0`n#rD7/G`_SC:]61NEl^d`b?V;hjs!5OjV
%7#H`+5HuJ@(oFp;r@n2b/H\ICT)-ob/VAlKCG`)L&%3i5i8)`P"M@$XTgfncB>tPq1';D&=WQ)n'(:JR+u9atJ[6L]A>hg8_L_-_
%Q]RAR$)$\0^<t,u/8fl,`P42?aPDK9RVl^^\>iJ1jNY%>c^(]s$5,f0O]CDTjip.rY4p*Jo-YbA.hUgcbCS;blh?D[<[1tF$5,mt
%!MP=@0csX;Gt,@,p:KrP%(eqVZIsW,aHi#jAP!%CUqrP52TM:<3Y9?Q7f1&IS$k,N!3jPcLZuo9+C54N^_+DHC2rQEF%Ah-*^kE_
%,*2spe-K%(<J#`ec]dm-4N"2&/lAT]3eHp.-<#6\kHZl*:.,M+m%Fdn:j0NT\"\FWkE,GW"U9r]8Q:70c.B2pOUs*!*f(6OVV]Q2
%,L=(LC<bd`5,DT*GKQ4p/8&C;GK_ni`lF;:POSM-@p,Ir=%IGI#10(<P"p&r?IG]kP:TQ5m%0r7r-$+`aAF*3Y$Xq.VGcr*$iihj
%R)sSj%1RqcL'Tpfe5qPSV!%i;2`.E4f+n<5UoS]81mC?m0T.4ZlmG'C-D%T3.)tsJR"q7F2)TpQm^Nfb22(d?ig$R)6MSA;CB^C0
%\!CpHEarYmMHH:9i(C=d1$$F;3-mh-=,tOVm2-rY)I7Y]&p88uU67oPm069=6Gr=ZB]uS=EjlXUQ8E>26Z32"abYGpUj@p@I6\bP
%l%Td,%V%=BV*iDlLff]g:7NJ$<R&e@3O820I`_e0<45Yhq335t"Vk%[;nnV51Ta+_pt!;<SX&ZS.94iA^]J\gPs\XcTZ:("ZJelQ
%IRXO!&oaRi/4ut#JO@WkeZ>.t41iI3[jK(>M*WgM;0&?J8_?\cXb-B*pPMN\"@h.tosB@s.[q8F\^66+^G3g&@3;2-M'*O>fWjm<
%ld(@L;hBds9=J=61m?:mg<E$n#-*GX8'6bua0nOL#`@=Cd^Cd4H-k8,M964B&q=+\"Km`t>@c"uQNO&4"\Xa(cQ;V:*47"F_c"/t
%Q<'"UkQO7df'ist!tc#OM"4(P0p2'&7uT,9[-Nk\P75ur22N?1C(_4kU->G\VkS>qI]D[_:mBihC9"48JLigUZ!?VuWH-m0FO<\0
%1t?F+Z.>NUcX37YcUj+G5_PQHG5AbjT^OA[->O*YLe?U$3ElQp%>JUL5\LESfC<05XtoiUOfLM6&#--8#'GAp6oT[GNH8l0@"/_D
%0UPkkPmKFA^ln?C)u\__/)tc?S,jh)-JLaHGRnXj<PcTK"*,%CM7uVoRY?4l4[;mM,tl>FEW-6k;@\,J1a$ke5Y9H%'hlY?)Ce:%
%2@qm">XOdk9VE4^3[iRH@iK@nZmU@,Ai4rYk40?WdVf.eT*^D7KH4Kd?)@E):s2;T/D:`A&6(JSLmo6KBT@uKNT`EGXP%(;"*AVX
%(*%lRLj5f6%s]-Z%5-h&*G^%R<m.+1)#ViqErJI!lMj4NcCal#Ig'*&?]N8HiSM=kl-GI5)$N:]n2`BW?&XONSX,294VD$4A\O$>
%hA5IXpH!a=:Kb!HT?S#f9XD=pnNc1L%TJNL<[MM%am]0Lob7HIJPQ<e2IOWWYf!ScVLaPK.Mi9o[>]cIWcT%"5%JNEHgtl8GS\%`
%5luTiWjp93FKk1gmjDYonOS`o&CQFa^T@Q/l4:'I809&FC%8d/8mE3s+IU4CD]r6`"',tp&/KDI:+/c::^TOHbZcI5p-b3=1_UK,
%^WuI4E!gV>EEXD6=$?c;gdG:eU^1@?4LpUs>8Id&=S[kg`.UK@UGpZl.GbUmal3S^8lC3B5./4%3`7=&h[kJJX5ZY]hqBU#mCZ3E
%Ff_Mhn<&`MB$V;[+Glm>i">F1k1H'$W=^lm6D(T-BniVN-GbHRpBCS&2,";[iQ!j%5$PaJEBHHdN4(Mj+(%);pB(k8!(#4:`)ef6
%8$p%8O:qT&5hf[/kVUa2b1T^03%mR..[W:'5nHSC&[@1>JYHEc-'QkEaquA$k6BcHA%r7a?k`%f\anUAR]dX.0T:>riSr?VjY.cS
%j5,Zd,X_jK6WE0miWWJMY30i2K==/<!N\-qH*T(7]`XD_08SLj_k1/=n(k_,mstP[@^%Ji]Q%SF$YSK(21dUA<p-q:o@iCI6II\q
%R*SE5Gcp=3b)MYD1/[Ch>lnk2#sm;^r;"bHU*&0NPKO+(>p<7F-_7*Y'f]j7h=C9(`"\#D8?Im+PArYq!Gt@YiUhlDb*1K2;NF=U
%6>9:ls-aFJW>8*jO:oOAf$'dWC5h33'35FLFp:)4Z&X_0+Q*V)mlTcjM,+5hO*Z%Z$%8NbOC64CfQeL<`1:1tQl=99NR35d4]2'>
%dJ9"5n,kZ+i#sP.<5:5[[\a'l<8qT`\]c98;2T6TOF`Qo;O7d;fE!a)i>f@q?,tY!F2;Qh3@3Ii-\2tj-[eKIR'%GS%&A(nNL[M;
%:j7[/'5hQmKF`kd(W<5]TZb,BUp]m^CHd!=J,X`MP/7&2qc+G:%K,'g7-kHAoc,ra*cFHber$6H((o1*-Bi\IKL+p7p:)D<#I+Kk
%oUmT$6a0ghP(mu$E2boLc-\+n?9T;YPD:!W)&Cl8*6H:UdK*\Ug@U(8s6e'FWW:e4F]u%FZ0U5hWbVs<B67k)\:VYf1$;b0S^D<^
%@Zt>8%!pp&joSFL[>:7aHCf2h#6kPY*/nTqq:WWhb8]p`Y0A4,5_-K41#UiRm>1$I"<h,smuMTa-t#CnY=&Ru2ptaf=p>OjSLhPp
%bGo_*B\."5+_Got$dI&`rMq-JNNp']<-b_[P+]?D?e6RMY#H;=<mD0uY$._\8WsQURo.Ceh%Q?9.B-2t@S51[:=..#8P)WB5(<Y"
%+TciopB`,O+E;6%")HM"1jo*?^9$Y81un**Z.jD*D+pB0W5_n+N?iEn>pr<=)8]e-LDIiThe=9G[d't'c(Bh\;4]R#;EC)MeO*-?
%q7<s`?;DFq`)ts?:Xo>R=?_Jgr+n=phL@%'29?j$W;r77DS0Gpd0lNVAKZO:5mE)gog(tf\)oYR,FZG6TJHhGbfNT=9sbEN]JhLO
%/Hk&$n@`+2Pn]#tqL,GQB/?.Pi!n*k@`(TM3a2>oeYe?AG6m7X[?VpbNYu(m8*Z[(K-g`pA$C&'gG[Se>BPcB+69lGfY\oV3\3<r
%&"Ue-[j>NH(ir]V7%ESq=dYW6"rNqUD%`OfX:\pM"R*l__AA;LmR%b-D2+?MoIRrVT2lF]NRH/T+#E^!+]].U=6F!G9o8MZG^g,D
%0gMr?"alM8RD.`ZFH4(o/5(]h]`K,a%"/=piWLj\"psT5=,lL%d&&4&OhV2:*:fKLm*Q2cF"[X_(P:ub(!V_mkk"M]8VPG[M@:H:
%'*86@qgG?AnpVSAAMO5ARFmtP2AfWFX.!2E'KE\74lT%&<jP#ddqM%EhakkfKH73s7nmSML1$[M#pKCoO=g`(Q4u?d`L4rPhBEp+
%>U00,LXI$(fkVOSe+0p</`Vn\Ze6NCim_3J25@Ym<Z1XgA\&\^i%U'X;<]8Y_qUtQ+9cEj_,EV1heV1]`-n3fq*ue$nL%4[FboAL
%V'obHS:/Y8fF.V>pND&Ae1?M!N)_`gp;9'3>pRiBX;Gr]U?[aS38;3rFe`XeR4!f2(,[61qDsBCeR2d"2qN6'@iHsjnjp&Y$_l]=
%.-\41H`drHc5$k(HcbQWo>5SU`1rl&GNS.t\;cYH$lqN=:r,r?r=mKO\QS$RStk4dTTP:+Kppr8^L#kC/U;OT@2-ponpc`*TYZmh
%Efj`me_n9e5Z#94Xope*@#"Mu_=CmsoL5QHQ[.+]a:#S#A9Zom[<Uf:87Qe+f-CL#l9O_j[9C?k.L_O\&PBsqjdfM2',T3X0<!l_
%DSrN\\]A;0B%?+YYHVBZ>K/Y<$[QU[9cQ/IhdF6`c[-t52b(4/0MX+1Xsg]I=Ahha=2gd^atJ7B$WEsP0uuV(^O;@/7J:`#Mq8>T
%qD7*iq0qT&B=bA6Z*K`$&4S-D`c)Ui%VB7:aZPAEB&GmOb7/Srdja<<m!\LP*YdNJY]nYN(QkF%UuL5))o&#_8:AK=X&TT*bW_hc
%HL,iQ",XGjfO)p9Z+7DdQ>^=`KW8c*UB--LI[F5Ti#0C]CLA&]q>C::FUQMeaHV;Q9cS(l'7)cN.]:XfXX,?RXHj;4P'Ld(;Q!0T
%6!;.sR3b;7DRkjPa;1T!+q>O@65c93DL\0/)*o`SLCGj#Z]"S2X6;WN#KW[G2m]R41cHB8F:a^L#jAg&s%6sgYk47.F`>H7M]c.9
%%C(VKP\,ZB$._aAatQ[)48?J[9'1j=@=`ifjt/(&7GJFPdWn\")PntB:IIh%*3h"2T:lmEY\fAsHc__OX%J<KUSmmC>TN!8cN*Pb
%ECk]'6!jdJk-ZBE_=Ru/$1L9;Q:QrXl:D5FMhd?A:KttT#<%@DS/%,rMK\`J]tjPTDms6eVLc7DTDP9GFpl)I1[P*3m>jd#eT20/
%4oNS>5oc<=m5BPKJl3WN,tM^\Q<[-1LlbXW"$LUjaF=9h:!j;?)\,"!Fc:cVkZ'Z+(R;m9;`FC'PRL)4D@*u\$W72mS-J=65sR;C
%2ApN/FE'EOGSI:E?Q51E3O#.+Q16A]8q8)+PX5D$s4ML%`(\S[_kgYo%_%mQXO5WA1DHC&5I;3RVc%gc,4"J^XAX,+l<7@41?OM_
%ZqIiE_P.8.Y.*7KF3kbdcr^:YAeCa.\k:IP>:uqbkGnG!b$H"\ERNQC7-Z85W)NRXiS?TX^f]-G8o.Me8[-]&MR6)H-Nfb<.,&&c
%k#G$u,=IcdqgpZVi)aVmWprGo[Ilqc?Xfut3MSQM^m'^j"/f-s+EZ,3ZR67O]je?c,\O$4_Rl`cQpG/6^!2t7Pj$XC@[J%HF0@X%
%DK?;'T[.KSUq,_W@$fQlMs]n*3qu:)fONTeD=\S"73Wnt[V?ZGKi'F4m2C&''c]BcU>n8UcY8=c3/:*M`u![#mhL`t=l08bjO#jS
%F.;0e9Ht'c9nH[X@!SX;T.!bRQ+9q3)8K&'9<)t1-07,S+9ebFB2I*1m"`M%mkhDrS7YFf$tmO32Qg/oTXMB[1t:MM`4it1Wmm-/
%K;^;7#SFIK5nGir7+DALMLpOog+NM..2pC)[<2t'nN:g7AS2t>gW/l.:$Q/%5UT7F]M"^8lT.#6Z.5)A&k])b99F#tS`7/0V!kfA
%)W4FA+-TmJ!<Z1Jm>9hpN6nWo%Tn%(#?d+4lR?()n3ULt,bn_Ehisq]&JE.aZ"DZZSl-:"6_r-3Ne@R!"YUY&XPUoPK.s3?+2bTh
%/OYCKW%4Z07>,Ib_YEcHRoq@U=ksT0k/&5S@_ACd03MF0C*8QK!$dGK%,%2)?Y-j-2=UHuU1(Rh>.U$i5",L^HHe:Q/lRu9("CBr
%nVbAH!bfJ`M-he[Rj&*O#N&%RP]+V&dBL=``)s=?A@,=`gm?r2,2XPffl>CsTs"VglL,-s$B`.dBBqs^KE.e7)Pm4mBo]3]Z#6(U
%-s>[l\1!9]V0rbrAI4.UF6WkaW2]lc7W!2c!;"2chi4D+kIXE%<2FZNi2QeilsR&BCT6$fK)Ynn%JHn\di4Ao&u:o($f&An^%dOr
%)nLqQV5'HqXf%koA]nLr;U$k.r_'?h.E4ZZcIi-9dRa=+#Y@sM6c>LGjJ,7o:lm#Z\aEHd>?l81PBkoW*X?/j=^1W\>toK036@`?
%H+(d*C@nf@><\MsZC-g`lm])ilUT@J(@<"&!G^/C$$=JPn@^jZa\6"3#poEGl4su7[^GlA<fq^G=XL)&C2.aQ]f]0C';`GB\F!tW
%#<^<&M9X=!qa'F0KfLD-99`=.5L!6GK,kb$'Y/eOg(.PW[+kV/@$kE7)AeeU&$#(C]]n""%>ceU5,2\IOIN(nWV.)IE*;*6F[AC(
%6p$tUp]]csC]jZ.3#,*-;(HT_O?BWjL25YWiWkmia"t0g:iA2`8>/8Dp^ijR/ab&e^`td_0-dbK,,%=q,>seH9Hr&"LP!e`7-N88
%hLeR2FNd"PSIEm(#,Fo+0W8<E]AJcAQhToUNFuB(b`[-,V-k)Khb1b\qO,4Cn@`>O$YBIOqKX[_SYFW8_P(I'SL6Do[O@V%6o%/5
%G#m'Dm;NeTe55(eZmQuY\GX4*MX1td,@pUq0@r'Zf.]>^qr25lY67I_rD^[&aZTWXp)Ye40=="dT2/UXY>ALnler:7fMj,L#]M7*
%?\Ud9CDFXK,]GjbmMam*_?1Q,+V-lf.BD<rOjqgb0lq$X[1%_,bn`\2F5C0sh?N:bJ^e93nf]X2?L)WqnDGQ#5#dN`=1ZLgY"s&[
%.L@'ufGZPCcT_0"WOt#??`PdDkDpHl=c0rN`1_H&:UcpH75jPB9/=HE:Xk>L"#No8Xp[(^$-L=.!cs1IOSt'qE7gQg@+S.A*qFZi
%3CoBT,Vj*jPS+q3>d#`ZcPK",q*K(G,2k_VrY'&r?nqr7JO)iC'_X:N^^AoB<?6X?J_f5f`I'B0%Y"aD[3*!]2OdD%lE6'3(Q8A8
%nD(T*(H5/lprDU?]bii<"m%<7fq0j\+VUdG1`BHs[Xo6-0\E-PBhiCEs2*5LdNnTf[.ZP<"&\R]%,]_emLG=hGOn(#Ha&(,3)-Xa
%jD+/kMZ;4_.8,A"+Nis-O2ZY,L;M1%gBW/;QHefIa0EJ:HY*'=MAM_>=[H55C:&f]3>CJtmU$@3Gcq]#*\u/@@_.q%6m5EJRo94t
%\L*TV$p&>P(2t&lYBX#-EAQI*60SC4*q-hn`,-&Qe,j'@gn5<Y(pOYFib?sDA#!^WlAVDpkjP>Io4cV-'/gT!]ZQ>0FLH7eY"5\"
%$*UIdk@=7k)O,D-meU(:MV!eh,368HQ3osApQhfuV1k/4fU*jd;q#FKcJ<Y3=?YbZ3o*jJ3']<RS&2]K.9odC.OM*Yi8M2'[/-@-
%9Dq"ej"s3c;m$lfXE8=jWY3-JNo&\']=]]3+k=AqmDI`%bZu0TdHnKaS-:kfU9m%n\*9l;07d&l1Wksb=BkZ$ANa)ZX*Z4EU5e/U
%LE!DT]qm%48g0piD%U6*&@o%fM0eU,#hG(RbkHq8Z`104G[^jBS6XJ%<+U_R1j@j"lAE[-Zl7L%Qo&W.qr\;FGZ`L-\S35SeiS<"
%nRqdFKF,DYF=UqQ!s$QjXi[+<4/&FZC00:cVpZEqh3(#!fEfpB9)Y`lSga8)eU9P"<aZ-"0mjq..$n78<*\ARb_$iMEfBc<m0Lp6
%=t;ur_q]Jr;jd\CrXh<RR*t;n,[.&]k[/Ul[N"232u6qP`ii^t&o:Pe#`0R"Eb)Q=E2,cm(K)+R`4Ce0KN^i(Sr2&sG7IDch:l@F
%A`JZtN,9[r1`Z+PhuR9t^iMAfXK8;'Z5oP^b,$L'P/o)qjEF3J@e(jiAgFr<2kItKb[:pC:d'+h<Y1#\m&N9Q!.gkq:g/P:(&!>P
%OSu=U[mdi6JT\@?J5g7q2Hu>A(!`EYFlBSW?]SJaX:=8AAHEE2UWit*RDjPdMF[i;GJ\:$+sc?R>s<K48mDrC5&tY#ArdMrfGo3Z
%;6S*H0'%rf0Xe*9/=+;f08\:l1,af4.ePp)83u16-iK8s1;K^QIR2hG*-_NtL+ZHe1jBUjXHH2_/;o>X<DZN8^1M!maHM1aS#Q42
%%c9Ek_rS`N4pES@d/irIp=LLu0'3P0n7aAsR!oct=a[s:ObWSNE->,;cUUjH'HXpmDXD$E\r`Z]k3H,;Zrb.uoDj:j7a_-_N&9PU
%\nf<9c#W&S_s19d6j/=.;+0oO%'r(`=g]ZMI'/^-RG.W'D%Ap*1h_k<o?&oi;-1kql4]>[R>A+e5a)mKPV,cn&h;o&g7b:80X&ik
%I)Xnd,.H)`#@Ek!E@VBb<)RgQ'g@*.]+9&g^#dObqfg)8qqHVas8(J7rnH22^\d0J?iTs.IeccHs8JL;rq>[Xpqo&Jro.jFs6$TC
%J+Mgg5Q28Gh`(R\rq,@IhgY1[s8(3Rhn8dV^]3Q5+i-n)%DVi&Du]@rJ+5Jt"*rc3/H~>
%AI9_PrivateDataEnd
